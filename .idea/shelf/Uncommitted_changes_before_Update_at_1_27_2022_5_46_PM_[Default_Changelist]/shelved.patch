Index: app/src/main/java/com/themarkettheory/user/ui/restaurant/MyBucketActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.themarkettheory.user.ui.restaurant\r\n\r\nimport RangeTimePickerDialog\r\nimport android.annotation.SuppressLint\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.os.Looper\r\nimport android.os.SystemClock\r\nimport android.text.Editable\r\nimport android.text.TextWatcher\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.view.WindowManager\r\nimport android.widget.RadioButton\r\nimport android.widget.RadioGroup\r\nimport android.widget.Toast\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.google.android.material.textview.MaterialTextView\r\nimport com.razorpay.*\r\nimport com.themarkettheory.user.R\r\nimport com.themarkettheory.user.database.dbtables.TableConfig\r\nimport com.themarkettheory.user.helper.Config\r\nimport com.themarkettheory.user.helper.PubFun\r\nimport com.themarkettheory.user.helper.Utils\r\nimport com.themarkettheory.user.interfaces.ListClickListenerCart\r\nimport com.themarkettheory.user.newmodels.booking.bookingdetails.NewBookingDetailsRes\r\nimport com.themarkettheory.user.newmodels.bucketcart.GetCartNewRes\r\nimport com.themarkettheory.user.newmodels.bucketcart.ServiceDetails\r\nimport com.themarkettheory.user.ui.coupon.CouponActivity\r\nimport com.themarkettheory.user.ui.dialog.dialogToast.DialogToast\r\nimport com.themarkettheory.user.ui.main.activity.BaseActivity\r\nimport com.themarkettheory.user.viewmodel.CartViewModel\r\nimport com.themarkettheory.user.viewmodel.VendorDetailViewModel\r\nimport kotlinx.android.synthetic.main.activity_my_bucket.*\r\nimport kotlinx.android.synthetic.main.activity_my_bucket.rvMyCart\r\nimport kotlinx.android.synthetic.main.activity_my_bucket.tvAddMore\r\nimport kotlinx.android.synthetic.main.activity_my_bucket.tvAddress\r\nimport kotlinx.android.synthetic.main.activity_my_bucket.tvMyCart\r\nimport kotlinx.android.synthetic.main.activity_my_bucket.tvSubtotal\r\nimport kotlinx.android.synthetic.main.activity_my_bucket.tvVendorTitle\r\nimport kotlinx.android.synthetic.main.activity_my_bucket.tvtax\r\nimport kotlinx.android.synthetic.main.activity_mybucket_new.*\r\nimport kotlinx.android.synthetic.main.fragment_booking.*\r\nimport kotlinx.android.synthetic.main.toolbar.*\r\nimport org.json.JSONArray\r\nimport org.json.JSONObject\r\nimport java.text.DecimalFormat\r\nimport java.text.NumberFormat\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\nimport kotlin.collections.ArrayList\r\n\r\n\r\nclass MyBucketActivity : BaseActivity(), View.OnClickListener, PaymentResultWithDataListener {\r\n    // View Model cart\r\n    private lateinit var cartViewModel: CartViewModel\r\n    private lateinit var vendorDetailViewModel: VendorDetailViewModel\r\n\r\n    //Recycler View adapter object\r\n    private lateinit var bucketAdapter: BucketAdapter\r\n    var bucketDataList = ArrayList<MyBucketCartRes>()\r\n\r\n    //general\r\n    var isLoadedFirstTime = true\r\n    var totalAmt = 0.0\r\n    val numberFormat: NumberFormat = DecimalFormat(\"#0.00\")\r\n    var subTotal = 0.0\r\n    var totalTax = 0.0\r\n    var discountCouponTotal = 0.0\r\n    var totalPoints = 0\r\n    var bookingId = \"0\"\r\n    var serviceId = \"\"\r\n    var serviceName = \"\"\r\n    val pickupNowType = \"pickup now\"\r\n    private var isDiningInSelected = false\r\n\r\n    //discounted coupon\r\n    private val couponPercentage = 1\r\n    private val couponFlat = 2\r\n    private val couponBuyGet = 3\r\n    private var lastClickTime = 0L\r\n\r\n    // edit text delay\r\n    val delay: Long = 3000\r\n    var lastEditText: Long = 0\r\n    val handlerEditText = Handler(Looper.getMainLooper())\r\n\r\n    // for time\r\n    var formatHours = SimpleDateFormat(Config.defaultTimeFormat, Locale.getDefault())\r\n\r\n    var radioGroup: RadioGroup? = null\r\n    var pickupNowsss: RadioButton? = null\r\n\r\n    private lateinit var tvCouponCode: MaterialTextView\r\n    private lateinit var tvDiningIn: MaterialTextView\r\n\r\n    var selectedIndex: Int = 0\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_mybucket_new)\r\n        try {\r\n            // setting keyboard adjustment\r\n            window\r\n                .setSoftInputMode(\r\n                    WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN or\r\n                            WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN\r\n                )\r\n\r\n            tvCouponCode = findViewById(R.id.tvCouponCode)\r\n            tvDiningIn = findViewById(R.id.tvDiningIn)\r\n            init()\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        try {\r\n\r\n            if (bucketDataList.size != 0) {\r\n                applyCouponChanges()\r\n                calculateFooterSection(bucketDataList)\r\n            }\r\n\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    override fun onBackPressed() {\r\n        /*super.onBackPressed()*/\r\n        if (PubFun.isInternetConnection(this@MyBucketActivity)) {\r\n            if (Config.isHomeGoCartClicked && !Config.isBucketAddMoreClicked) {\r\n                Config.isHomeGoCartClicked = false\r\n                finish()\r\n            } else {\r\n                if (Config.isMenuFragmentComingFrom.isEmpty()) {\r\n                    Config.isMenuFragmentComingFrom = Config.isMenuFragmentComingFromBucketCart\r\n                }\r\n                Config.isVideoPlay = false\r\n                startActivity(\r\n                    Intent(this@MyBucketActivity, VendorDetailActivity::class.java)\r\n                        .putExtra(\"category\", \"1\")\r\n                        .putExtra(\"serviceId\", serviceId)\r\n                        .putExtra(\"vendorTitle\", serviceName)\r\n                        .putExtra(\"selectPosition\", 2)\r\n                )\r\n            }\r\n            if (Config.isCouponComingFromMainActivity) {\r\n                Config.isCouponComingFromMainActivity = false\r\n                Config.isEventBottomBarClicked = true\r\n            }\r\n            if (Config.isCouponComingFromAllFragment) {\r\n                Config.isCouponComingFromAllFragment = false\r\n                Config.isCouponOpeningFromBucket = false\r\n                Config.isEventBottomBarClicked = true\r\n                Config.isMyCouponClickedFromHome = true\r\n            }\r\n            if (Config.isCouponComingFromOverviewViewAll) {\r\n                Config.isCouponComingFromOverviewViewAll = false\r\n                Config.isCouponOpeningFromBucket = false\r\n                Config.isEventBottomBarClicked = true\r\n                Config.isMyCouponClickedFromHome = true\r\n            }\r\n            if (Config.isCouponComingFromMenuFragment) {\r\n                Config.isCouponComingFromMenuFragment = false\r\n                Config.isCouponOpeningFromBucket = false\r\n                Config.isEventBottomBarClicked = true\r\n                Config.isMyCouponClickedFromHome = true\r\n                Config.isMyCouponClickedFromProfileMenu = true\r\n            }\r\n            finish()\r\n        } else {\r\n            showMsgDialogAndProceed(Config.msgToastForInternet)\r\n        }\r\n    }\r\n\r\n    private fun callGetCart(bookingID: Int) {\r\n        if (PubFun.isInternetConnection(this)) {\r\n            cartViewModel.get_cart(bookingID, 0, 0, 0)\r\n        } else {\r\n            showMsgDialogAndProceed(Config.msgToastForInternet)\r\n        }\r\n    }\r\n\r\n    private fun callServiceDetail() {\r\n        try {\r\n            if (PubFun.isInternetConnection(this@MyBucketActivity)) {\r\n                if (!Config.isPreOrder) {\r\n                    //if pre order is false then only call this API\r\n                    vendorDetailViewModel.service_details(Config.vendorDetailServiceId)\r\n                } else {\r\n                    tvDiningIn.visibility = View.GONE\r\n                }\r\n            } else {\r\n                tvDiningIn.visibility = View.GONE\r\n                showMsgDialogAndProceed(Config.msgToastForInternet)\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    private fun init() = try {\r\n        //view model intialization\r\n        vendorDetailViewModel = ViewModelProvider(this).get(VendorDetailViewModel::class.java)\r\n        cartViewModel = ViewModelProvider(this).get(CartViewModel::class.java)\r\n\r\n        // toolbar title\r\n        tvTitle.text = getString(R.string.my_bucket)\r\n\r\n\r\n        clMyBucketTable.visibility = View.GONE\r\n        constraintPickUp.visibility = View.VISIBLE\r\n//\r\n//            if (Config.isCouponApplied) {\r\n//                tvCouponCode.text = Config.getSelectedCouponCode\r\n//            }\r\n\r\n        applyCouponChanges()\r\n\r\n        //region For Booking Table for X person with date & time\r\n        if (Config.isMenuFragmentComingFrom == Config.isMenuFragmentComingFromBookingTable) {\r\n            val newBookingDetailsRes =\r\n                gson.fromJson(\r\n                    myRoomDatabase.daoConfig()\r\n                        .selectConfigTableByField(Config.dbNewBookingDetailRes)!!,\r\n                    NewBookingDetailsRes::class.java\r\n                )\r\n            Log.e(\"TableBBB0\", gson.toJson(newBookingDetailsRes.data))\r\n            //Getting booking Id\r\n            bookingId = newBookingDetailsRes.data!!.id!!.toString().trim()\r\n\r\n            //doing table section hidden\r\n            clMyBucketTable.visibility =\r\n                if (newBookingDetailsRes.data!!.adult!! > 0) View.VISIBLE else View.GONE\r\n            constraintPickUp.visibility =\r\n                if (newBookingDetailsRes.data!!.adult!! > 0) View.GONE else View.VISIBLE\r\n\r\n            //Booking Table for X People or Persons\r\n            tvMyBucketTable.text = \"Table for ${newBookingDetailsRes.data!!.total_person} \" +\r\n                    if (newBookingDetailsRes.data!!.total_person!! == 1) \"People\" else \"Persons\"\r\n\r\n            //Booking Date\r\n            tvMyBucketDateText.text = PubFun.parseDate(\r\n                newBookingDetailsRes.data!!.booking_date,\r\n                Config.requestDateFormat,\r\n                Config.defaultDateFormat\r\n            )\r\n\r\n            //Booking Time\r\n            tvOrderConfirmationTextValue.text = newBookingDetailsRes.data!!.booking_time!!.trim()\r\n        }\r\n        //endregion\r\n\r\n        // requesting api for cart detail\r\n        callGetCart(bookingId.toInt())\r\n\r\n//        //Loader\r\n        cartViewModel.isLoading.observe(this, {\r\n            try {\r\n                if (it!!) {\r\n                    Utils.showProgress(this@MyBucketActivity)\r\n                } else {\r\n                    Utils.hideProgress(this@MyBucketActivity)\r\n                }\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            }\r\n        })\r\n        //api response for cart details\r\n        cartViewModel.responseGetCartNew.observe(this, {\r\n            when (it.status!!) {\r\n                0 -> showMsgDialogAndProceed(it.message!!)\r\n                1 -> populateCartDetails(it!!)\r\n            }\r\n        })\r\n\r\n        // api response for order confirmation\r\n        cartViewModel.responseConfirmOrder.observe(this, {\r\n            when (it.status!!) {\r\n                0 -> showMsgDialogAndProceed(it.message!!)\r\n                1 -> {\r\n                    myRoomDatabase.daoConfig().deleteConfigTableByField(Config.dbOrderId)\r\n                    myRoomDatabase.daoConfig().insertConfigTable(\r\n                        TableConfig(\r\n                            Config.dbOrderId,\r\n                            it.orderId!!.toString().trim()\r\n                        )\r\n                    )\r\n                    startActivity(\r\n                        Intent(\r\n                            this@MyBucketActivity,\r\n                            OrderConfirmationActivity::class.java\r\n                        )\r\n                    )\r\n                    finish()\r\n                }\r\n            }\r\n        })\r\n\r\n        //Check Restaurant Time API response\r\n        vendorDetailViewModel.responseCheckRestaurantTime.observe(this, {\r\n            try {\r\n                when (it.status!!) {\r\n                    0 -> showMsgDialogAndProceed(it.message!!.trim())\r\n                    1 -> startRazorPayment()\r\n                }\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            }\r\n        })\r\n\r\n        //Click listener\r\n        ivBack.setOnClickListener(this)\r\n        tvAddMore.setOnClickListener(this)\r\n        tvMyBucketPickUpTime.setOnClickListener(this)\r\n        clBucketPromoCode.setOnClickListener(this)\r\n        ivCouponCross.setOnClickListener(this)\r\n\r\n\r\n        // setting up the text on picktime text\r\n        radioGroup = findViewById(R.id.radioGroup)\r\n\r\n        with(radioGroup) {\r\n            this?.setOnCheckedChangeListener(RadioGroup.OnCheckedChangeListener { group, checkedId ->\r\n                when (checkedId) {\r\n                    R.id.rbSchedulePickup -> {\r\n//                        if (isDiningInSelected) {\r\n//                            tvDiningIn.performClick()\r\n//                        }\r\n                        ivMyBucketClock.visibility = View.VISIBLE\r\n                        tvMyBucketPickUpTime.visibility = View.VISIBLE\r\n                        tvMyBucketPickUpTime.text = \"Select Schedule Time\"\r\n                        selectedIndex = 0\r\n//                        if (tvMyBucketPickUpTime.text.toString() != \"Select Schedule Time\")\r\n//                            callApiForPickUpType(\r\n//                                \"SCHEDULE_PICKUP\", PubFun.parseDate(\r\n//                                    tvMyBucketPickUpTime.text.toString(),\r\n//                                    Config.defaultTimeFormat,\r\n//                                    Config.requestTimeFormat\r\n//                                ).toString()\r\n//                            )\r\n\r\n                    }\r\n                    R.id.rbPickupNow -> {\r\n//                        if (isDiningInSelected) {\r\n//                            tvDiningIn.performClick()\r\n//                        }\r\n                        ivMyBucketClock.visibility = View.GONE\r\n                        tvMyBucketPickUpTime.visibility = View.GONE\r\n                        selectedIndex = 1\r\n\r\n                        callApiForPickUpType(\"PICKUP_NOW\", \"\")\r\n                    }\r\n//                    // else -> {\r\n                }\r\n            })\r\n        }\r\n\r\n        vendorDetailViewModel.responseServiceDetail.observe(this, {\r\n            when (it.status!!) {\r\n                0 -> showMsgDialogAndProceed(it.message!!.trim())\r\n                1 -> {\r\n                    tvDiningIn.visibility = if (it.data!!.isTableBooking!! == 1)\r\n                        View.VISIBLE else View.GONE\r\n                }\r\n            }\r\n        })\r\n\r\n        tvDiningIn.setOnClickListener {\r\n//            if (!isDiningInSelected) {\r\n//                with(radioGroup) { this?.clearCheck() }\r\n//            }\r\n\r\n            tvDiningIn.setCompoundDrawablesRelativeWithIntrinsicBounds(\r\n                if (isDiningInSelected) R.drawable.ic_radio_button_unchecked else\r\n                    R.drawable.ic_radio_button_checked,\r\n                0,\r\n                0,\r\n                0\r\n            )\r\n\r\n\r\n            isDiningInSelected = !isDiningInSelected\r\n//            if(isDiningInSelected){\r\n//                selectedIndex = 2\r\n//\r\n//            }\r\n\r\n        }\r\n\r\n\r\n        // setting onclick listener to confirm your order button\r\n        btnMyBucketCartConfirmYourOrder.setOnClickListener(this)\r\n\r\n        val runnableEditText = Runnable {\r\n            //if (Config.isMenuFragmentComingFrom != Config.isMenuFragmentComingFromBookingTable) {\r\n\r\n            if (System.currentTimeMillis() > ((lastEditText + delay) - 500)) {\r\n                callApiForSpecialInstruction(\r\n                    \"0\",\r\n                    edMyBucketSpecialInstaruction.text.toString().trim()\r\n                )\r\n            }\r\n            //}\r\n        }\r\n        edMyBucketSpecialInstaruction.addTextChangedListener(object : TextWatcher {\r\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {\r\n            }\r\n\r\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\r\n                handlerEditText.removeCallbacks(runnableEditText)\r\n            }\r\n\r\n            override fun afterTextChanged(s: Editable?) {\r\n                if (s.toString().trim().isNotEmpty()) {\r\n                    lastEditText = System.currentTimeMillis()\r\n                    handlerEditText.postDelayed(runnableEditText, delay)\r\n                }\r\n            }\r\n\r\n        })\r\n    } catch (e: Exception) {\r\n        e.printStackTrace()\r\n    }\r\n\r\n    private fun applyCouponChanges() {\r\n        try {/*Apply Coupon*/\r\n\r\n            ivCouponCross.visibility = if (Config.isCouponApplied) View.VISIBLE else View.GONE\r\n            tvMyBucketCouponDiscountText.visibility =\r\n                if (Config.isCouponApplied) View.VISIBLE else View.GONE\r\n            tvCouponDiscount.visibility = if (Config.isCouponApplied) View.VISIBLE else View.GONE\r\n\r\n            tvCouponCode.apply {\r\n                text =\r\n                    if (Config.isCouponApplied) Config.getSelectedCouponCode else getString(R.string.apply_promo_code)\r\n                setTextColor(\r\n                    if (Config.isCouponApplied)\r\n                        ContextCompat.getColor(\r\n                            this@MyBucketActivity,\r\n                            R.color.myRobinsEggBlue\r\n                        ) else ContextCompat.getColor(\r\n                        this@MyBucketActivity,\r\n                        R.color.myWhite\r\n                    )\r\n                )\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    private fun callCheckRestaurantTimeApi(id: Int, time: String) {\r\n        vendorDetailViewModel.checkRestaurantTime(id, time)\r\n    }\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    private fun showMsgDialogAndProceed(msg: String) {\r\n        try {\r\n            Utils.hideProgress(this)\r\n            val myDialog = DialogToast(this)\r\n            myDialog.show()\r\n            myDialog.holder?.let {\r\n                it.tvTitle.text = getString(R.string.my_bucket)\r\n                it.tvMessage.text = msg\r\n                it.btnDialogCancel.visibility = View.GONE\r\n                var i = Config.autoDialogDismissTimeInSec\r\n                it.btnDialogLogout.apply {\r\n                    visibility = View.GONE\r\n                    post(object : Runnable {\r\n                        override fun run() {\r\n                            if (i == 0) {\r\n                                myDialog.dismiss()\r\n                            } else {\r\n                                i--\r\n                                postDelayed(this, 1000)\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n                /*it.btnDialogLogout.text = \"OK\"\r\n                it.btnDialogLogout.setOnClickListener {\r\n                    myDialog.dismiss()\r\n                }*/\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    private fun callApiForSpecialInstruction(bookingID: String, specialInstructionMsg: String) {\r\n        try {\r\n            if (PubFun.isInternetConnection(this)) {\r\n                Log.e(\"Speical\", \"Request\")\r\n                cartViewModel.special_request(bookingID, specialInstructionMsg, \"0\", 0)\r\n            } else {\r\n                showMsgDialogAndProceed(Config.msgToastForInternet)\r\n            }\r\n\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    private fun callApiForPickUpType(type: String, scheduleTime: String) {\r\n        Log.e(type, scheduleTime)\r\n        try {\r\n            if (PubFun.isInternetConnection(this)) {\r\n                cartViewModel.pickup_type(type, scheduleTime, 0, 0, 0)\r\n            } else {\r\n                showMsgDialogAndProceed(Config.msgToastForInternet)\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    private fun callApiForConfirmOrder(paymentData: PaymentData) {\r\n        try {\r\n            val menuArray = JSONArray()\r\n            for (i in bucketDataList.indices) {\r\n                val menuObject = JSONObject()\r\n                menuObject.put(\"menu_id\", bucketDataList[i].menuID.toString())\r\n                menuObject.put(\"qty\", bucketDataList[i].qty.toString())\r\n                menuObject.put(\"price\", bucketDataList[i].finalPrice.toString())\r\n                menuObject.put(\"points\", bucketDataList[i].point.toString())\r\n                menuObject.put(\"is_redeem\", \"\")\r\n                menuArray.put(menuObject)\r\n            }\r\n            if (PubFun.isInternetConnection(this)) {\r\n\r\n                val currentTimess: String =\r\n                    SimpleDateFormat(\"hh:mm aa\", Locale.getDefault()).format(Date())\r\n                if (selectedIndex == 1) {\r\n\r\n\r\n                    //change payment_id in live mode\r\n                    cartViewModel.confirmOrder(\r\n                        bucketDataList[0].serviceId.toString(),\r\n                        menuArray,\r\n                        subTotal.toString(),\r\n                        totalAmt.toString(),\r\n                        \"\",\r\n                        paymentData.paymentId.toString(), //\"payment_id\",\r\n                        totalPoints.toString(),\r\n                        edMyBucketSpecialInstaruction.text.toString().trim(),\r\n                        currentTimess,\r\n                        totalTax.toString(),\r\n                        bookingId\r\n                    )\r\n                    return\r\n                }\r\n                cartViewModel.confirmOrder(\r\n                    bucketDataList[0].serviceId.toString(),\r\n                    menuArray,\r\n                    subTotal.toString(),\r\n                    totalAmt.toString(),\r\n                    \"\",\r\n                    paymentData.paymentId.toString(),\r\n                    totalPoints.toString(),\r\n                    edMyBucketSpecialInstaruction.text.toString().trim(),\r\n                    tvMyBucketPickUpTime.text.toString().trim(),\r\n                    totalTax.toString(),\r\n                    bookingId\r\n                )\r\n            } else {\r\n                showMsgDialogAndProceed(Config.msgToastForInternet)\r\n            }\r\n\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    lateinit var serviceDetails: ServiceDetails\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    private fun populateCartDetails(res: GetCartNewRes) {\r\n        try {\r\n            Log.e(\"populateCartDetails\", \"populateCartDetails\");\r\n            Log.e(\"Cart Data\", gson.toJson(res))\r\n            if (res.data != null) {\r\n\r\n\r\n                //restaurant id\r\n                if (res.data!!.serviceDetails != null) {\r\n                    Config.vendorDetailServiceId = res.data!!.serviceDetails!!.id!!.toString()\r\n                    //restaurant name\r\n                    Config.vendorDetailServiceName = res.data!!.serviceDetails!!.title!!\r\n                    //restaurant title\r\n                    tvVendorTitle.text = res.data!!.serviceDetails!!.title!!\r\n                    // retaurant address\r\n                    tvAddress.text = res.data!!.serviceDetails!!.address!!\r\n                    // cart size\r\n                    val cartSize = res.data!!.list!!.size\r\n                    tvMyCart.text =\r\n                        \"My Cart (${cartSize} ${if (cartSize == 1) \"Item\" else \"Items\"})\"\r\n                    //Service ID\r\n                    serviceId = res.data!!.serviceDetails!!.id.toString().trim()\r\n                    //Service Name\r\n                    serviceName = res.data!!.serviceDetails!!.title!!.trim()\r\n                }\r\n\r\n\r\n                //tvCouponDiscount.text = res.data!!.couponData!!.discountAmount.toString()\r\n                // setting time +30 if pickup type is pickup now\r\n                if (Config.isMenuFragmentComingFrom != Config.isMenuFragmentComingFromBookingTable) {\r\n                    // setting up special instruction\r\n                    edMyBucketSpecialInstaruction.setText(\r\n                        res.data!!.booking!!.specialInstruction!!.toString().trim()\r\n                    )\r\n\r\n                    // setting up radio group selection\r\n                    radioGroup?.apply {\r\n                        check(\r\n                            getChildAt(\r\n                                if (res.data!!.booking!!.type!!.toString()\r\n                                        .lowercase(Locale.getDefault()) == pickupNowType\r\n                                ) 1 else 0\r\n                            ).id\r\n                        )\r\n                    }\r\n\r\n                    Log.e(\"30+\", \"yes\")\r\n                    if (res.data!!.booking!!.type!!.toString()\r\n                            .lowercase(Locale.getDefault()) == pickupNowType\r\n                    ) {\r\n                        //add30MinutesToCurrentTime()\r\n                        selectedIndex = 1\r\n                        callApiForPickUpType(\"PICKUP_NOW\", \"\")\r\n\r\n                    } else {\r\n                        // setting up booking time\r\n                        if (res.data!!.booking!!.bookingTime!!.isNotEmpty()) {\r\n                            tvMyBucketPickUpTime.text = PubFun.parseDate(\r\n                                res.data!!.booking!!.bookingTime!!,\r\n                                Config.requestTimeFormat,\r\n                                Config.defaultTimeFormat\r\n                            )\r\n                            callApiForPickUpType(\r\n                                \"SCHEDULE_PICKUP\", PubFun.parseDate(\r\n                                    tvMyBucketPickUpTime.text.toString(),\r\n                                    Config.defaultTimeFormat,\r\n                                    Config.requestTimeFormat\r\n                                ).toString()\r\n                            )\r\n                            // tvMyBucketPickUpTime.text.toString().trim()\r\n\r\n                        } else {\r\n//                            callApiForPickUpType(\r\n//                                \"SCHEDULE_PICKUP\",\r\n//                                \"\"\r\n//                            )\r\n                        }\r\n                        selectedIndex = 0\r\n                    }\r\n                }\r\n                //recycler view\r\n                val listener = object : ListClickListenerCart {\r\n                    override fun onClickListener(\r\n                        view: View,\r\n                        pos: Int,\r\n                        objects: Any,\r\n                        isItemAdded: Boolean\r\n                    ) {\r\n                        if (!isLoadedFirstTime) {\r\n                            val bucketData = objects as MyBucketCartRes\r\n                            bucketDataList[pos].qty = bucketData.qty\r\n                            bucketAdapter.notifyDataSetChanged()\r\n                            calculateFooterSection(bucketDataList)\r\n\r\n                            //calling api for adding and removing items\r\n                            if (bucketData.qty > 0) {\r\n                                vendorDetailViewModel.menu_add_cart(\r\n                                    bucketData.serviceId.toString(),\r\n                                    bucketData.menuID.toString(),\r\n                                    \"0\",\r\n                                    bucketData.qty.toString(),\r\n                                    \"0\",\r\n                                    0,\r\n                                    if (isDiningInSelected) 1 else 0\r\n                                )\r\n\r\n                                //region Coupon Logic for Bug 1 Get 1 free\r\n                                val totalQty = Config.isCouponBuyQty + Config.isCouponGetQty\r\n                                if (Config.isCouponApplied && Config.isCouponDiscountType == couponBuyGet\r\n                                    && Config.isCouponMenuId == bucketData.menuID\r\n                                ) {\r\n                                    Config.isCouponBuyGetSelected = true\r\n                                    if (bucketData.qty == totalQty) {\r\n                                        //Applied coupon discount\r\n                                        coupon@ for (i in bucketDataList.indices) {\r\n                                            if (Config.isCouponMenuId == bucketDataList[i].menuID) {\r\n                                                discountCouponTotal = bucketDataList[i].finalPrice\r\n                                                break@coupon\r\n                                            }\r\n                                        }\r\n                                    } else if (bucketData.qty < totalQty) {\r\n                                        //remove coupon discount\r\n                                        discountCouponTotal = 0.0\r\n                                    }\r\n                                    calculateFooterSection(bucketDataList)\r\n                                }\r\n                                //endregion\r\n                            } else {\r\n                                vendorDetailViewModel.menu_add_cart(\r\n                                    bucketData.serviceId.toString(),\r\n                                    bucketData.menuID.toString(),\r\n                                    \"0\",\r\n                                    \"0\",\r\n                                    \"0\",\r\n                                    0,\r\n                                    if (isDiningInSelected) 1 else 0\r\n                                )\r\n                                bucketAdapter.removeItem(pos)\r\n                                bucketDataList.removeAt(pos)\r\n                                // cart size\r\n                                val cartSize = bucketDataList.size\r\n                                tvMyCart.text =\r\n                                    \"My Cart (${cartSize} ${if (cartSize == 1) \"Item\" else \"Items\"})\"\r\n                                // calling onbackpress when cart size is 0\r\n                                if (cartSize < 1) {\r\n                                    onBackPressed()\r\n                                }\r\n                                calculateFooterSection(bucketDataList)\r\n\r\n                                if (Config.isCouponApplied && Config.isCouponDiscountType == couponBuyGet\r\n                                    && Config.isCouponMenuId == bucketData.menuID\r\n                                ) {\r\n                                    ivCouponCross.performClick()\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                bucketAdapter = BucketAdapter(listener)\r\n                bucketDataList.clear()\r\n                serviceDetails = res.data!!.serviceDetails!!\r\n                for (i in res.data!!.list!!.indices) {\r\n                    val bucketCartRes = MyBucketCartRes(\r\n                        res.data!!.serviceDetails!!.id!!,\r\n                        res.data!!.serviceDetails!!.title!!,\r\n                        res.data!!.list!![i].menu!!.foodType!!,\r\n                        res.data!!.list!![i].menu!!.isSpicy!!,\r\n                        res.data!!.list!![i].menu!!.id!!,\r\n                        res.data!!.list!![i].menu!!.title!!,\r\n                        res.data!!.list!![i].menu!!.categoryName!!,\r\n                        res.data!!.list!![i].menu!!.finalPrice!!,\r\n                        res.data!!.list!![i].menu!!.actualPrice!!,\r\n                        res.data!!.list!![i].menu!!.point!!,\r\n                        res.data!!.list!![i].menu!!.preparingTime!!,\r\n                        res.data!!.list!![i].qty!!,\r\n                        res.data!!.list!![i].menu!!.tax!!.toDouble(),\r\n                        res.data!!.list!![i].menu!!.currency!!,\r\n                        res.data!!.serviceDetails!!.currencyStr!!,\r\n                        res.data!!.serviceDetails!!.offers!![i].menuId!!,\r\n                        res.data!!.serviceDetails!!.offers!![i].couponCode!!.trim(),\r\n                        res.data!!.serviceDetails!!.offers!![i].discountType!!,\r\n                        res.data!!.serviceDetails!!.offers!![i].discountAmount!!,\r\n                        res.data!!.serviceDetails!!.offers!![i].buyQty!!,\r\n                        res.data!!.serviceDetails!!.offers!![i].getQty!!,\r\n                    )\r\n                    Log.e(\"NEwCreated\", gson.toJson(bucketCartRes))\r\n                    bucketDataList.add(bucketCartRes)\r\n                }\r\n\r\n                if (res.data!!.couponData.couponCode!!.isNotEmpty()) {\r\n                    Config.isCouponRedeem = false\r\n                    Config.getSelectedCouponCode = res.data!!.couponData.couponCode!!.trim()\r\n                    Config.isCouponDiscountType = res.data!!.couponData.discountType!!\r\n                    Config.isCouponBuyQty = res.data!!.couponData.buyQty!!\r\n                    Config.isCouponGetQty = res.data!!.couponData.getQty!!\r\n                    Config.isCouponMenuId = res.data!!.couponData.menuId!!\r\n                    Config.isCouponApplied = true\r\n                    applyCouponChanges()\r\n                }\r\n            }\r\n\r\n\r\n\r\n            bucketAdapter.setBucketData(bucketDataList)\r\n            rvMyCart.apply {\r\n                layoutManager = LinearLayoutManager(this@MyBucketActivity)\r\n                adapter = bucketAdapter\r\n            }\r\n            calculateFooterSection(bucketDataList)\r\n\r\n            if (SystemClock.elapsedRealtime() - lastClickTime < 10000) return\r\n            lastClickTime = SystemClock.elapsedRealtime()\r\n            if (Config.isCouponApplied && Config.isCouponDiscountType == couponBuyGet && !Config.isCouponBuyGetSelected) {\r\n                val dialogCoupon = DialogToast(this@MyBucketActivity)\r\n                dialogCoupon.show()\r\n                dialogCoupon.holder!!.let {\r\n                    it.tvTitle.text = \"The Market Theory\"\r\n                    it.tvMessage.text = \"You have applied for buy ${Config.isCouponBuyQty} and \" +\r\n                            \"get ${Config.isCouponGetQty}. So do you want to add more qty?\"\r\n                    it.btnDialogCancel.text = \"No\"\r\n                    it.btnDialogLogout.text = \"Yes\"\r\n                    it.btnDialogCancel.setOnClickListener {\r\n                        dialogCoupon.dismiss()\r\n                    }\r\n                    it.btnDialogLogout.setOnClickListener {\r\n                        try {\r\n                            dialogCoupon.dismiss()\r\n                            Config.isCouponBuyGetSelected = true\r\n                            val totalQty = Config.isCouponBuyQty + Config.isCouponGetQty\r\n                            coupon@ for (i in bucketDataList.indices) {\r\n                                if (Config.isCouponMenuId == bucketDataList[i].menuID) {\r\n                                    bucketDataList[i].qty = totalQty\r\n                                    discountCouponTotal = bucketDataList[i].finalPrice\r\n                                    bucketAdapter.updatedQty(i, totalQty)\r\n                                    break@coupon\r\n                                }\r\n                            }\r\n                            calculateFooterSection(bucketDataList)\r\n                        } catch (e: Exception) {\r\n                            e.printStackTrace()\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            callServiceDetail()\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    private fun add30MinutesToCurrentTime() {\r\n        val cal = Calendar.getInstance()\r\n        cal.add(Calendar.MINUTE, 30)\r\n        tvMyBucketPickUpTime.text = PubFun.parseDate(\r\n            cal.time.toString(),\r\n            \"EEE MMM dd HH:mm:ss\",\r\n            Config.defaultTimeFormat\r\n        )\r\n        callApiForPickUpType(\r\n            \"PICKUP_NOW\",\r\n            \"\"\r\n        )\r\n    }\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    private fun calculateFooterSection(bucketDataList: ArrayList<MyBucketCartRes>) {\r\n        try {\r\n            subTotal = 0.0\r\n            totalTax = 0.0\r\n            totalPoints = 0\r\n            totalAmt = 0.0\r\n\r\n            for (i in bucketDataList.indices) {\r\n                //Calculate Sub Total\r\n                subTotal += bucketDataList[i].qty * bucketDataList[i].finalPrice\r\n\r\n                //Calculate Total Tax\r\n                //totalTax += (subTotal * bucketDataList[i].tax) / 100\r\n\r\n                //Calculate Total Points\r\n                totalPoints += bucketDataList[i].qty * bucketDataList[i].point\r\n            }\r\n\r\n            totalTax += (subTotal * bucketDataList[0].tax) / 100\r\n\r\n\r\n            //region Check for discounted coupon if any\r\n            if (Config.isCouponApplied) {\r\n                for (obj in serviceDetails.offers!!) {\r\n                    //Log.e(\"coupon-list\", bucketDataList[i].offerCouponCode.toString())\r\n                    if (obj.couponCode != null) {\r\n                        if (obj.couponCode!!.lowercase(Locale.getDefault()) == Config.getSelectedCouponCode.lowercase(\r\n                                Locale.getDefault()\r\n                            )\r\n                        ) {\r\n                            val discountAmt = obj.discountAmount\r\n                            Log.e(\"coupon discount\", \"{$discountAmt}\")\r\n                            if (discountAmt != null) {\r\n                                discountCouponTotal = when (obj.discountType) {\r\n                                    couponPercentage -> (subTotal * discountAmt) / 100\r\n                                    couponFlat -> discountAmt.toDouble()\r\n                                    else -> if (Config.isCouponBuyGetSelected) discountCouponTotal else 0.0\r\n                                }\r\n                            }\r\n                            break\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            //endregion\r\n\r\n            //Setting Sub Total Amount\r\n            tvSubtotal.text =\r\n                bucketDataList[0].currency + if (subTotal == 0.0) \"0.00\" else numberFormat.format(\r\n                    subTotal\r\n                )\r\n\r\n            //Discount Coupon\r\n            tvCouponDiscount.text = \"-${bucketDataList[0].currency}\" +\r\n                    numberFormat.format(discountCouponTotal)\r\n\r\n            //Setting Tax Amount\r\n            tvtax.text =\r\n                bucketDataList[0].currency + if (totalTax == 0.0) \"0.00\" else numberFormat.format(\r\n                    totalTax\r\n                )\r\n\r\n            //Setting Total Amount = Sub Total Amount + Tax Amount\r\n            totalAmt = subTotal - discountCouponTotal + totalTax\r\n            tvMyBucketTotalAmount.text = \"${bucketDataList[0].currency}${\r\n                if (totalAmt == 0.0) \"0.00\" else numberFormat.format(totalAmt)\r\n            }\"\r\n\r\n            //Setting Total Item Point\r\n            tvMyBucketTotalOrderPoints.text = totalPoints.toString()\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        } finally {\r\n            isLoadedFirstTime = false\r\n        }\r\n    }\r\n\r\n    override fun onClick(v: View?) {\r\n        try {\r\n            when (v) {\r\n                ivBack -> onBackPressed()\r\n                tvAddMore -> {\r\n                    if (PubFun.isInternetConnection(this@MyBucketActivity)) {\r\n                        if (Config.isHomeGoCartClicked) {\r\n                            Config.isBucketAddMoreClicked = true\r\n                        }\r\n                        onBackPressed()\r\n                    } else {\r\n                        showMsgDialogAndProceed(Config.msgToastForInternet)\r\n                    }\r\n                }\r\n                tvMyBucketPickUpTime -> {\r\n                    openRangeTimePickerDialog()\r\n                }\r\n                btnMyBucketCartConfirmYourOrder -> {\r\n                    if (PubFun.isInternetConnection(this)) {\r\n                        if (Config.isMenuFragmentComingFrom == Config.isMenuFragmentComingFromBookingTable) {\r\n                            startRazorPayment()\r\n                        } else {\r\n                            // is selected type pick up now\r\n                            val currentTimess: String =\r\n                                SimpleDateFormat(\"hh:mm aa\", Locale.getDefault()).format(Date())\r\n                            if (selectedIndex == 1) {\r\n                                callCheckRestaurantTimeApi(\r\n                                    serviceId.toInt(),\r\n                                    currentTimess\r\n                                )\r\n                                return\r\n                            }\r\n\r\n                            callCheckRestaurantTimeApi(\r\n                                serviceId.toInt(),\r\n                                PubFun.parseDate(\r\n                                    tvMyBucketPickUpTime.text.toString().trim(),\r\n                                    Config.defaultTimeFormat,\r\n                                    Config.requestTimeFormat\r\n                                )!!\r\n\r\n                            )\r\n                        }\r\n                    } else {\r\n                        showMsgDialogAndProceed(Config.msgToastForInternet)\r\n                    }\r\n                }\r\n                clBucketPromoCode -> {\r\n                    if (PubFun.isInternetConnection(this@MyBucketActivity)) {\r\n                        Config.isCouponRedeemButtonVisible = true\r\n                        myRoomDatabase.daoConfig().apply {\r\n                            deleteConfigTableByField(Config.dbOfferListServiceId)\r\n                            insertConfigTable(\r\n                                TableConfig(\r\n                                    Config.dbOfferListServiceId,\r\n                                    serviceId\r\n                                )\r\n                            )\r\n                        }\r\n                        Config.isCouponOpeningFromBucket = true\r\n                        Config.isEventBottomBarClicked = false\r\n                        Config.isMyCouponClickedFromHome = true\r\n                        startActivity(Intent(this@MyBucketActivity, CouponActivity::class.java))\r\n                    } else {\r\n                        showMsgDialogAndProceed(Config.msgToastForInternet)\r\n                    }\r\n                }\r\n                ivCouponCross -> {\r\n                    Config.isCouponApplied = false\r\n                    Config.isCouponRedeem = false\r\n                    Config.getSelectedCouponCode = \"\"\r\n                    Config.isCouponDiscountType = 0\r\n                    Config.isCouponBuyQty = 0\r\n                    Config.isCouponGetQty = 0\r\n                    Config.isCouponMenuId = 0\r\n                    Config.isCouponBuyGetSelected = false\r\n                    discountCouponTotal = 0.0\r\n                    applyCouponChanges()\r\n                    calculateFooterSection(bucketDataList)\r\n                }\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    private fun openRangeTimePickerDialog() {\r\n        try {\r\n            val mCurrentTime = Calendar.getInstance()\r\n            mCurrentTime.add(Calendar.MINUTE, 30)\r\n            val hour = mCurrentTime[Calendar.HOUR_OF_DAY]\r\n            val minute = mCurrentTime[Calendar.MINUTE]\r\n            val mTimePicker = RangeTimePickerDialog(\r\n                this@MyBucketActivity,\r\n                2,\r\n                { timePicker, selectedHour, selectedMinute ->\r\n                    val mySelectedHrs: String = selectedHour.toString()\r\n                    val mySelectedMin: String =\r\n                        if (selectedMinute.toString().length == 1) \"0$selectedMinute\" else selectedMinute.toString()\r\n                    val mySelectedTime: String = \"$mySelectedHrs:$mySelectedMin\"\r\n                    tvMyBucketPickUpTime.text =\r\n                        PubFun.parseDate(mySelectedTime, \"HH:mm\", Config.defaultTimeFormat)\r\n//                    callApiForPickUpType(\r\n//                        \"SCHEDULE_PICKUP\",\r\n//                        tvMyBucketPickUpTime.text.toString().trim()\r\n//                    )\r\n                    callApiForPickUpType(\r\n                        \"SCHEDULE_PICKUP\", PubFun.parseDate(\r\n                            tvMyBucketPickUpTime.text.toString(),\r\n                            Config.defaultTimeFormat,\r\n                            Config.requestTimeFormat\r\n                        ).toString()\r\n                    )\r\n                }, hour, minute, false, true\r\n            ) //true = 24 hour time\r\n            mTimePicker.setTitle(\"Select Time\")\r\n            mTimePicker.setMin(hour, minute)\r\n            mTimePicker.show()\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    /*razor pay implementation*/\r\n    fun startRazorPayment() {\r\n\r\n        val activity = this\r\n\r\n        val co = Checkout()\r\n        co.setKeyID(getString(R.string.razorpay_live_key))\r\n        val currencyStr = bucketDataList[0].currencyStr\r\n\r\n        try {\r\n            val totalAmount = (totalAmt * 100).toInt()\r\n            val options = JSONObject()\r\n            options.put(\"currency\", currencyStr)\r\n            options.put(\"amount\", totalAmount)\r\n            options.put(\"name\", getString(R.string.app_name))\r\n\r\n            val preFill = JSONObject()\r\n            preFill.put(\"email\", prefs.getLoginModel().email)\r\n            preFill.put(\"contact\", prefs.getLoginModel().mobile)\r\n            preFill.put(\"name\", prefs.getLoginModel().name)\r\n            options.put(\"prefill\", preFill)\r\n\r\n            val retryObj = JSONObject()\r\n            retryObj.put(\"enabled\", false)\r\n            options.put(\"retry\", retryObj)\r\n            co.open(activity, options)\r\n\r\n        } catch (e: Exception) {\r\n            Toast.makeText(activity, \"Error in payment: \" + e.message, Toast.LENGTH_SHORT)\r\n                .show()\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    override fun onPaymentSuccess(p0: String?, p1: PaymentData?) {\r\n        callApiForConfirmOrder(p1!!)\r\n    }\r\n\r\n    override fun onPaymentError(p0: Int, p1: String?, p2: PaymentData?) {\r\n        // Toast.makeText(this, \"in payment faliour\", Toast.LENGTH_LONG).show()\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/themarkettheory/user/ui/restaurant/MyBucketActivity.kt b/app/src/main/java/com/themarkettheory/user/ui/restaurant/MyBucketActivity.kt
--- a/app/src/main/java/com/themarkettheory/user/ui/restaurant/MyBucketActivity.kt	(revision 5052ae71c3e6e3d93ea46b39421636f7b0bd2354)
+++ b/app/src/main/java/com/themarkettheory/user/ui/restaurant/MyBucketActivity.kt	(date 1643267509996)
@@ -261,7 +261,7 @@
         // requesting api for cart detail
         callGetCart(bookingId.toInt())
 
-//        //Loader
+        //Loader
         cartViewModel.isLoading.observe(this, {
             try {
                 if (it!!) {
