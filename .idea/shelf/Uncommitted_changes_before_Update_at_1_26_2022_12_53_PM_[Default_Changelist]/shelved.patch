Index: app/src/main/java/com/themarkettheory/user/ui/main/activity/SigninActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.themarkettheory.user.ui.main.activity\r\n\r\nimport android.app.Activity\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.os.SystemClock\r\nimport android.provider.Settings\r\nimport android.text.SpannableString\r\nimport android.text.method.PasswordTransformationMethod\r\nimport android.text.style.UnderlineSpan\r\nimport android.util.Log\r\nimport android.util.Patterns\r\nimport android.view.MotionEvent\r\nimport android.view.View\r\nimport android.view.inputmethod.InputMethodManager\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.activity.result.ActivityResultCallback\r\nimport androidx.activity.result.ActivityResultLauncher\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.lifecycle.Observer\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.facebook.CallbackManager\r\nimport com.facebook.FacebookCallback\r\nimport com.facebook.FacebookException\r\nimport com.facebook.GraphRequest\r\nimport com.facebook.login.LoginManager\r\nimport com.facebook.login.LoginResult\r\nimport com.google.android.gms.auth.api.signin.GoogleSignIn\r\nimport com.google.android.gms.auth.api.signin.GoogleSignInAccount\r\nimport com.google.android.gms.auth.api.signin.GoogleSignInClient\r\nimport com.google.android.gms.auth.api.signin.GoogleSignInOptions\r\nimport com.google.android.gms.common.api.ApiException\r\nimport com.google.android.gms.tasks.Task\r\nimport com.google.android.material.textfield.TextInputEditText\r\nimport com.google.android.material.textview.MaterialTextView\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.auth.FirebaseUser\r\nimport com.google.firebase.auth.GoogleAuthProvider\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.google.firebase.messaging.FirebaseMessaging\r\nimport com.themarkettheory.user.R\r\nimport com.themarkettheory.user.database.dbtables.TableConfig\r\nimport com.themarkettheory.user.helper.*\r\nimport com.themarkettheory.user.helper.AppSignatureHelper.Companion.TAG\r\nimport com.themarkettheory.user.model.SocialLoginResponse\r\nimport com.themarkettheory.user.model.SocialModel\r\nimport com.themarkettheory.user.newmodels.login.NewLoginResponse\r\nimport com.themarkettheory.user.ui.dialog.dialogToast.DialogToast\r\nimport com.themarkettheory.user.viewmodel.LoginViewModel\r\nimport dagger.hilt.android.AndroidEntryPoint\r\nimport kotlinx.android.synthetic.main.activity_signin.*\r\nimport kotlinx.android.synthetic.main.button_progress.*\r\nimport org.json.JSONException\r\nimport java.net.MalformedURLException\r\nimport java.net.URL\r\nimport java.util.*\r\n\r\n\r\n@AndroidEntryPoint\r\nclass SigninActivity : BaseActivity(), View.OnClickListener {\r\n    private lateinit var loginViewModel: LoginViewModel\r\n    var deviceID = \"\"\r\n    var socialModel = SocialModel()\r\n    internal lateinit var callbackManager: CallbackManager\r\n\r\n    //Layout Components\r\n    private lateinit var tvSignIn: MaterialTextView\r\n    private lateinit var edEmail: TextInputEditText\r\n    private lateinit var edPassword: TextInputEditText\r\n    private var isShowPassword = false\r\n    private lateinit var socialLoginResponse: SocialLoginResponse\r\n    private var lastClickTime = 0L\r\n\r\n    private lateinit var auth: FirebaseAuth\r\n    lateinit var mGoogleSignInClient: GoogleSignInClient\r\n\r\n    private var onActivityResultCode = 0\r\n    private val GOOGLE_SIGN_IN = 100\r\n\r\n    private val RC_SIGN_IN = 123;\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_signin)\r\n\r\n        callbackManager = CallbackManager.Factory.create()\r\n        loginViewModel = ViewModelProvider(this).get(LoginViewModel::class.java)\r\n\r\n        edEmail = findViewById(R.id.edEmail)\r\n        edPassword = findViewById(R.id.edPassword)\r\n\r\n\r\n        //Sign In Textview instead of image and setting its gradient color to its text\r\n        tvSignIn = findViewById(R.id.tvSignin)\r\n        tvSignIn.paint.shader = PubFun.getShader(this@SigninActivity, tvSignIn)\r\n\r\n        //Underline the textview\r\n        val spanContent = SpannableString(getString(R.string.recover_my_password))\r\n        spanContent.setSpan(UnderlineSpan(), 0, spanContent.length, 0)\r\n        tvRecoverMyPassword.text = spanContent\r\n\r\n        FirebaseMessaging.getInstance().isAutoInitEnabled = true\r\n        FirebaseMessaging.getInstance().token.addOnCompleteListener { task ->\r\n            if (!task.isSuccessful) {\r\n                Log.e(\"\", \"getInstanceId failed\", task.exception)\r\n                return@addOnCompleteListener\r\n            }\r\n\r\n            var token = task.result.trim().toString();\r\n            Log.e(\"getInstanceId failed\", \"getInstanceId  \"+task.result.trim()  )\r\n            prefs.setToken(this, task.result.trim())\r\n        }\r\n\r\n        deviceID = Settings.Secure.getString(contentResolver, Settings.Secure.ANDROID_ID)\r\n        /*Utils.setGradient(this, tvSignin, getString(R.string.sign_in))*/\r\n        btn.text = getString(R.string.sign_in)\r\n        setStatusBarColor(R.color.black)\r\n\r\n        getLoginResponse()\r\n        getFacebookData()\r\n\r\n        llFacebook.setOnClickListener(this)\r\n        llGoogle.setOnClickListener(this)\r\n        tvSignup.setOnClickListener(this)\r\n        tvRecoverMyPassword.setOnClickListener(this)\r\n        ivHideShowPassword.setOnClickListener(this)\r\n        btn.setOnClickListener(this)\r\n        PubFun.hideKeyboard(this@SigninActivity)\r\n\r\n        myRoomDatabase.daoConfig().apply {\r\n            deleteConfigTableByField(Config.dbIsDashboard)\r\n            insertConfigTable(\r\n                TableConfig(\r\n                    Config.dbIsDashboard,\r\n                    \"false\"\r\n                )\r\n            )\r\n        }\r\n\r\n\r\n        // prefs.setToken(this, Firebase.getInstance().getToken()!!)\r\n\r\n        val googleSignInOptions = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)\r\n            .requestIdToken(getString(R.string.googleAccountWebClientID))\r\n            .requestEmail()\r\n            .build()\r\n\r\n        myRoomDatabase.daoConfig().deleteConfigTableByField(Config.dbSocialLogin)\r\n        myRoomDatabase.daoConfig().deleteConfigTableByField(Config.email)\r\n        mGoogleSignInClient = GoogleSignIn.getClient(this, googleSignInOptions);\r\n        if (mGoogleSignInClient != null) {\r\n            myRoomDatabase.daoConfig().deleteConfigTableByField(Config.email)\r\n        }\r\n\r\n//        if (mGoogleSignInClient != null)\r\n//            mGoogleSignInClient.signOut()\r\n\r\n        auth = Firebase.auth\r\n//        if (auth != null)\r\n//            auth.signOut()\r\n\r\n        tvSmsAppCode.text =\r\n            AppSignatureHelper(this@SigninActivity).appSignatures.toString().replace(\"[\", \"\")\r\n                .replace(\"]\", \"\")\r\n    }\r\n\r\n    private val onActivityResultSignIn: ActivityResultLauncher<Intent> = registerForActivityResult(\r\n        ActivityResultContracts.StartActivityForResult(),\r\n        ActivityResultCallback {\r\n            when (onActivityResultCode) {\r\n                GOOGLE_SIGN_IN -> {\r\n\r\n                    if (it.resultCode == Activity.RESULT_OK) {\r\n                        try {\r\n                            val task = GoogleSignIn.getSignedInAccountFromIntent(it.data)\r\n                            // Google Sign In was successful, authenticate with Firebase\r\n                            val account = task.getResult(ApiException::class.java)!!\r\n                            Log.e(\"GMAIL - \", gson.toJson(account))\r\n                            System.out.println(\"firebaseAuthWithGoogle:\" + account.id)\r\n\r\n\r\n                            socialLoginResponse = SocialLoginResponse()\r\n                            socialLoginResponse.login_via = Constants.loginViaGoogle\r\n                            socialLoginResponse.device_token = prefs.getToken(this)\r\n                            socialLoginResponse.device_type = Constants.deviceType\r\n                            socialLoginResponse.social_id = account.id!!\r\n                            socialLoginResponse.name = account.displayName!!\r\n                            socialLoginResponse.email = account.email!!\r\n                            socialLoginResponse.image = account.photoUrl.toString()\r\n                            Config.socialId = account.id!!\r\n                            myRoomDatabase.daoConfig()?.apply {\r\n                                deleteConfigTableByField(Config.dbSocialLogin)\r\n                                insertConfigTable(\r\n                                    TableConfig(\r\n                                        Config.dbSocialLogin,\r\n                                        gson.toJson(socialLoginResponse)\r\n                                    )\r\n                                )\r\n\r\n                                deleteConfigTableByField(Config.dbVerifyOTPEmail)\r\n                                insertConfigTable(\r\n                                    TableConfig(\r\n                                        Config.dbVerifyOTPEmail,\r\n                                        account.email!!\r\n                                    )\r\n                                )\r\n                            }\r\n\r\n                            loginViewModel.social_login(\r\n                                Constants.loginViaGoogle,\r\n                                prefs.getToken(this),\r\n                                Constants.deviceType,\r\n                                account.id,\r\n                                account.displayName,\r\n                                account.email,\r\n                                account.photoUrl.toString()\r\n                            )\r\n                            mGoogleSignInClient.signOut()\r\n\r\n                        } catch (e: Exception) {\r\n                            e.printStackTrace()\r\n                        }\r\n                    } else {\r\n                        Log.e(\"data\", \"data not load\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    )\r\n\r\n    private fun signIn() {\r\n\r\n\r\n//        Firebase.auth.signOut()\r\n//        mGoogleSignInClient.signOut()\r\n        val signInIntent = mGoogleSignInClient.signInIntent\r\n        onActivityResultCode = GOOGLE_SIGN_IN\r\n        onActivityResultSignIn.launch(signInIntent)\r\n\r\n    }\r\n\r\n    private fun firebaseAuthWithGoogle(idToken: String) {\r\n\r\n        val credential = GoogleAuthProvider.getCredential(idToken, null)\r\n        auth.signInWithCredential(credential)\r\n            .addOnCompleteListener(this) { task ->\r\n                if (task.isSuccessful) {\r\n                    // Sign in success, update UI with the signed-in user's information\r\n                    //                    Log.d(TAG, \"signInWithCredential:success\")\r\n                    val user = auth.currentUser\r\n                    updateUI(user)\r\n                } else {\r\n                    // If sign in fails, display a message to the user.\r\n                    // ...\r\n                    val v = auth.currentUser\r\n                    Toast.makeText(this, \"Authentication Failed.\", Toast.LENGTH_LONG).show()\r\n                    //                    Snackbar.make(view, \"Authentication Failed.\", Snackbar.LENGTH_SHORT).show()\r\n                    updateUI(null)\r\n                }\r\n\r\n            }\r\n    }\r\n\r\n    private fun updateUI(user: FirebaseUser?) {\r\n        if (user != null) {\r\n            val name = user.displayName\r\n            val email = user.email\r\n            val photoUrl = user.photoUrl\r\n            val mobile = user.phoneNumber\r\n\r\n            val emailVerified = user.isEmailVerified\r\n            val uid = user.uid\r\n\r\n            System.out.println(mobile)\r\n\r\n            socialModel.fullName = name\r\n            socialModel.profileImage = photoUrl.toString()\r\n            socialModel.google_token = uid\r\n            socialModel.email = email\r\n            Toast.makeText(this, \"Authentication successful.\", Toast.LENGTH_LONG).show()\r\n\r\n            loginViewModel.social_login(\r\n                Constants.loginViaGoogle,\r\n                prefs.getToken(this),\r\n                Constants.deviceType,\r\n                user.uid,\r\n                name,\r\n                email,\r\n                photoUrl.toString()\r\n            )\r\n\r\n        } else {\r\n            Firebase.auth.signOut()\r\n        }\r\n\r\n    }\r\n\r\n    fun getFacebookData() {\r\n        login_button.setPermissions(listOf(\"email\", \"public_profile\"))\r\n        login_button.registerCallback(callbackManager, object : FacebookCallback<LoginResult> {\r\n            override fun onSuccess(loginResult: LoginResult) {\r\n                val s = loginResult.recentlyGrantedPermissions\r\n                println(\"value of permission $s\")\r\n                setFacebookData(loginResult)\r\n            }\r\n\r\n            override fun onCancel() {\r\n\r\n                // App code\r\n                var a = \"\"\r\n            }\r\n\r\n            override fun onError(exception: FacebookException) {\r\n                // App code\r\n                var a = \"\"\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    private fun setFacebookData(loginResult: LoginResult) {\r\n\r\n        val request = GraphRequest.newMeRequest(\r\n            loginResult.accessToken\r\n        ) { `object`, response ->\r\n            try {\r\n                val id = `object`!!.getString(\"id\")\r\n                val first_name =\r\n                    `object`.getString(\"first_name\") + \" \" + `object`.getString(\"last_name\")\r\n                val last_name = `object`.getString(\"last_name\")\r\n\r\n                var profile_pic: URL? = null\r\n                val image = \"https://graph.facebook.com/$id/picture?type=large\"\r\n                try {\r\n                    profile_pic = URL(\"https://graph.facebook.com/$id/picture?type=large\")\r\n\r\n                } catch (e: MalformedURLException) {\r\n                    e.printStackTrace()\r\n                }\r\n\r\n                var email = \"\"\r\n                if (`object`.has(\"email\")) {\r\n                    email = `object`.getString(\"email\")\r\n                }\r\n\r\n                socialModel.email = email\r\n                socialModel.facebook_token = id\r\n                socialModel.fullName = first_name\r\n                socialModel.login_via = Constants.loginViaFacebook\r\n                socialModel.profileImage = profile_pic.toString()\r\n\r\n                socialLoginResponse = SocialLoginResponse()\r\n                socialLoginResponse.login_via = socialModel.login_via!!\r\n                socialLoginResponse.device_token = prefs.getToken(this)\r\n                socialLoginResponse.device_type = Constants.deviceType\r\n                socialLoginResponse.social_id = socialModel.facebook_token!!\r\n                socialLoginResponse.name = socialModel.fullName!!\r\n                socialLoginResponse.email = socialModel.email!!\r\n                socialLoginResponse.image = socialModel.profileImage!!\r\n                Config.socialId = id\r\n\r\n                myRoomDatabase.daoConfig().apply {\r\n                    deleteConfigTableByField(Config.dbSocialLogin)\r\n                    insertConfigTable(\r\n                        TableConfig(\r\n                            Config.dbSocialLogin,\r\n                            gson.toJson(socialLoginResponse)\r\n                        )\r\n                    )\r\n                }\r\n\r\n                myRoomDatabase.daoConfig().apply {\r\n                    deleteConfigTableByField(Config.dbVerifyOTPEmail)\r\n                    insertConfigTable(\r\n                        TableConfig(\r\n                            Config.dbVerifyOTPEmail,\r\n                            email\r\n                        )\r\n                    )\r\n                }\r\n\r\n                loginViewModel.social_login(\r\n                    socialModel.login_via,\r\n                    prefs.getToken(this),\r\n                    Constants.deviceType,\r\n                    socialModel.facebook_token,\r\n                    socialModel.fullName,\r\n                    socialModel.email,\r\n                    socialModel.profileImage\r\n                )\r\n                /*     startActivity(Intent(this,SignupActivity::class.java)\r\n                         .putExtra(\"email\",email)\r\n                         .putExtra(\"fullName\",first_name )\r\n                         .putExtra(\"profile_pic\",image)\r\n                         .putExtra(\"socialID\",id)\r\n                         .putExtra(\"loginVia\",\"facebook\")\r\n                     )*/\r\n\r\n            } catch (e: JSONException) {\r\n                e.printStackTrace()\r\n            }\r\n        }\r\n        val parameters = Bundle()\r\n        parameters.putString(\r\n            \"fields\",\r\n            \"id,first_name,last_name,email\"\r\n        )\r\n        request.parameters = parameters\r\n        request.executeAsync()\r\n    }\r\n\r\n    private fun getLoginResponse() {\r\n        loginViewModel.isLoading.observe(this, Observer {\r\n            if (it) {\r\n                btn.visibility = View.GONE\r\n                pb.visibility = View.VISIBLE\r\n            } else {\r\n                btn.visibility = View.VISIBLE\r\n                pb.visibility = View.GONE\r\n            }\r\n        })\r\n\r\n        loginViewModel.isLoadingSocial.observe(this, Observer {\r\n            if (it!!) {\r\n                Utils.showProgress(this)\r\n            } else {\r\n                Utils.hideProgress(this)\r\n            }\r\n        })\r\n\r\n        loginViewModel.responseLogin.observe(this, Observer<NewLoginResponse> {\r\n            when (it.status) {\r\n                0 -> showMsgDialogAndProceed(it, \"\", false)\r\n                1 -> {\r\n                    checkResponse(it)\r\n                }\r\n            }\r\n        })\r\n\r\n        loginViewModel.responseSocialLogin.observe(this, Observer<NewLoginResponse> {\r\n            when (it.status) {\r\n                0 -> showMsgDialogAndProceed(it, \"\", false)\r\n                1 -> {\r\n                    checkResponse(it)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    private fun checkResponse(res: NewLoginResponse) {\r\n        if (res.data != null) {\r\n            if (res.data.token.isNotEmpty()) {\r\n\r\n\r\n                myRoomDatabase.daoConfig().apply {\r\n                    deleteConfigTableByField(Config.dbNewLoginRes)\r\n                    insertConfigTable(\r\n                        TableConfig(\r\n                            Config.dbNewLoginRes,\r\n                            gson.toJson(res)\r\n                        )\r\n                    )\r\n                }\r\n                prefs.setAccessToken(this@SigninActivity, res.data.token)\r\n                prefs.setLoginModel(res.data)\r\n                if (res.data.emailVerified == 0) {\r\n                    showMsgDialogAndProceed(res, \"\", false)\r\n                } else if (res.data.mobileVerified == 0) {\r\n                    showMsgDialogAndProceed(res, \"\", false)\r\n                } else if (res.data.emailVerified == 1 &&\r\n                    res.data.mobileVerified == 1 &&\r\n                    res.data.zip.isEmpty()\r\n                ) {\r\n                    showMsgDialogAndProceed(res, \"\", false)\r\n                } else if (res.data.emailVerified == 1 &&\r\n                    res.data.mobileVerified == 1 &&\r\n                    res.data.zip.isNotEmpty()\r\n                ) {\r\n                    showMsgDialogAndProceed(res, \"\", false)\r\n                }\r\n            } else {\r\n                startActivity(Intent(this@SigninActivity, SignupActivity::class.java))\r\n                Utils.slideEnter(this)\r\n                finish()\r\n            }\r\n        } else {\r\n            showMsgDialogAndProceed(res, \"\", false)\r\n        }\r\n    }\r\n\r\n    private fun showMsgDialogAndProceed(res: NewLoginResponse?, msg: String, isMsgShow: Boolean) {\r\n        try {\r\n            val myDialog = DialogToast(this@SigninActivity)\r\n            myDialog.show()\r\n            myDialog.holder?.let {\r\n                it.tvTitle.text = \"Sign-In\"\r\n                it.tvMessage.text = if (isMsgShow) msg else res!!.message\r\n                it.btnDialogCancel.visibility = View.GONE\r\n                var i = Config.autoDialogDismissTimeInSec\r\n                it.btnDialogLogout.apply {\r\n                    visibility = View.GONE\r\n                    post(object : Runnable {\r\n                        override fun run() {\r\n                            try {\r\n                                if (i == 0) {\r\n                                    myDialog.dismiss()\r\n                                    if (!isMsgShow) {\r\n                                        if (res != null) {\r\n                                            if (res.data != null) {\r\n                                                if (res.data.mobileVerified == 0) {\r\n                                                    try {\r\n                                                        myRoomDatabase.daoConfig().apply {\r\n                                                            deleteConfigTableByField(Config.dbVerifyOTPNavigatesFrom)\r\n                                                            insertConfigTable(\r\n                                                                TableConfig(\r\n                                                                    Config.dbVerifyOTPNavigatesFrom,\r\n                                                                    Config.signInActivity\r\n                                                                )\r\n                                                            )\r\n                                                        }\r\n                                                        startActivity(\r\n                                                            Intent(\r\n                                                                applicationContext,\r\n                                                                VerifyOtpActivity::class.java\r\n                                                            )\r\n                                                        )\r\n                                                        Utils.slideEnter(this@SigninActivity)\r\n                                                        finish()\r\n                                                    } catch (e: Exception) {\r\n                                                        e.printStackTrace()\r\n                                                    }\r\n                                                } else if (res.data.emailVerified == 1 &&\r\n                                                    res.data.mobileVerified == 1 &&\r\n                                                    res.data.zip.isNotEmpty()\r\n                                                ) {\r\n                                                    startActivity(\r\n                                                        Intent(\r\n                                                            this@SigninActivity,\r\n                                                            CitySelectionActivity::class.java\r\n                                                        )\r\n                                                    )\r\n                                                    Utils.slideEnter(this@SigninActivity)\r\n                                                    finish()\r\n                                                } else if (res.data.emailVerified == 1 &&\r\n                                                    res.data.mobileVerified == 1 &&\r\n                                                    res.data.zip.isEmpty()\r\n                                                ) {\r\n                                                    startActivity(\r\n                                                        Intent(\r\n                                                            this@SigninActivity,\r\n                                                            ProfileActivity::class.java\r\n                                                        )\r\n                                                    )\r\n                                                    Utils.slideEnter(this@SigninActivity)\r\n                                                    finish()\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    i--\r\n                                    postDelayed(this, 1000)\r\n                                }\r\n                            } catch (e: Exception) {\r\n                                e.printStackTrace()\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n                /*it.btnDialogLogout.text = \"OK\"\r\n                it.btnDialogLogout.setOnClickListener {\r\n                    myDialog.dismiss()\r\n                    if (!isMsgShow) {\r\n                        if (res != null) {\r\n                            if (res.data != null) {\r\n                                if (res.data.mobileVerified == 0) {\r\n                                    try {\r\n                                        myRoomDatabase.daoConfig().apply {\r\n                                            deleteConfigTableByField(Config.dbVerifyOTPNavigatesFrom)\r\n                                            insertConfigTable(\r\n                                                TableConfig(\r\n                                                    Config.dbVerifyOTPNavigatesFrom,\r\n                                                    Config.signInActivity\r\n                                                )\r\n                                            )\r\n                                        }\r\n                                        startActivity(\r\n                                            Intent(\r\n                                                applicationContext,\r\n                                                VerifyOtpActivity::class.java\r\n                                            )\r\n                                        )\r\n                                        Utils.slideEnter(this)\r\n                                        finish()\r\n                                    } catch (e: Exception) {\r\n                                        e.printStackTrace()\r\n                                    }\r\n                                } else if (res.data.emailVerified == 1 &&\r\n                                    res.data.mobileVerified == 1 &&\r\n                                    res.data.zip.isNotEmpty()\r\n                                ) {\r\n                                    startActivity(\r\n                                        Intent(\r\n                                            this@SigninActivity,\r\n                                            CitySelectionActivity::class.java\r\n                                        )\r\n                                    )\r\n                                    Utils.slideEnter(this)\r\n                                    finish()\r\n                                } else if (res.data.emailVerified == 1 &&\r\n                                    res.data.mobileVerified == 1 &&\r\n                                    res.data.zip.isEmpty()\r\n                                ) {\r\n                                    startActivity(\r\n                                        Intent(\r\n                                            this@SigninActivity,\r\n                                            ProfileActivity::class.java\r\n                                        )\r\n                                    )\r\n                                    Utils.slideEnter(this)\r\n                                    finish()\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }*/\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    override fun onClick(v: View?) {\r\n        if (SystemClock.elapsedRealtime() - lastClickTime < 3000) return\r\n        lastClickTime = SystemClock.elapsedRealtime()\r\n        when (v) {\r\n            tvSignup -> {\r\n                Firebase.auth.signOut()\r\n                mGoogleSignInClient.signOut()\r\n                myRoomDatabase.daoConfig().deleteConfigTableByField(Config.email)\r\n\r\n                if (PubFun.isInternetConnection(this@SigninActivity)) {\r\n                    Config.isLoginWithSocialButton = false\r\n                    Config.isLoginWithSocialName = Constants.loginViaNormal\r\n                    myRoomDatabase.daoConfig()\r\n                        .deleteConfigTableByField(Config.dbVerifyOTPNavigatesFrom)\r\n                    myRoomDatabase.daoConfig().deleteConfigTableByField(Config.dbSocialLogin)\r\n                    myRoomDatabase.daoConfig().deleteConfigTableByField(Config.dbVerifyOTPEmail)\r\n                    Firebase.auth.signOut()\r\n                    mGoogleSignInClient.signOut()\r\n\r\n                    startActivity(Intent(this, SignupActivity::class.java))\r\n                    Utils.slideEnter(this)\r\n                    finish()\r\n                } else {\r\n                    showMsgDialogAndProceed(null, Config.msgToastForInternet, true)\r\n                }\r\n            }\r\n\r\n            llGoogle -> {\r\n                if (PubFun.isInternetConnection(this@SigninActivity)) {\r\n                    Config.isLoginWithSocialButton = true\r\n                    Config.isLoginWithSocialName = Constants.loginViaGoogle\r\n                    signIn()\r\n                } else {\r\n                    showMsgDialogAndProceed(null, Config.msgToastForInternet, true)\r\n                }\r\n            }\r\n\r\n            tvRecoverMyPassword -> {\r\n                startActivity(Intent(this, RecoverPasswordActivity::class.java))\r\n                Utils.slideEnter(this)\r\n                finish()\r\n            }\r\n\r\n            llFacebook -> {\r\n                if (PubFun.isInternetConnection(this@SigninActivity)) {\r\n                    Config.isLoginWithSocialButton = true\r\n                    Config.isLoginWithSocialName = Constants.loginViaFacebook\r\n                    //LoginManager.getInstance().logOut();\r\n                    login_button.performClick()\r\n                } else {\r\n                    showMsgDialogAndProceed(null, Config.msgToastForInternet, true)\r\n                }\r\n            }\r\n\r\n            btn -> if (checkValidation()) {\r\n                if (PubFun.isInternetConnection(this@SigninActivity)) {\r\n                    performLogin()\r\n                } else {\r\n                    showMsgDialogAndProceed(null, Config.msgToastForInternet, true)\r\n                }\r\n            }\r\n\r\n            ivHideShowPassword -> hideShowPassword()\r\n        }\r\n    }\r\n\r\n    //Added by Milan Sheth on 12-Jul-2021 16:50\r\n    private fun hideShowPassword() {\r\n        if (isShowPassword) {\r\n            edPassword.transformationMethod =\r\n                PasswordTransformationMethod()\r\n            ivHideShowPassword.setImageDrawable(\r\n                ContextCompat.getDrawable(\r\n                    this,\r\n                    R.drawable.ic_visible_eye\r\n                )\r\n            )\r\n            isShowPassword = false\r\n        } else {\r\n            edPassword.transformationMethod = null\r\n            ivHideShowPassword.setImageDrawable(\r\n                ContextCompat.getDrawable(\r\n                    this,\r\n                    R.drawable.ic_invisible_eye\r\n                )\r\n            )\r\n            isShowPassword = true\r\n        }\r\n    }\r\n\r\n    //Added by Milan Sheth on 12-Jul-2021 16:00\r\n    private fun checkValidation(): Boolean {\r\n        if (edEmail.text!!.trim().isEmpty()) {\r\n            showMsgDialogAndProceed(null, \"Please enter mobile number or email id\", true)\r\n            return false\r\n        }\r\n\r\n        val number = edEmail.text!!.toString().toLongOrNull()\r\n        if (number == null && !Patterns.EMAIL_ADDRESS.matcher(edEmail.text!!).matches()) {\r\n            showMsgDialogAndProceed(null, \"Please enter valid email address\", true)\r\n            return false\r\n        } else if (number != null && !Patterns.PHONE.matcher(edEmail.text!!).matches()) {\r\n            showMsgDialogAndProceed(null, \"Please enter valid mobile number\", true)\r\n            return false\r\n        } else if (number != null && (edEmail.text!!.length < 10 || edEmail.text!!.length > 10)) {\r\n            showMsgDialogAndProceed(\r\n                null,\r\n                \"Your mobile number cannot be less or more than 10 digits\",\r\n                true\r\n            )\r\n            return false\r\n        }\r\n\r\n        if (edPassword.text!!.trim().isEmpty()) {\r\n            showMsgDialogAndProceed(null, \"Please enter password\", true)\r\n            return false\r\n        }\r\n\r\n        if (edPassword.text!!.length <= 5) {\r\n            showMsgDialogAndProceed(null, \"Please enter minimum 6 char password\", true)\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    //Added by Milan Sheth on 12-Jul-2021 16:06\r\n    private fun performLogin() {\r\n        Config.isLoginWithSocialButton = false\r\n        loginViewModel.login(\r\n            edEmail.text.toString(),\r\n            edPassword.text.toString(),\r\n            Constants.loginViaNormal,\r\n            Constants.deviceType,\r\n            prefs.getToken(this)\r\n        )\r\n        updateUI(null)\r\n    }\r\n\r\n\r\n    override fun dispatchTouchEvent(ev: MotionEvent?): Boolean {\r\n        if (currentFocus != null) {\r\n            val imm = getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager\r\n            imm.hideSoftInputFromWindow(currentFocus!!.windowToken, 0)\r\n        }\r\n        return super.dispatchTouchEvent(ev)\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/themarkettheory/user/ui/main/activity/SigninActivity.kt b/app/src/main/java/com/themarkettheory/user/ui/main/activity/SigninActivity.kt
--- a/app/src/main/java/com/themarkettheory/user/ui/main/activity/SigninActivity.kt	(revision 22835b89a09487dd586150f30da0a89d4fc6fa82)
+++ b/app/src/main/java/com/themarkettheory/user/ui/main/activity/SigninActivity.kt	(date 1643181297622)
@@ -110,8 +110,8 @@
                 return@addOnCompleteListener
             }
 
-            var token = task.result.trim().toString();
-            Log.e("getInstanceId failed", "getInstanceId  "+task.result.trim()  )
+            var token = task.result.trim().toString()
+            Log.e("getInstanceId failed", "getInstanceId  "+task.result.trim())
             prefs.setToken(this, task.result.trim())
         }
 
@@ -151,7 +151,7 @@
 
         myRoomDatabase.daoConfig().deleteConfigTableByField(Config.dbSocialLogin)
         myRoomDatabase.daoConfig().deleteConfigTableByField(Config.email)
-        mGoogleSignInClient = GoogleSignIn.getClient(this, googleSignInOptions);
+        mGoogleSignInClient = GoogleSignIn.getClient(this, googleSignInOptions)
         if (mGoogleSignInClient != null) {
             myRoomDatabase.daoConfig().deleteConfigTableByField(Config.email)
         }
@@ -647,8 +647,7 @@
                 if (PubFun.isInternetConnection(this@SigninActivity)) {
                     Config.isLoginWithSocialButton = false
                     Config.isLoginWithSocialName = Constants.loginViaNormal
-                    myRoomDatabase.daoConfig()
-                        .deleteConfigTableByField(Config.dbVerifyOTPNavigatesFrom)
+                    myRoomDatabase.daoConfig().deleteConfigTableByField(Config.dbVerifyOTPNavigatesFrom)
                     myRoomDatabase.daoConfig().deleteConfigTableByField(Config.dbSocialLogin)
                     myRoomDatabase.daoConfig().deleteConfigTableByField(Config.dbVerifyOTPEmail)
                     Firebase.auth.signOut()
Index: app/src/main/java/com/themarkettheory/user/ui/main/activity/SearchActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.themarkettheory.user.ui.main.activity\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.os.Looper\r\nimport android.text.Editable\r\nimport android.text.TextWatcher\r\nimport android.view.View\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.themarkettheory.user.R\r\nimport com.themarkettheory.user.helper.Config\r\nimport com.themarkettheory.user.helper.PubFun\r\nimport com.themarkettheory.user.helper.Utils\r\nimport com.themarkettheory.user.interfaces.ListClickListener\r\nimport com.themarkettheory.user.newmodels.searchrestaurant.SearchRestaurantData\r\nimport com.themarkettheory.user.ui.dialog.dialogToast.DialogToast\r\nimport com.themarkettheory.user.ui.main.adapter.SearchRestaurantListAdapter\r\nimport com.themarkettheory.user.ui.restaurant.VendorDetailActivity\r\nimport com.themarkettheory.user.viewmodel.SearchViewModel\r\nimport kotlinx.android.synthetic.main.activity_search.*\r\nimport android.view.inputmethod.EditorInfo\r\n\r\nimport android.widget.TextView\r\n\r\nimport android.widget.TextView.OnEditorActionListener\r\n\r\n\r\n\r\n\r\n\r\nclass SearchActivity : BaseActivity(), View.OnClickListener {\r\n    //ViewModel\r\n    lateinit var searchViewModel: SearchViewModel\r\n\r\n    //General\r\n    private var handlerSearch = Handler(Looper.getMainLooper())\r\n    private lateinit var runnableSearch: Runnable\r\n    private val delay = 2000L //2 seconds\r\n    private var lastEditText = 0L\r\n    private var mySearchText = \"\"\r\n\r\n    //RecyclerView Adapter\r\n    private lateinit var adapterSearchRestaurant: SearchRestaurantListAdapter\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_search)\r\n        try {\r\n            //View Model Initialization\r\n            searchViewModel = ViewModelProvider(this).get(SearchViewModel::class.java)\r\n\r\n            //region Set On Click Listener\r\n            ivSearchRestaurantListBack.setOnClickListener(this)\r\n            ivSearchRestaurantCloseIcon.setOnClickListener(this)\r\n            //endregion\r\n\r\n            //region Search Restaurant List RecyclerView, Listener and Adapter\r\n            val listener = object : ListClickListener {\r\n                override fun onClickListener(view: View, pos: Int, objects: Any) {\r\n                    val searchRestaurantData = objects as SearchRestaurantData\r\n                    Config.isMenuFragmentComingFrom = \"\"\r\n                    PubFun.hideKeyboard(this@SearchActivity)\r\n                    if (PubFun.isInternetConnection(this@SearchActivity)) {\r\n                        startActivity(\r\n                            Intent(\r\n                                this@SearchActivity,\r\n                                VendorDetailActivity::class.java\r\n                            )\r\n                                .putExtra(\"category\", searchRestaurantData.categoryId.toString())\r\n                                .putExtra(\"serviceId\", searchRestaurantData.id.toString())\r\n                                .putExtra(\"vendorTitle\", searchRestaurantData.title)\r\n                        )\r\n                    } else {\r\n                        showMsgDialogAndProceed(Config.msgToastForInternet)\r\n                    }\r\n                }\r\n            }\r\n            adapterSearchRestaurant = SearchRestaurantListAdapter(\r\n                this@SearchActivity,\r\n                listener\r\n            )\r\n            rvSearchRestaurantList.apply {\r\n                layoutManager = LinearLayoutManager(this@SearchActivity)\r\n                adapter = adapterSearchRestaurant\r\n            }\r\n            //endregion\r\n\r\n            //region Loading Response\r\n            searchViewModel.isLoadingSearch.observe(this, {\r\n                try {\r\n                    if (it!!) {\r\n                        Utils.showProgress(this@SearchActivity)\r\n                    } else {\r\n                        Utils.hideProgress(this@SearchActivity)\r\n                    }\r\n                } catch (e: Exception) {\r\n                    e.printStackTrace()\r\n                }\r\n            })\r\n            //endregion\r\n\r\n            //region All Search API Response\r\n            searchViewModel.responseSearch.observe(this, {\r\n                searchViewModel.isLoadingSearch.value = false\r\n                if (!it.data.isNullOrEmpty()) {\r\n                    adapterSearchRestaurant.addSearchRestaurantList(it.data!! as ArrayList<SearchRestaurantData>)\r\n                } else {\r\n                   // showMsgDialogAndProceed(it.message!!.toString().trim())\r\n                }\r\n            })\r\n            //endregion\r\n\r\n            //region Search Edittext\r\n            etRestaurantListSearch.requestFocus()\r\n            PubFun.showKeyboard(this@SearchActivity)\r\n            etRestaurantListSearch.setOnEditorActionListener(OnEditorActionListener { v, actionId, event ->\r\n                if (actionId == EditorInfo.IME_ACTION_DONE) {\r\n                    try {\r\n                        lastEditText = System.currentTimeMillis()\r\n                        handlerSearch.postDelayed(runnableSearch, delay)\r\n                    } catch (e: Exception) {\r\n                        e.printStackTrace()\r\n                    }\r\n                }\r\n                false\r\n            })\r\n            etRestaurantListSearch.addTextChangedListener(object : TextWatcher {\r\n                override fun beforeTextChanged(\r\n                    s: CharSequence?,\r\n                    start: Int,\r\n                    count: Int,\r\n                    after: Int\r\n                ) {\r\n\r\n                }\r\n\r\n                override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\r\n                    handlerSearch.removeCallbacks(runnableSearch)\r\n                    mySearchText = s.toString().lowercase().trim()\r\n                    if (mySearchText.isEmpty()) adapterSearchRestaurant.clearSearchRestaurantList()\r\n                }\r\n\r\n                override fun afterTextChanged(s: Editable?) {\r\n                    try {\r\n                        lastEditText = System.currentTimeMillis()\r\n                        handlerSearch.postDelayed(runnableSearch, delay)\r\n                    } catch (e: Exception) {\r\n                        e.printStackTrace()\r\n                    }\r\n                }\r\n            })\r\n            //endregion\r\n\r\n            //region Runnable Search\r\n            runnableSearch = Runnable {\r\n                if (System.currentTimeMillis() > (lastEditText + delay - 500)) {\r\n                    callAllSearchAPI()\r\n                }\r\n            }\r\n            //endregion\r\n\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    override fun onBackPressed() {\r\n        super.onBackPressed()\r\n        try {\r\n            //Remove Handler Call Back\r\n            handlerSearch.removeCallbacks(runnableSearch)\r\n            handlerSearch.removeCallbacksAndMessages(null)\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    override fun onClick(v: View?) {\r\n        try {\r\n            when (v) {\r\n                ivSearchRestaurantListBack -> onBackPressed()\r\n                ivSearchRestaurantCloseIcon -> {\r\n                    searchViewModel.isLoadingSearch.value = false\r\n                    etRestaurantListSearch.text!!.clear()\r\n                }\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    private fun callAllSearchAPI() {\r\n        try {\r\n            if (mySearchText.isNotEmpty()) {\r\n                if (PubFun.isInternetConnection(this@SearchActivity)) {\r\n                    searchViewModel.isLoadingSearch.value = true\r\n                    searchViewModel.allSearch(mySearchText)\r\n                } else {\r\n                    showMsgDialogAndProceed(Config.msgToastForInternet)\r\n                }\r\n            }\r\n        } catch (e: Exception) {\r\n            searchViewModel.isLoadingSearch.value = false\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    private fun showMsgDialogAndProceed(msg: String) {\r\n        try {\r\n            val myDialog = DialogToast(this@SearchActivity)\r\n            myDialog.show()\r\n            myDialog.holder?.let {\r\n                it.tvTitle.text = \"Search Restaurant List\"\r\n                it.tvMessage.text = msg\r\n                it.btnDialogCancel.visibility = View.GONE\r\n                var i = Config.autoDialogDismissTimeInSec\r\n                it.btnDialogLogout.apply {\r\n                    visibility = View.GONE\r\n                    post(object : Runnable {\r\n                        override fun run() {\r\n                            if (i == 0) {\r\n                                myDialog.dismiss()\r\n                            } else {\r\n                                i--\r\n                                postDelayed(this, 1000)\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/themarkettheory/user/ui/main/activity/SearchActivity.kt b/app/src/main/java/com/themarkettheory/user/ui/main/activity/SearchActivity.kt
--- a/app/src/main/java/com/themarkettheory/user/ui/main/activity/SearchActivity.kt	(revision 22835b89a09487dd586150f30da0a89d4fc6fa82)
+++ b/app/src/main/java/com/themarkettheory/user/ui/main/activity/SearchActivity.kt	(date 1643119679463)
@@ -38,7 +38,7 @@
     //General
     private var handlerSearch = Handler(Looper.getMainLooper())
     private lateinit var runnableSearch: Runnable
-    private val delay = 2000L //2 seconds
+    private val delay = 500L //2 seconds
     private var lastEditText = 0L
     private var mySearchText = ""
 
@@ -156,9 +156,10 @@
 
             //region Runnable Search
             runnableSearch = Runnable {
-                if (System.currentTimeMillis() > (lastEditText + delay - 500)) {
-                    callAllSearchAPI()
-                }
+//                if (System.currentTimeMillis() > (lastEditText + delay - 500)) {
+//
+//                }
+                callAllSearchAPI()
             }
             //endregion
 
@@ -226,7 +227,7 @@
                                 myDialog.dismiss()
                             } else {
                                 i--
-                                postDelayed(this, 1000)
+                                postDelayed(this, 0)
                             }
                         }
                     })
Index: app/src/main/java/com/themarkettheory/user/ui/coupon/CouponActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.themarkettheory.user.ui.coupon\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.View\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.themarkettheory.user.R\r\nimport com.themarkettheory.user.database.dbtables.TableConfig\r\nimport com.themarkettheory.user.helper.Config\r\nimport com.themarkettheory.user.helper.Constants\r\nimport com.themarkettheory.user.helper.PubFun\r\nimport com.themarkettheory.user.helper.Utils\r\nimport com.themarkettheory.user.interfaces.ListClickListener\r\nimport com.themarkettheory.user.newmodels.coupons.NewOfferListData\r\nimport com.themarkettheory.user.newmodels.coupons.NewOfferListRes\r\nimport com.themarkettheory.user.ui.dialog.dialogToast.DialogToast\r\nimport com.themarkettheory.user.ui.main.activity.BaseActivity\r\nimport com.themarkettheory.user.viewmodel.OfferViewModel\r\nimport kotlinx.android.synthetic.main.activity_coupon.*\r\nimport kotlinx.android.synthetic.main.activity_restaurant_list.*\r\nimport java.util.*\r\nimport kotlin.collections.ArrayList\r\n\r\nclass CouponActivity : BaseActivity(), View.OnClickListener {\r\n    /*View Model*/\r\n    private lateinit var offerViewModel: OfferViewModel\r\n    private lateinit var offerListRes: NewOfferListRes\r\n\r\n    /*General*/\r\n    private var serviceId = \"0\"\r\n    private var selectedType = \"\"\r\n    private var favoritePosition = 0\r\n    private var isFavoriteSelected = false\r\n    private var bookingId = \"0\"\r\n\r\n    /*Adapter*/\r\n    private lateinit var couponAdapter: CouponAdapter\r\n    private var offerList = ArrayList<NewOfferListData>()\r\n\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_coupon)\r\n        try {\r\n            /*Initialize View Model */\r\n            offerViewModel = ViewModelProvider(this).get(OfferViewModel::class.java)\r\n\r\n            /*Set Click Listener*/\r\n            ivCouponFavoriteCategory.setOnClickListener(this)\r\n            tvCouponRegularCategory.setOnClickListener(this)\r\n            tvCouponBuzzerCategory.setOnClickListener(this)\r\n            tvCouponCrossPromotionCategory.setOnClickListener(this)\r\n            ivCouponToolbarBack.setOnClickListener(this)\r\n\r\n            /*Bottom Bar Click Listener*/\r\n            tvCouponApply.setOnClickListener(this)\r\n            lylCouponHomeBottomBar.setOnClickListener(this)\r\n            lylCouponFavoriteBottomBar.setOnClickListener(this)\r\n            ivCouponLocationBottomBar.setOnClickListener(this)\r\n            lylCouponEventBottomBar.setOnClickListener(this)\r\n            lylCouponMenuBottomBar.setOnClickListener(this)\r\n\r\n            lylCouponBottomBar.visibility =\r\n                if (Config.isMyCouponClickedFromHome) View.GONE else View.VISIBLE\r\n            ivCouponLocationBottomBar.visibility =\r\n                if (Config.isMyCouponClickedFromHome) View.GONE else View.VISIBLE\r\n            ivCouponToolbarBack.visibility =\r\n                if (Config.isMyCouponClickedFromHome) View.VISIBLE else View.GONE\r\n            /*Default visibility gone*/\r\n            tvCouponApplyResponse.visibility = View.GONE\r\n\r\n            lylCouponApply.visibility =\r\n                if (Config.isEventBottomBarClicked) View.GONE else View.VISIBLE\r\n\r\n            init()\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        try {\r\n            Config.isEventMoveToback = false\r\n            if (Config.isCouponRedeem) {\r\n                Config.isCouponRedeem = false\r\n                etCouponApply.setText(Config.getSelectedCouponCode)\r\n            } else {\r\n                Config.isCouponRedeem = false\r\n                Config.getSelectedCouponCode = \"\"\r\n                Config.isCouponApplied = false\r\n                Config.isCouponDiscountType = 0\r\n                Config.isCouponBuyQty = 0\r\n                Config.isCouponGetQty = 0\r\n                Config.isCouponMenuId = 0\r\n                Config.isCouponBuyGetSelected = false\r\n                etCouponApply.setText(\"\")\r\n            }\r\n\r\n            /*Get Offer List Service Id*/\r\n            serviceId =\r\n                PubFun.isNull(\r\n                    myRoomDatabase.daoConfig()\r\n                        .selectConfigTableByField(Config.dbOfferListServiceId), \"0\"\r\n                )\r\n\r\n            /*Call Offer list byDefault will be 'Regular' */\r\n            tvCouponRegularCategory.performClick()\r\n\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    override fun onBackPressed() {\r\n        if (PubFun.isInternetConnection(this@CouponActivity)) {\r\n\r\n            Config.isCouponRedeemButtonVisible = false\r\n            if (Config.isMyCouponClickedFromHome) {\r\n                Config.isMyCouponClickedFromHome = false\r\n                if (Config.isMyCouponClickedFromProfileMenu) {\r\n                    Config.isMyCouponClickedFromProfileMenu = false\r\n                    lylCouponMenuBottomBar.performClick()\r\n                }\r\n                finish()\r\n            } else if (Config.isEventBottomBarClicked) {\r\n                Config.isEventBottomBarClicked = false\r\n                // lylCouponHomeBottomBar.performClick()\r\n                Config.isEventMoveToback = true\r\n                this.moveTaskToBack(true)\r\n            } else if (!Config.isEventMoveToback) {\r\n\r\n                super.onBackPressed()\r\n                finish()\r\n            }\r\n        } else {\r\n            showMsgDialogAndProceed(Config.msgToastForInternet)\r\n        }\r\n    }\r\n\r\n    override fun onClick(v: View?) {\r\n        try {\r\n            isFavoriteSelected = false\r\n            when (v) {\r\n                ivCouponToolbarBack -> onBackPressed()\r\n\r\n                lylCouponHomeBottomBar -> {\r\n                    Config.isEventBottomBarClicked = false\r\n                    Config.bottomBarClickedName = Config.homeBottomBarClicked\r\n                    onBackPressed()\r\n                }\r\n                lylCouponFavoriteBottomBar -> {\r\n                    Config.isEventBottomBarClicked = false\r\n                    Config.bottomBarClickedName = Config.favoriteBottomBarClick\r\n                    onBackPressed()\r\n                }\r\n                ivCouponLocationBottomBar -> {\r\n                    Config.isEventBottomBarClicked = false\r\n                    Config.bottomBarClickedName = Config.locationBottomBarClick\r\n                    onBackPressed()\r\n                }\r\n                lylCouponEventBottomBar -> {\r\n                    Config.isEventBottomBarClicked = false\r\n                    Config.bottomBarClickedName = Config.eventBottomBarClick\r\n                    onBackPressed()\r\n                }\r\n                lylCouponMenuBottomBar -> {\r\n                    Config.isEventBottomBarClicked = false\r\n                    Config.bottomBarClickedName = Config.menuBottomBarClick\r\n                    onBackPressed()\r\n                }\r\n\r\n                /*Favorite Click*/\r\n                ivCouponFavoriteCategory -> {\r\n                    /*Favorite Selected*/\r\n                    setFavoriteCategorySelection(true)\r\n\r\n                    /*Regular Unselected*/\r\n                    setRegularCategorySelection(false)\r\n\r\n                    /*Buzzer Unselected*/\r\n                    setBuzzerCategorySelection(false)\r\n\r\n                    /*Cross Promotion Unselected*/\r\n                    setCrossPromotionCategorySelection(false)\r\n\r\n                    /*Show Only Favorite List*/\r\n                    isFavoriteSelected = true\r\n                    populateOfferList(offerListRes)\r\n                }\r\n\r\n                /*Regular Click*/\r\n                tvCouponRegularCategory -> {\r\n                    /*Favorite Unselected*/\r\n                    setFavoriteCategorySelection(false)\r\n\r\n                    /*Regular Selected*/\r\n                    setRegularCategorySelection(true)\r\n\r\n                    /*Buzzer Unselected*/\r\n                    setBuzzerCategorySelection(false)\r\n\r\n                    /*Cross Promotion Unselected*/\r\n                    setCrossPromotionCategorySelection(false)\r\n\r\n                    selectedType = Constants.regular\r\n                    callOfferList(serviceId, \"\")\r\n                }\r\n\r\n                /*Buzzer Click*/\r\n                tvCouponBuzzerCategory -> {\r\n                    /*Favorite Unselected*/\r\n                    setFavoriteCategorySelection(false)\r\n\r\n                    /*Regular Unselected*/\r\n                    setRegularCategorySelection(false)\r\n\r\n                    /*Buzzer Selected*/\r\n                    setBuzzerCategorySelection(true)\r\n\r\n                    /*Cross Promotions Unselected*/\r\n                    setCrossPromotionCategorySelection(false)\r\n\r\n                    selectedType = Constants.buzzer\r\n                    populateOfferList(offerListRes)\r\n                }\r\n\r\n                /*Cross Promotion Click*/\r\n                tvCouponCrossPromotionCategory -> {\r\n                    /*Favorite Unselected*/\r\n                    setFavoriteCategorySelection(false)\r\n\r\n                    /*Regular Unselected*/\r\n                    setRegularCategorySelection(false)\r\n\r\n                    /*Buzzer Unselected*/\r\n                    setBuzzerCategorySelection(false)\r\n\r\n                    /*Cross Promotions Selected*/\r\n                    setCrossPromotionCategorySelection(true)\r\n\r\n                    selectedType = Constants.cross_promotion\r\n                    populateOfferList(offerListRes)\r\n                }\r\n\r\n                tvCouponApply -> {\r\n                    PubFun.hideKeyboard(this@CouponActivity)\r\n                    if (etCouponApply.text.toString().isNotEmpty()) {\r\n                        callCheckPromoCode(etCouponApply.text.toString())\r\n                    } else {\r\n                        showMsgDialogAndProceed(\"Please enter coupon code\")\r\n                    }\r\n                }\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n\r\n    private fun setFavoriteCategorySelection(isFavoriteSelected: Boolean) {\r\n        try {\r\n            ivCouponFavoriteCategory.apply {\r\n                setImageDrawable(\r\n                    ContextCompat.getDrawable(\r\n                        this@CouponActivity,\r\n                        if (isFavoriteSelected) R.drawable.ic_heart_fill else R.drawable.ic_heart_empty\r\n                    )\r\n                )\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    private fun setRegularCategorySelection(isRegularSelected: Boolean) {\r\n        try {\r\n            tvCouponRegularCategory.apply {\r\n                setTextColor(\r\n                    ContextCompat.getColor(\r\n                        this@CouponActivity,\r\n                        if (isRegularSelected) R.color.white else R.color.slate_gray\r\n                    )\r\n                )\r\n                background = ContextCompat.getDrawable(\r\n                    this@CouponActivity,\r\n                    if (isRegularSelected) R.drawable.bg_my_robbins_egg_blue_circle else\r\n                        R.drawable.bg_my_valhalla_circle\r\n                )\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    private fun setBuzzerCategorySelection(isBuzzerSelected: Boolean) {\r\n        try {\r\n            tvCouponBuzzerCategory.apply {\r\n                setTextColor(\r\n                    ContextCompat.getColor(\r\n                        this@CouponActivity,\r\n                        if (isBuzzerSelected) R.color.white else R.color.slate_gray\r\n                    )\r\n                )\r\n                background = ContextCompat.getDrawable(\r\n                    this@CouponActivity,\r\n                    if (isBuzzerSelected) R.drawable.bg_my_robbins_egg_blue_circle else\r\n                        R.drawable.bg_my_valhalla_circle\r\n                )\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    private fun setCrossPromotionCategorySelection(isCrossPromotionSelected: Boolean) {\r\n        try {\r\n            tvCouponCrossPromotionCategory.apply {\r\n                setTextColor(\r\n                    ContextCompat.getColor(\r\n                        this@CouponActivity,\r\n                        if (isCrossPromotionSelected) R.color.white else R.color.slate_gray\r\n                    )\r\n                )\r\n                background = ContextCompat.getDrawable(\r\n                    this@CouponActivity,\r\n                    if (isCrossPromotionSelected) R.drawable.bg_my_robbins_egg_blue_circle else\r\n                        R.drawable.bg_my_valhalla_circle\r\n                )\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    private fun init() {\r\n        try {\r\n            /*Get Booking Id*/\r\n            if (Config.isMenuFragmentComingFrom == Config.isMenuFragmentComingFromBookingTable) {\r\n                bookingId =\r\n                    myRoomDatabase.daoConfig().selectConfigTableByField(Config.dbTableBookingId)!!\r\n            } else {\r\n                bookingId = \"0\"\r\n            }\r\n\r\n            //region Progress Bar response\r\n            offerViewModel.isLoading.observe(this, {\r\n                try {\r\n                    if (it!!) {\r\n                        Utils.showProgress(this@CouponActivity)\r\n                    } else {\r\n                        Utils.hideProgress(this@CouponActivity)\r\n                    }\r\n                } catch (e: Exception) {\r\n                    e.printStackTrace()\r\n                }\r\n            })\r\n            //endregion\r\n\r\n            //region Offer List Response\r\n            offerViewModel.responseOffers.observe(this, {\r\n                try {\r\n                    when (it.status!!) {\r\n                        0 -> showMsgDialogAndProceed(it.message!!.trim())\r\n                        1 -> populateOfferList(it)\r\n                    }\r\n                } catch (e: Exception) {\r\n                    e.printStackTrace()\r\n                }\r\n            })\r\n            //endregion\r\n\r\n            //region Offer Favorite Coupon\r\n            offerViewModel.responseFavoriteCoupon.observe(this, {\r\n                try {\r\n                    when (it.status!!) {\r\n                        0 -> showMsgDialogAndProceed(it.message!!.trim())\r\n                        1 -> couponAdapter.addFavoriteToCoupon(\r\n                            favoritePosition,\r\n                            if (it.message!!.trim()\r\n                                    .lowercase(Locale.getDefault()) == \"added\"\r\n                            ) 1 else 0\r\n                        )\r\n                    }\r\n                } catch (e: Exception) {\r\n                    e.printStackTrace()\r\n                }\r\n            })\r\n            //endregion\r\n\r\n            //region Check Promo Code Coupon Response\r\n            offerViewModel.responseCheckPromoCodeNew.observe(this, {\r\n                try {\r\n                    when (it.status!!) {\r\n                        0 -> {\r\n                            Config.isCouponRedeem = false\r\n                            Config.isCouponApplied = false\r\n                            Config.getSelectedCouponCode = \"\"\r\n                            Config.isCouponDiscountType = 0\r\n                            Config.isCouponBuyQty = 0\r\n                            Config.isCouponGetQty = 0\r\n                            Config.isCouponMenuId = 0\r\n                            showMsgDialogAndProceed(it.message!!.trim())\r\n                        }\r\n                        1 -> {\r\n                            tvCouponApplyResponse.text = it.message!!.trim()\r\n                            Config.isCouponApplied = it.isValid!! == 1\r\n                            Log.e(\"CheckNowCoupon\", Config.isCouponApplied.toString())\r\n                            if(Config.isCouponOpeningFromBucket){\r\n                                onBackPressed()\r\n                            }\r\n                        }\r\n                    }\r\n                    tvCouponApplyResponse.visibility =\r\n                        if (it.isValid!! == 1) View.VISIBLE else View.GONE\r\n                } catch (e: Exception) {\r\n                    e.printStackTrace()\r\n                }\r\n            })\r\n            //endregion\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    private fun callOfferList(id: String, type: String) {\r\n        try {\r\n            if (PubFun.isInternetConnection(this@CouponActivity)) {\r\n                offerViewModel.offer_list(id, type)\r\n            } else {\r\n                showMsgDialogAndProceed(Config.msgToastForInternet)\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    private fun callOfferFavoriteCoupon(offerId: String) {\r\n        try {\r\n            if (PubFun.isInternetConnection(this@CouponActivity)) {\r\n                offerViewModel.offerFavoriteCoupon(offerId)\r\n            } else {\r\n                showMsgDialogAndProceed(Config.msgToastForInternet)\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    private fun callCheckPromoCode(promoCode: String) {\r\n        try {\r\n            if (PubFun.isInternetConnection(this@CouponActivity)) {\r\n                offerViewModel.check_promo_code_new(\r\n                    serviceId,\r\n                    promoCode,\r\n                    bookingId\r\n                )\r\n            } else {\r\n                showMsgDialogAndProceed(Config.msgToastForInternet)\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    private fun populateOfferList(res: NewOfferListRes) {\r\n        try {\r\n            if (res.data!!.isEmpty()) {\r\n                rvOfferList.visibility = View.GONE\r\n            } else {\r\n                offerListRes = res\r\n                val listener = object : ListClickListener {\r\n                    override fun onClickListener(view: View, pos: Int, objects: Any) {\r\n                        if (PubFun.isInternetConnection(this@CouponActivity)) {\r\n                            val data = objects as NewOfferListData\r\n                            myRoomDatabase.daoConfig().apply {\r\n                                deleteConfigTableByField(Config.dbOfferListResRowData)\r\n                                insertConfigTable(\r\n                                    TableConfig(\r\n                                        Config.dbOfferListResRowData,\r\n                                        gson.toJson(data)\r\n                                    )\r\n                                )\r\n                            }\r\n                            if (Config.isCouponOpeningFromBucket) {\r\n                                Config.isCouponRedeem = false\r\n                                Config.getSelectedCouponCode = data.couponCode!!.trim()\r\n                                Config.isCouponDiscountType = data.discountType!!\r\n                                Config.isCouponBuyQty = data.buyQty!!\r\n                                Config.isCouponGetQty = data.getQty!!\r\n                                Config.isCouponMenuId = data.menuId!!\r\n\r\n                                etCouponApply.setText(Config.getSelectedCouponCode)\r\n                                tvCouponApply.performClick()\r\n                            } else {\r\n                                Config.isCouponDetailComingFromCouponActivity = true\r\n                                startActivity(\r\n                                    Intent(\r\n                                        this@CouponActivity,\r\n                                        CouponDetailActivity::class.java\r\n                                    )\r\n                                )\r\n                                finish()\r\n                            }\r\n                        } else {\r\n                            showMsgDialogAndProceed(Config.msgToastForInternet)\r\n                        }\r\n                    }\r\n                }\r\n                val favoriteListener = object : ListClickListener {\r\n                    override fun onClickListener(view: View, pos: Int, objects: Any) {\r\n                        val data = objects as NewOfferListData\r\n                        favoritePosition = pos\r\n                        callOfferFavoriteCoupon(data.id!!.toString().trim())\r\n                    }\r\n                }\r\n\r\n                couponAdapter = CouponAdapter(this@CouponActivity, listener, favoriteListener)\r\n                rvOfferList.apply {\r\n                    visibility = View.VISIBLE\r\n                    layoutManager = LinearLayoutManager(this@CouponActivity)\r\n                    adapter = couponAdapter\r\n                }\r\n                offerList = res.data as ArrayList<NewOfferListData>\r\n                if (isFavoriteSelected) {\r\n                    val alFavoriteList = ArrayList<NewOfferListData>()\r\n                    for (i in offerList.indices) {\r\n                        if (offerList[i].isFavourite == 1) {\r\n                            alFavoriteList.add(offerList[i])\r\n                        }\r\n                    }\r\n                    if (alFavoriteList.isNotEmpty()) {\r\n                        rvOfferList.visibility = View.VISIBLE\r\n                        couponAdapter.addOfferList(alFavoriteList)\r\n                    } else {\r\n                        rvOfferList.visibility = View.GONE\r\n                    }\r\n                } else {\r\n                    val finalOfferListRes = ArrayList<NewOfferListData>()\r\n                    for (i in offerList.indices) {\r\n                        if (offerList[i].type!!.trim()\r\n                                .lowercase(Locale.getDefault()) == selectedType\r\n                        ) {\r\n                            finalOfferListRes.add(offerList[i])\r\n                        }\r\n                    }\r\n                    rvOfferList.visibility = if (finalOfferListRes.isEmpty())\r\n                        View.GONE else View.VISIBLE\r\n                    couponAdapter.addOfferList(finalOfferListRes)\r\n                }\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    private fun showMsgDialogAndProceed(msg: String) {\r\n        try {\r\n            val myDialog = DialogToast(this@CouponActivity)\r\n            myDialog.show()\r\n            myDialog.holder?.let {\r\n                it.tvTitle.text = \"Discounted Coupons\"\r\n                it.tvMessage.text = msg\r\n                it.btnDialogCancel.visibility = View.GONE\r\n                var i = Config.autoDialogDismissTimeInSec\r\n                it.btnDialogLogout.apply {\r\n                    visibility = View.GONE\r\n                    post(object : Runnable {\r\n                        override fun run() {\r\n                            if (i == 0) {\r\n                                myDialog.dismiss()\r\n                            } else {\r\n                                i--\r\n                                postDelayed(this, 1000)\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n                /*it.btnDialogLogout.text = \"OK\"\r\n                it.btnDialogLogout.setOnClickListener {\r\n                    myDialog.dismiss()\r\n                }*/\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/themarkettheory/user/ui/coupon/CouponActivity.kt b/app/src/main/java/com/themarkettheory/user/ui/coupon/CouponActivity.kt
--- a/app/src/main/java/com/themarkettheory/user/ui/coupon/CouponActivity.kt	(revision 22835b89a09487dd586150f30da0a89d4fc6fa82)
+++ b/app/src/main/java/com/themarkettheory/user/ui/coupon/CouponActivity.kt	(date 1643178755065)
@@ -2,9 +2,11 @@
 
 import android.annotation.SuppressLint
 import android.content.Intent
+import android.os.Build
 import android.os.Bundle
 import android.util.Log
 import android.view.View
+import android.view.WindowManager
 import androidx.core.content.ContextCompat
 import androidx.lifecycle.ViewModelProvider
 import androidx.recyclerview.widget.LinearLayoutManager
@@ -63,6 +65,13 @@
             ivCouponLocationBottomBar.setOnClickListener(this)
             lylCouponEventBottomBar.setOnClickListener(this)
             lylCouponMenuBottomBar.setOnClickListener(this)
+            if (Build.VERSION.SDK_INT == Build.VERSION_CODES.KITKAT) {
+                etCouponApply.clearFocus()
+            }
+            this.getWindow()
+                .setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN)
+
+            PubFun.hideKeyboard(this@CouponActivity)
 
             lylCouponBottomBar.visibility =
                 if (Config.isMyCouponClickedFromHome) View.GONE else View.VISIBLE
@@ -84,6 +93,9 @@
 
     override fun onResume() {
         super.onResume()
+
+        //etCouponApply.clearFocus()
+        //PubFun.hideKeyboard(this@CouponActivity)
         try {
             Config.isEventMoveToback = false
             if (Config.isCouponRedeem) {
@@ -410,7 +422,7 @@
                             tvCouponApplyResponse.text = it.message!!.trim()
                             Config.isCouponApplied = it.isValid!! == 1
                             Log.e("CheckNowCoupon", Config.isCouponApplied.toString())
-                            if(Config.isCouponOpeningFromBucket){
+                            if (Config.isCouponOpeningFromBucket) {
                                 onBackPressed()
                             }
                         }
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"DesignSurface\">\r\n    <option name=\"filePathToZoomLevelMap\">\r\n      <map>\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/TMTProject/TMTProject/app/src/main/res/drawable/bg_edittext_blue_border.xml\" value=\"0.38333333333333336\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/TMTProject/TMTProject/app/src/main/res/layout/activity_add_address.xml\" value=\"0.3671875\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/TMTProject/TMTProject/app/src/main/res/layout/activity_business_profile.xml\" value=\"0.3671875\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/TMTProject/TMTProject/app/src/main/res/layout/activity_edit_profile_new.xml\" value=\"0.23190789473684212\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/TMTProject/TMTProject/app/src/main/res/layout/activity_invite_and_earn_new.xml\" value=\"0.23190789473684212\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/TMTProject/TMTProject/app/src/main/res/layout/activity_mybucket_new.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/TMTProject/TMTProject/app/src/main/res/layout/activity_restaurant_description.xml\" value=\"0.1299342105263158\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/TMTProject/TMTProject/app/src/main/res/layout/activity_restaurant_list.xml\" value=\"0.21927083333333333\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/TMTProject/TMTProject/app/src/main/res/layout/activity_search.xml\" value=\"0.23190789473684212\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/TMTProject/TMTProject/app/src/main/res/layout/activity_verify_otp.xml\" value=\"0.23190789473684212\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/TMTProject/TMTProject/app/src/main/res/layout/dialog_invite_new.xml\" value=\"0.3671875\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/TMTProject/TMTProject/app/src/main/res/layout/dialog_schedule_time.xml\" value=\"0.3671875\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/TMTProject/TMTProject/app/src/main/res/layout/dialog_term_condition.xml\" value=\"0.13848684210526316\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/TMTProject/TMTProject/app/src/main/res/layout/fragment_overview.xml\" value=\"0.23190789473684212\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/TMTProject/TMTProject/app/src/main/res/layout/toolbar_restaurant.xml\" value=\"0.1299342105263158\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" default=\"true\" project-jdk-name=\"JDK\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 22835b89a09487dd586150f30da0a89d4fc6fa82)
+++ b/.idea/misc.xml	(date 1643119354816)
@@ -3,21 +3,20 @@
   <component name="DesignSurface">
     <option name="filePathToZoomLevelMap">
       <map>
+        <entry key="..\:/_ANDROID_PROJECTS/root_tmt/app/src/main/res/layout/activity_coupon.xml" value="0.33" />
+        <entry key="..\:/_ANDROID_PROJECTS/root_tmt/app/src/main/res/layout/activity_edit_profile_new.xml" value="0.19635416666666666" />
+        <entry key="..\:/_ANDROID_PROJECTS/root_tmt/app/src/main/res/layout/activity_recommended.xml" value="0.19635416666666666" />
+        <entry key="..\:/_ANDROID_PROJECTS/root_tmt/app/src/main/res/layout/activity_restaurant_list.xml" value="0.19635416666666666" />
         <entry key="..\:/__ANDROID_PROJECTS/TMTProject/TMTProject/app/src/main/res/drawable/bg_edittext_blue_border.xml" value="0.38333333333333336" />
         <entry key="..\:/__ANDROID_PROJECTS/TMTProject/TMTProject/app/src/main/res/layout/activity_add_address.xml" value="0.3671875" />
         <entry key="..\:/__ANDROID_PROJECTS/TMTProject/TMTProject/app/src/main/res/layout/activity_business_profile.xml" value="0.3671875" />
-        <entry key="..\:/__ANDROID_PROJECTS/TMTProject/TMTProject/app/src/main/res/layout/activity_edit_profile_new.xml" value="0.23190789473684212" />
-        <entry key="..\:/__ANDROID_PROJECTS/TMTProject/TMTProject/app/src/main/res/layout/activity_invite_and_earn_new.xml" value="0.23190789473684212" />
         <entry key="..\:/__ANDROID_PROJECTS/TMTProject/TMTProject/app/src/main/res/layout/activity_mybucket_new.xml" value="0.25" />
-        <entry key="..\:/__ANDROID_PROJECTS/TMTProject/TMTProject/app/src/main/res/layout/activity_restaurant_description.xml" value="0.1299342105263158" />
         <entry key="..\:/__ANDROID_PROJECTS/TMTProject/TMTProject/app/src/main/res/layout/activity_restaurant_list.xml" value="0.21927083333333333" />
         <entry key="..\:/__ANDROID_PROJECTS/TMTProject/TMTProject/app/src/main/res/layout/activity_search.xml" value="0.23190789473684212" />
-        <entry key="..\:/__ANDROID_PROJECTS/TMTProject/TMTProject/app/src/main/res/layout/activity_verify_otp.xml" value="0.23190789473684212" />
         <entry key="..\:/__ANDROID_PROJECTS/TMTProject/TMTProject/app/src/main/res/layout/dialog_invite_new.xml" value="0.3671875" />
         <entry key="..\:/__ANDROID_PROJECTS/TMTProject/TMTProject/app/src/main/res/layout/dialog_schedule_time.xml" value="0.3671875" />
         <entry key="..\:/__ANDROID_PROJECTS/TMTProject/TMTProject/app/src/main/res/layout/dialog_term_condition.xml" value="0.13848684210526316" />
         <entry key="..\:/__ANDROID_PROJECTS/TMTProject/TMTProject/app/src/main/res/layout/fragment_overview.xml" value="0.23190789473684212" />
-        <entry key="..\:/__ANDROID_PROJECTS/TMTProject/TMTProject/app/src/main/res/layout/toolbar_restaurant.xml" value="0.1299342105263158" />
       </map>
     </option>
   </component>
Index: app/src/main/java/com/themarkettheory/user/ui/restaurant/MyBucketActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.themarkettheory.user.ui.restaurant\r\n\r\nimport RangeTimePickerDialog\r\nimport android.annotation.SuppressLint\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.os.Looper\r\nimport android.os.SystemClock\r\nimport android.text.Editable\r\nimport android.text.TextWatcher\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.view.WindowManager\r\nimport android.widget.RadioButton\r\nimport android.widget.RadioGroup\r\nimport android.widget.Toast\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.google.android.material.textview.MaterialTextView\r\nimport com.razorpay.*\r\nimport com.themarkettheory.user.R\r\nimport com.themarkettheory.user.database.dbtables.TableConfig\r\nimport com.themarkettheory.user.helper.Config\r\nimport com.themarkettheory.user.helper.PubFun\r\nimport com.themarkettheory.user.helper.Utils\r\nimport com.themarkettheory.user.interfaces.ListClickListenerCart\r\nimport com.themarkettheory.user.newmodels.booking.bookingdetails.NewBookingDetailsRes\r\nimport com.themarkettheory.user.newmodels.bucketcart.GetCartNewRes\r\nimport com.themarkettheory.user.newmodels.bucketcart.ServiceDetails\r\nimport com.themarkettheory.user.ui.coupon.CouponActivity\r\nimport com.themarkettheory.user.ui.dialog.dialogToast.DialogToast\r\nimport com.themarkettheory.user.ui.main.activity.BaseActivity\r\nimport com.themarkettheory.user.viewmodel.CartViewModel\r\nimport com.themarkettheory.user.viewmodel.VendorDetailViewModel\r\nimport kotlinx.android.synthetic.main.activity_my_bucket.*\r\nimport kotlinx.android.synthetic.main.activity_my_bucket.rvMyCart\r\nimport kotlinx.android.synthetic.main.activity_my_bucket.tvAddMore\r\nimport kotlinx.android.synthetic.main.activity_my_bucket.tvAddress\r\nimport kotlinx.android.synthetic.main.activity_my_bucket.tvMyCart\r\nimport kotlinx.android.synthetic.main.activity_my_bucket.tvSubtotal\r\nimport kotlinx.android.synthetic.main.activity_my_bucket.tvVendorTitle\r\nimport kotlinx.android.synthetic.main.activity_my_bucket.tvtax\r\nimport kotlinx.android.synthetic.main.activity_mybucket_new.*\r\nimport kotlinx.android.synthetic.main.fragment_booking.*\r\nimport kotlinx.android.synthetic.main.toolbar.*\r\nimport org.json.JSONArray\r\nimport org.json.JSONObject\r\nimport java.text.DecimalFormat\r\nimport java.text.NumberFormat\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\nimport kotlin.collections.ArrayList\r\n\r\n\r\nclass MyBucketActivity : BaseActivity(), View.OnClickListener, PaymentResultWithDataListener {\r\n    // View Model cart\r\n    private lateinit var cartViewModel: CartViewModel\r\n    private lateinit var vendorDetailViewModel: VendorDetailViewModel\r\n\r\n    //Recycler View adapter object\r\n    private lateinit var bucketAdapter: BucketAdapter\r\n    var bucketDataList = ArrayList<MyBucketCartRes>()\r\n\r\n    //general\r\n    var isLoadedFirstTime = true\r\n    var totalAmt = 0.0\r\n    val numberFormat: NumberFormat = DecimalFormat(\"#0.00\")\r\n    var subTotal = 0.0\r\n    var totalTax = 0.0\r\n    var discountCouponTotal = 0.0\r\n    var totalPoints = 0\r\n    var bookingId = \"0\"\r\n    var serviceId = \"\"\r\n    var serviceName = \"\"\r\n    val pickupNowType = \"pickup now\"\r\n    private var isDiningInSelected = false\r\n\r\n    //discounted coupon\r\n    private val couponPercentage = 1\r\n    private val couponFlat = 2\r\n    private val couponBuyGet = 3\r\n    private var lastClickTime = 0L\r\n\r\n    // edit text delay\r\n    val delay: Long = 3000\r\n    var lastEditText: Long = 0\r\n    val handlerEditText = Handler(Looper.getMainLooper())\r\n\r\n    // for time\r\n    var formatHours = SimpleDateFormat(Config.defaultTimeFormat, Locale.getDefault())\r\n\r\n    var radioGroup: RadioGroup? = null\r\n    var pickupNowsss: RadioButton? = null\r\n\r\n    private lateinit var tvCouponCode: MaterialTextView\r\n    private lateinit var tvDiningIn: MaterialTextView\r\n\r\n    var selectedIndex: Int = 0\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_mybucket_new)\r\n        try {\r\n            // setting keyboard adjustment\r\n            window\r\n                .setSoftInputMode(\r\n                    WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN or\r\n                            WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN\r\n                )\r\n\r\n            tvCouponCode = findViewById(R.id.tvCouponCode)\r\n            tvDiningIn = findViewById(R.id.tvDiningIn)\r\n            init()\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        try {\r\n\r\n            if (bucketDataList.size != 0) {\r\n                applyCouponChanges()\r\n                calculateFooterSection(bucketDataList)\r\n            }\r\n\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    override fun onBackPressed() {\r\n        /*super.onBackPressed()*/\r\n        if (PubFun.isInternetConnection(this@MyBucketActivity)) {\r\n            if (Config.isHomeGoCartClicked && !Config.isBucketAddMoreClicked) {\r\n                Config.isHomeGoCartClicked = false\r\n                finish()\r\n            } else {\r\n                if (Config.isMenuFragmentComingFrom.isEmpty()) {\r\n                    Config.isMenuFragmentComingFrom = Config.isMenuFragmentComingFromBucketCart\r\n                }\r\n                Config.isVideoPlay = false\r\n                startActivity(\r\n                    Intent(this@MyBucketActivity, VendorDetailActivity::class.java)\r\n                        .putExtra(\"category\", \"1\")\r\n                        .putExtra(\"serviceId\", serviceId)\r\n                        .putExtra(\"vendorTitle\", serviceName)\r\n                        .putExtra(\"selectPosition\", 2)\r\n                )\r\n            }\r\n            if (Config.isCouponComingFromMainActivity) {\r\n                Config.isCouponComingFromMainActivity = false\r\n                Config.isEventBottomBarClicked = true\r\n            }\r\n            if (Config.isCouponComingFromAllFragment) {\r\n                Config.isCouponComingFromAllFragment = false\r\n                Config.isCouponOpeningFromBucket = false\r\n                Config.isEventBottomBarClicked = true\r\n                Config.isMyCouponClickedFromHome = true\r\n            }\r\n            if (Config.isCouponComingFromOverviewViewAll) {\r\n                Config.isCouponComingFromOverviewViewAll = false\r\n                Config.isCouponOpeningFromBucket = false\r\n                Config.isEventBottomBarClicked = true\r\n                Config.isMyCouponClickedFromHome = true\r\n            }\r\n            if (Config.isCouponComingFromMenuFragment) {\r\n                Config.isCouponComingFromMenuFragment = false\r\n                Config.isCouponOpeningFromBucket = false\r\n                Config.isEventBottomBarClicked = true\r\n                Config.isMyCouponClickedFromHome = true\r\n                Config.isMyCouponClickedFromProfileMenu = true\r\n            }\r\n            finish()\r\n        } else {\r\n            showMsgDialogAndProceed(Config.msgToastForInternet)\r\n        }\r\n    }\r\n\r\n    private fun callGetCart(bookingID: Int) {\r\n        if (PubFun.isInternetConnection(this)) {\r\n            cartViewModel.get_cart(bookingID, 0, 0, 0)\r\n        } else {\r\n            showMsgDialogAndProceed(Config.msgToastForInternet)\r\n        }\r\n    }\r\n\r\n    private fun callServiceDetail() {\r\n        try {\r\n            if (PubFun.isInternetConnection(this@MyBucketActivity)) {\r\n                if (!Config.isPreOrder) { //if pre order is false then only call this API\r\n                    vendorDetailViewModel.service_details(Config.vendorDetailServiceId)\r\n                } else {\r\n                    tvDiningIn.visibility = View.GONE\r\n                }\r\n            } else {\r\n                tvDiningIn.visibility = View.GONE\r\n                showMsgDialogAndProceed(Config.msgToastForInternet)\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    private fun init() = try {\r\n        //view model intialization\r\n        vendorDetailViewModel = ViewModelProvider(this).get(VendorDetailViewModel::class.java)\r\n        cartViewModel = ViewModelProvider(this).get(CartViewModel::class.java)\r\n\r\n        // toolbar title\r\n        tvTitle.text = getString(R.string.my_bucket)\r\n\r\n\r\n        clMyBucketTable.visibility = View.GONE\r\n        constraintPickUp.visibility = View.VISIBLE\r\n//\r\n//            if (Config.isCouponApplied) {\r\n//                tvCouponCode.text = Config.getSelectedCouponCode\r\n//            }\r\n\r\n        applyCouponChanges()\r\n\r\n        //region For Booking Table for X person with date & time\r\n        if (Config.isMenuFragmentComingFrom == Config.isMenuFragmentComingFromBookingTable) {\r\n            val newBookingDetailsRes =\r\n                gson.fromJson(\r\n                    myRoomDatabase.daoConfig()\r\n                        .selectConfigTableByField(Config.dbNewBookingDetailRes)!!,\r\n                    NewBookingDetailsRes::class.java\r\n                )\r\n            Log.e(\"TableBBB0\", gson.toJson(newBookingDetailsRes.data))\r\n            //Getting booking Id\r\n            bookingId = newBookingDetailsRes.data!!.order_id!!.toString().trim()\r\n\r\n            //doing table section hidden\r\n            clMyBucketTable.visibility =\r\n                if (newBookingDetailsRes.data!!.adult!! > 0) View.VISIBLE else View.GONE\r\n            constraintPickUp.visibility =\r\n                if (newBookingDetailsRes.data!!.adult!! > 0) View.GONE else View.VISIBLE\r\n\r\n            //Booking Table for X People or Persons\r\n            tvMyBucketTable.text = \"Table for ${newBookingDetailsRes.data!!.total_person} \" +\r\n                    if (newBookingDetailsRes.data!!.total_person!! == 1) \"People\" else \"Persons\"\r\n\r\n            //Booking Date\r\n            tvMyBucketDateText.text = PubFun.parseDate(\r\n                newBookingDetailsRes.data!!.booking_date,\r\n                Config.requestDateFormat,\r\n                Config.defaultDateFormat\r\n            )\r\n\r\n            //Booking Time\r\n            tvOrderConfirmationTextValue.text = newBookingDetailsRes.data!!.booking_time!!.trim()\r\n        }\r\n        //endregion\r\n\r\n        // requesting api for cart detail\r\n        callGetCart(bookingId.toInt())\r\n\r\n        //api response for cart details\r\n        cartViewModel.responseGetCartNew.observe(this, {\r\n            when (it.status!!) {\r\n                0 -> showMsgDialogAndProceed(it.message!!)\r\n                1 -> populateCartDetails(it!!)\r\n            }\r\n        })\r\n\r\n        // api response for order confirmation\r\n        cartViewModel.responseConfirmOrder.observe(this, {\r\n            when (it.status!!) {\r\n                0 -> showMsgDialogAndProceed(it.message!!)\r\n                1 -> {\r\n                    myRoomDatabase.daoConfig().deleteConfigTableByField(Config.dbOrderId)\r\n                    myRoomDatabase.daoConfig().insertConfigTable(\r\n                        TableConfig(\r\n                            Config.dbOrderId,\r\n                            it.orderId!!.toString().trim()\r\n                        )\r\n                    )\r\n                    startActivity(\r\n                        Intent(\r\n                            this@MyBucketActivity,\r\n                            OrderConfirmationActivity::class.java\r\n                        )\r\n                    )\r\n                    finish()\r\n                }\r\n            }\r\n        })\r\n\r\n        //Check Restaurant Time API response\r\n        vendorDetailViewModel.responseCheckRestaurantTime.observe(this, {\r\n            try {\r\n                when (it.status!!) {\r\n                    0 -> showMsgDialogAndProceed(it.message!!.trim())\r\n                    1 -> startRazorPayment()\r\n                }\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            }\r\n        })\r\n\r\n        //Click listener\r\n        ivBack.setOnClickListener(this)\r\n        tvAddMore.setOnClickListener(this)\r\n        tvMyBucketPickUpTime.setOnClickListener(this)\r\n        clBucketPromoCode.setOnClickListener(this)\r\n        ivCouponCross.setOnClickListener(this)\r\n\r\n\r\n        // setting up the text on picktime text\r\n        radioGroup = findViewById(R.id.radioGroup)\r\n\r\n        with(radioGroup) {\r\n            this?.setOnCheckedChangeListener(RadioGroup.OnCheckedChangeListener { group, checkedId ->\r\n                when (checkedId) {\r\n                    R.id.rbSchedulePickup -> {\r\n//                        if (isDiningInSelected) {\r\n//                            tvDiningIn.performClick()\r\n//                        }\r\n                        ivMyBucketClock.visibility = View.VISIBLE\r\n                        tvMyBucketPickUpTime.visibility = View.VISIBLE\r\n                        tvMyBucketPickUpTime.text = \"Select Schedule Time\"\r\n                        selectedIndex = 0\r\n                        callApiForPickUpType(\"SCHEDULE_PICKUP\", \"\")\r\n\r\n                    }\r\n                    R.id.rbPickupNow -> {\r\n//                        if (isDiningInSelected) {\r\n//                            tvDiningIn.performClick()\r\n//                        }\r\n                        ivMyBucketClock.visibility = View.GONE\r\n                        tvMyBucketPickUpTime.visibility = View.GONE\r\n                        selectedIndex = 1\r\n\r\n                        callApiForPickUpType(\"PICKUP_NOW\", \"\")\r\n                    }\r\n//                    // else -> {\r\n                }\r\n            })\r\n        }\r\n\r\n        vendorDetailViewModel.responseServiceDetail.observe(this, {\r\n            when (it.status!!) {\r\n                0 -> showMsgDialogAndProceed(it.message!!.trim())\r\n                1 -> {\r\n                    tvDiningIn.visibility = if (it.data!!.isTableBooking!! == 1)\r\n                        View.VISIBLE else View.GONE\r\n                }\r\n            }\r\n        })\r\n\r\n        tvDiningIn.setOnClickListener {\r\n//            if (!isDiningInSelected) {\r\n//                with(radioGroup) { this?.clearCheck() }\r\n//            }\r\n\r\n            tvDiningIn.setCompoundDrawablesRelativeWithIntrinsicBounds(\r\n                if (isDiningInSelected) R.drawable.ic_radio_button_unchecked else\r\n                    R.drawable.ic_radio_button_checked,\r\n                0,\r\n                0,\r\n                0\r\n            )\r\n\r\n\r\n            isDiningInSelected = !isDiningInSelected\r\n//            if(isDiningInSelected){\r\n//                selectedIndex = 2\r\n//\r\n//            }\r\n\r\n        }\r\n\r\n\r\n        // setting onclick listener to confirm your order button\r\n        btnMyBucketCartConfirmYourOrder.setOnClickListener(this)\r\n\r\n        val runnableEditText = Runnable {\r\n            if (System.currentTimeMillis() > ((lastEditText + delay) - 500)) {\r\n                callApiForSpecialInstruction(\r\n                    \"0\",\r\n                    edMyBucketSpecialInstaruction.text.toString().trim()\r\n                )\r\n            }\r\n        }\r\n        edMyBucketSpecialInstaruction.addTextChangedListener(object : TextWatcher {\r\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {\r\n            }\r\n\r\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\r\n                handlerEditText.removeCallbacks(runnableEditText)\r\n            }\r\n\r\n            override fun afterTextChanged(s: Editable?) {\r\n                if (s.toString().trim().isNotEmpty()) {\r\n                    lastEditText = System.currentTimeMillis()\r\n                    handlerEditText.postDelayed(runnableEditText, delay)\r\n                }\r\n            }\r\n\r\n        })\r\n    } catch (e: Exception) {\r\n        e.printStackTrace()\r\n    }\r\n\r\n    private fun applyCouponChanges() {\r\n        try {/*Apply Coupon*/\r\n\r\n            ivCouponCross.visibility = if (Config.isCouponApplied) View.VISIBLE else View.GONE\r\n            tvMyBucketCouponDiscountText.visibility =\r\n                if (Config.isCouponApplied) View.VISIBLE else View.GONE\r\n            tvCouponDiscount.visibility = if (Config.isCouponApplied) View.VISIBLE else View.GONE\r\n\r\n            tvCouponCode.apply {\r\n                text =\r\n                    if (Config.isCouponApplied) Config.getSelectedCouponCode else getString(R.string.apply_promo_code)\r\n                setTextColor(\r\n                    if (Config.isCouponApplied)\r\n                        ContextCompat.getColor(\r\n                            this@MyBucketActivity,\r\n                            R.color.myRobinsEggBlue\r\n                        ) else ContextCompat.getColor(\r\n                        this@MyBucketActivity,\r\n                        R.color.myWhite\r\n                    )\r\n                )\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    private fun callCheckRestaurantTimeApi(id: Int, time: String) {\r\n        vendorDetailViewModel.checkRestaurantTime(id, time)\r\n    }\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    private fun showMsgDialogAndProceed(msg: String) {\r\n        try {\r\n            Utils.hideProgress(this)\r\n            val myDialog = DialogToast(this)\r\n            myDialog.show()\r\n            myDialog.holder?.let {\r\n                it.tvTitle.text = getString(R.string.my_bucket)\r\n                it.tvMessage.text = msg\r\n                it.btnDialogCancel.visibility = View.GONE\r\n                var i = Config.autoDialogDismissTimeInSec\r\n                it.btnDialogLogout.apply {\r\n                    visibility = View.GONE\r\n                    post(object : Runnable {\r\n                        override fun run() {\r\n                            if (i == 0) {\r\n                                myDialog.dismiss()\r\n                            } else {\r\n                                i--\r\n                                postDelayed(this, 1000)\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n                /*it.btnDialogLogout.text = \"OK\"\r\n                it.btnDialogLogout.setOnClickListener {\r\n                    myDialog.dismiss()\r\n                }*/\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    private fun callApiForSpecialInstruction(bookingID: String, specialInstructionMsg: String) {\r\n        try {\r\n            if (PubFun.isInternetConnection(this)) {\r\n                cartViewModel.special_request(bookingID, specialInstructionMsg, \"0\", 0)\r\n            } else {\r\n                showMsgDialogAndProceed(Config.msgToastForInternet)\r\n            }\r\n\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    private fun callApiForPickUpType(type: String, scheduleTime: String) {\r\n        Log.e(type, scheduleTime)\r\n        try {\r\n            if (PubFun.isInternetConnection(this)) {\r\n                cartViewModel.pickup_type(type, scheduleTime, 0, 0, 0)\r\n            } else {\r\n                showMsgDialogAndProceed(Config.msgToastForInternet)\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    private fun callApiForConfirmOrder(paymentData: PaymentData) {\r\n        try {\r\n            val menuArray = JSONArray()\r\n            for (i in bucketDataList.indices) {\r\n                val menuObject = JSONObject()\r\n                menuObject.put(\"menu_id\", bucketDataList[i].menuID.toString())\r\n                menuObject.put(\"qty\", bucketDataList[i].qty.toString())\r\n                menuObject.put(\"price\", bucketDataList[i].finalPrice.toString())\r\n                menuObject.put(\"points\", bucketDataList[i].point.toString())\r\n                menuObject.put(\"is_redeem\", \"\")\r\n                menuArray.put(menuObject)\r\n            }\r\n            if (PubFun.isInternetConnection(this)) {\r\n\r\n                val currentTimess: String =\r\n                    SimpleDateFormat(\"hh:mm aa\", Locale.getDefault()).format(Date())\r\n                if (selectedIndex == 1) {\r\n\r\n\r\n                    //change payment_id in live mode\r\n                    cartViewModel.confirmOrder(\r\n                        bucketDataList[0].serviceId.toString(),\r\n                        menuArray,\r\n                        subTotal.toString(),\r\n                        totalAmt.toString(),\r\n                        \"\",\r\n                        \"payment_id\",  //paymentData.paymentId.toString(),\r\n                        totalPoints.toString(),\r\n                        edMyBucketSpecialInstaruction.text.toString().trim(),\r\n                        currentTimess,\r\n                        totalTax.toString(),\r\n                        bookingId\r\n                    )\r\n                    return\r\n                }\r\n                cartViewModel.confirmOrder(\r\n                    bucketDataList[0].serviceId.toString(),\r\n                    menuArray,\r\n                    subTotal.toString(),\r\n                    totalAmt.toString(),\r\n                    \"\",\r\n                    paymentData.paymentId.toString(),\r\n                    totalPoints.toString(),\r\n                    edMyBucketSpecialInstaruction.text.toString().trim(),\r\n                    tvMyBucketPickUpTime.text.toString().trim(),\r\n                    totalTax.toString(),\r\n                    bookingId\r\n                )\r\n            } else {\r\n                showMsgDialogAndProceed(Config.msgToastForInternet)\r\n            }\r\n\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    lateinit var serviceDetails: ServiceDetails\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    private fun populateCartDetails(res: GetCartNewRes) {\r\n        try {\r\n            Log.e(\"populateCartDetails\", \"populateCartDetails\");\r\n            Log.e(\"Cart Data\", gson.toJson(res))\r\n            if (res.data != null) {\r\n                //restaurant id\r\n                if (res.data!!.serviceDetails != null) {\r\n                    Config.vendorDetailServiceId = res.data!!.serviceDetails!!.id!!.toString()\r\n                    //restaurant name\r\n                    Config.vendorDetailServiceName = res.data!!.serviceDetails!!.title!!\r\n                    //restaurant title\r\n                    tvVendorTitle.text = res.data!!.serviceDetails!!.title!!\r\n                    // retaurant address\r\n                    tvAddress.text = res.data!!.serviceDetails!!.address!!\r\n                    // cart size\r\n                    val cartSize = res.data!!.list!!.size\r\n                    tvMyCart.text =\r\n                        \"My Cart (${cartSize} ${if (cartSize == 1) \"Item\" else \"Items\"})\"\r\n                    //Service ID\r\n                    serviceId = res.data!!.serviceDetails!!.id.toString().trim()\r\n                    //Service Name\r\n                    serviceName = res.data!!.serviceDetails!!.title!!.trim()\r\n                }\r\n                // setting up special instruction\r\n                edMyBucketSpecialInstaruction.setText(\r\n                    res.data!!.booking!!.specialInstruction!!.toString().trim()\r\n                )\r\n                // setting up radio group selection\r\n                radioGroup?.apply {\r\n                    check(\r\n                        getChildAt(\r\n                            if (res.data!!.booking!!.type!!.toString()\r\n                                    .lowercase(Locale.getDefault()) == pickupNowType\r\n                            ) 1 else 0\r\n                        ).id\r\n                    )\r\n                }\r\n\r\n                //tvCouponDiscount.text = res.data!!.couponData!!.discountAmount.toString()\r\n                // setting time +30 if pickup type is pickup now\r\n                if (res.data!!.booking!!.type!!.toString()\r\n                        .lowercase(Locale.getDefault()) == pickupNowType\r\n                ) {\r\n                    //add30MinutesToCurrentTime()\r\n                    selectedIndex = 1\r\n                    callApiForPickUpType(\"PICKUP_NOW\", \"\")\r\n\r\n                } else {\r\n                    // setting up booking time\r\n                    if (res.data!!.booking!!.bookingTime!!.isNotEmpty()) {\r\n                        tvMyBucketPickUpTime.text = PubFun.parseDate(\r\n                            res.data!!.booking!!.bookingTime!!,\r\n                            Config.requestTimeFormat,\r\n                            Config.defaultTimeFormat\r\n                        )\r\n                        callApiForPickUpType(\r\n                            \"SCHEDULE_PICKUP\", PubFun.parseDate(\r\n                                tvMyBucketPickUpTime.text.toString(),\r\n                                Config.defaultTimeFormat,\r\n                                Config.requestTimeFormat\r\n                            ).toString()\r\n                        )\r\n                        // tvMyBucketPickUpTime.text.toString().trim()\r\n\r\n                    } else {\r\n                        callApiForPickUpType(\r\n                            \"SCHEDULE_PICKUP\",\r\n                            \"\"\r\n                        )\r\n                    }\r\n                    selectedIndex = 0\r\n                }\r\n                //recycler view\r\n                val listener = object : ListClickListenerCart {\r\n                    override fun onClickListener(\r\n                        view: View,\r\n                        pos: Int,\r\n                        objects: Any,\r\n                        isItemAdded: Boolean\r\n                    ) {\r\n                        if (!isLoadedFirstTime) {\r\n                            val bucketData = objects as MyBucketCartRes\r\n                            bucketDataList[pos].qty = bucketData.qty\r\n                            bucketAdapter.notifyDataSetChanged()\r\n                            calculateFooterSection(bucketDataList)\r\n\r\n                            //calling api for adding and removing items\r\n                            if (bucketData.qty > 0) {\r\n                                vendorDetailViewModel.menu_add_cart(\r\n                                    bucketData.serviceId.toString(),\r\n                                    bucketData.menuID.toString(),\r\n                                    \"0\",\r\n                                    bucketData.qty.toString(),\r\n                                    \"0\",\r\n                                    0,\r\n                                    if (isDiningInSelected) 1 else 0\r\n                                )\r\n\r\n                                //region Coupon Logic for Bug 1 Get 1 free\r\n                                val totalQty = Config.isCouponBuyQty + Config.isCouponGetQty\r\n                                if (Config.isCouponApplied && Config.isCouponDiscountType == couponBuyGet\r\n                                    && Config.isCouponMenuId == bucketData.menuID\r\n                                ) {\r\n                                    Config.isCouponBuyGetSelected = true\r\n                                    if (bucketData.qty == totalQty) {\r\n                                        //Applied coupon discount\r\n                                        coupon@ for (i in bucketDataList.indices) {\r\n                                            if (Config.isCouponMenuId == bucketDataList[i].menuID) {\r\n                                                discountCouponTotal = bucketDataList[i].finalPrice\r\n                                                break@coupon\r\n                                            }\r\n                                        }\r\n                                    } else if (bucketData.qty < totalQty) {\r\n                                        //remove coupon discount\r\n                                        discountCouponTotal = 0.0\r\n                                    }\r\n                                    calculateFooterSection(bucketDataList)\r\n                                }\r\n                                //endregion\r\n                            } else {\r\n                                vendorDetailViewModel.menu_add_cart(\r\n                                    bucketData.serviceId.toString(),\r\n                                    bucketData.menuID.toString(),\r\n                                    \"0\",\r\n                                    \"0\",\r\n                                    \"0\",\r\n                                    0,\r\n                                    if (isDiningInSelected) 1 else 0\r\n                                )\r\n                                bucketAdapter.removeItem(pos)\r\n                                bucketDataList.removeAt(pos)\r\n                                // cart size\r\n                                val cartSize = bucketDataList.size\r\n                                tvMyCart.text =\r\n                                    \"My Cart (${cartSize} ${if (cartSize == 1) \"Item\" else \"Items\"})\"\r\n                                // calling onbackpress when cart size is 0\r\n                                if (cartSize < 1) {\r\n                                    onBackPressed()\r\n                                }\r\n                                calculateFooterSection(bucketDataList)\r\n\r\n                                if (Config.isCouponApplied && Config.isCouponDiscountType == couponBuyGet\r\n                                    && Config.isCouponMenuId == bucketData.menuID\r\n                                ) {\r\n                                    ivCouponCross.performClick()\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                bucketAdapter = BucketAdapter(listener)\r\n                bucketDataList.clear()\r\n                serviceDetails = res.data!!.serviceDetails!!\r\n                for (i in res.data!!.list!!.indices) {\r\n                    val bucketCartRes = MyBucketCartRes(\r\n                        res.data!!.serviceDetails!!.id!!,\r\n                        res.data!!.serviceDetails!!.title!!,\r\n                        res.data!!.list!![i].menu!!.foodType!!,\r\n                        res.data!!.list!![i].menu!!.isSpicy!!,\r\n                        res.data!!.list!![i].menu!!.id!!,\r\n                        res.data!!.list!![i].menu!!.title!!,\r\n                        res.data!!.list!![i].menu!!.categoryName!!,\r\n                        res.data!!.list!![i].menu!!.finalPrice!!,\r\n                        res.data!!.list!![i].menu!!.actualPrice!!,\r\n                        res.data!!.list!![i].menu!!.point!!,\r\n                        res.data!!.list!![i].menu!!.preparingTime!!,\r\n                        res.data!!.list!![i].qty!!,\r\n                        res.data!!.list!![i].menu!!.tax!!.toDouble(),\r\n                        res.data!!.list!![i].menu!!.currency!!,\r\n                        res.data!!.serviceDetails!!.currencyStr!!,\r\n                        res.data!!.serviceDetails!!.offers!![i].menuId!!,\r\n                        res.data!!.serviceDetails!!.offers!![i].couponCode!!.trim(),\r\n                        res.data!!.serviceDetails!!.offers!![i].discountType!!,\r\n                        res.data!!.serviceDetails!!.offers!![i].discountAmount!!,\r\n                        res.data!!.serviceDetails!!.offers!![i].buyQty!!,\r\n                        res.data!!.serviceDetails!!.offers!![i].getQty!!,\r\n                    )\r\n                    Log.e(\"NEwCreated\", gson.toJson(bucketCartRes))\r\n                    bucketDataList.add(bucketCartRes)\r\n                }\r\n            }\r\n\r\n\r\n\r\n            bucketAdapter.setBucketData(bucketDataList)\r\n            rvMyCart.apply {\r\n                layoutManager = LinearLayoutManager(this@MyBucketActivity)\r\n                adapter = bucketAdapter\r\n            }\r\n            calculateFooterSection(bucketDataList)\r\n\r\n            if (SystemClock.elapsedRealtime() - lastClickTime < 10000) return\r\n            lastClickTime = SystemClock.elapsedRealtime()\r\n            if (Config.isCouponApplied && Config.isCouponDiscountType == couponBuyGet && !Config.isCouponBuyGetSelected) {\r\n                val dialogCoupon = DialogToast(this@MyBucketActivity)\r\n                dialogCoupon.show()\r\n                dialogCoupon.holder!!.let {\r\n                    it.tvTitle.text = \"The Market Theory\"\r\n                    it.tvMessage.text = \"You have applied for buy ${Config.isCouponBuyQty} and \" +\r\n                            \"get ${Config.isCouponGetQty}. So do you want to add more qty?\"\r\n                    it.btnDialogCancel.text = \"No\"\r\n                    it.btnDialogLogout.text = \"Yes\"\r\n                    it.btnDialogCancel.setOnClickListener {\r\n                        dialogCoupon.dismiss()\r\n                    }\r\n                    it.btnDialogLogout.setOnClickListener {\r\n                        try {\r\n                            dialogCoupon.dismiss()\r\n                            Config.isCouponBuyGetSelected = true\r\n                            val totalQty = Config.isCouponBuyQty + Config.isCouponGetQty\r\n                            coupon@ for (i in bucketDataList.indices) {\r\n                                if (Config.isCouponMenuId == bucketDataList[i].menuID) {\r\n                                    bucketDataList[i].qty = totalQty\r\n                                    discountCouponTotal = bucketDataList[i].finalPrice\r\n                                    bucketAdapter.updatedQty(i, totalQty)\r\n                                    break@coupon\r\n                                }\r\n                            }\r\n                            calculateFooterSection(bucketDataList)\r\n                        } catch (e: Exception) {\r\n                            e.printStackTrace()\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            callServiceDetail()\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    private fun add30MinutesToCurrentTime() {\r\n        val cal = Calendar.getInstance()\r\n        cal.add(Calendar.MINUTE, 30)\r\n        tvMyBucketPickUpTime.text = PubFun.parseDate(\r\n            cal.time.toString(),\r\n            \"EEE MMM dd HH:mm:ss\",\r\n            Config.defaultTimeFormat\r\n        )\r\n        callApiForPickUpType(\r\n            \"PICKUP_NOW\",\r\n            \"\"\r\n        )\r\n    }\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    private fun calculateFooterSection(bucketDataList: ArrayList<MyBucketCartRes>) {\r\n        try {\r\n            subTotal = 0.0\r\n            totalTax = 0.0\r\n            totalPoints = 0\r\n            totalAmt = 0.0\r\n\r\n            for (i in bucketDataList.indices) {\r\n                //Calculate Sub Total\r\n                subTotal += bucketDataList[i].qty * bucketDataList[i].finalPrice\r\n\r\n                //Calculate Total Tax\r\n                //totalTax += (subTotal * bucketDataList[i].tax) / 100\r\n\r\n                //Calculate Total Points\r\n                totalPoints += bucketDataList[i].qty * bucketDataList[i].point\r\n            }\r\n\r\n            totalTax += (subTotal * bucketDataList[0].tax   ) / 100\r\n\r\n\r\n            /* if (Config.isCouponApplied) {\r\n                Log.e(\"coupon discountsss\", bucketDataList[0].offerDiscountAmount.toString())\r\n                coupon@ for (i in bucketDataList.indices) {\r\n\r\n//                    val discountAmt = bucketDataList[i].offerDiscountAmount\r\n//                    Log.e(\"coupon discount\", \"{$discountAmt}\")\r\n                    if (bucketDataList[i].offerCouponCode.lowercase(Locale.getDefault()) == Config.getSelectedCouponCode.lowercase(Locale.getDefault()))\r\n                    {\r\n                    if (bucketDataList[i].offerCouponCode.lowercase(Locale.getDefault()) == Config.getSelectedCouponCode.lowercase(\r\n                            Locale.getDefault()\r\n                        )\r\n                    ) {\r\n                        val discountAmt = bucketDataList[i].offerDiscountAmount\r\n                        Log.e(\"coupon discount\", \"{$discountAmt}\")\r\n                        discountCouponTotal = when (bucketDataList[i].offerDiscountType) {\r\n                            couponPercentage -> (subTotal * discountAmt) / 100\r\n                            couponFlat -> discountAmt.toDouble()\r\n                            else -> if (Config.isCouponBuyGetSelected) discountCouponTotal else 0.0\r\n                        }\r\n                        break@coupon\r\n                    }\r\n                }\r\n            }\r\n           */\r\n\r\n            //region Check for discounted coupon if any\r\n            if (Config.isCouponApplied) {\r\n                for (obj in serviceDetails.offers!!) {\r\n                    //      Log.e(\"coupon-list\", bucketDataList[i].offerCouponCode.toString())\r\n                    if (obj.couponCode != null) {\r\n                        if (obj.couponCode!!.lowercase(Locale.getDefault()) == Config.getSelectedCouponCode.lowercase(Locale.getDefault())) {\r\n                            val discountAmt = obj.discountAmount\r\n                            Log.e(\"coupon discount\", \"{$discountAmt}\")\r\n                            if (discountAmt != null) {\r\n                                discountCouponTotal = when (obj.discountType) {\r\n                                    couponPercentage -> (subTotal * discountAmt) / 100\r\n                                    couponFlat -> discountAmt.toDouble()\r\n                                    else -> if (Config.isCouponBuyGetSelected) discountCouponTotal else 0.0\r\n                                }\r\n                            }\r\n                            break\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            //endregion\r\n\r\n            //Setting Sub Total Amount\r\n            tvSubtotal.text =\r\n                bucketDataList[0].currency + if (subTotal == 0.0) \"0.00\" else numberFormat.format(\r\n                    subTotal\r\n                )\r\n\r\n            //Discount Coupon\r\n            tvCouponDiscount.text = \"-${bucketDataList[0].currency}\" +\r\n                    numberFormat.format(discountCouponTotal)\r\n\r\n            //Setting Tax Amount\r\n            tvtax.text =\r\n                bucketDataList[0].currency + if (totalTax == 0.0) \"0.00\" else numberFormat.format(\r\n                    totalTax\r\n                )\r\n\r\n            //Setting Total Amount = Sub Total Amount + Tax Amount\r\n            totalAmt = subTotal - discountCouponTotal + totalTax\r\n            tvMyBucketTotalAmount.text = \"${bucketDataList[0].currency}${\r\n                if (totalAmt == 0.0) \"0.00\" else numberFormat.format(totalAmt)\r\n            }\"\r\n\r\n            //Setting Total Item Point\r\n            tvMyBucketTotalOrderPoints.text = totalPoints.toString()\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        } finally {\r\n            isLoadedFirstTime = false\r\n        }\r\n    }\r\n\r\n    override fun onClick(v: View?) {\r\n        try {\r\n            when (v) {\r\n                ivBack -> onBackPressed()\r\n                tvAddMore -> {\r\n                    if (PubFun.isInternetConnection(this@MyBucketActivity)) {\r\n                        if (Config.isHomeGoCartClicked) {\r\n                            Config.isBucketAddMoreClicked = true\r\n                        }\r\n                        onBackPressed()\r\n                    } else {\r\n                        showMsgDialogAndProceed(Config.msgToastForInternet)\r\n                    }\r\n                }\r\n                tvMyBucketPickUpTime -> {\r\n                    openRangeTimePickerDialog()\r\n                }\r\n                btnMyBucketCartConfirmYourOrder -> {\r\n                    if (PubFun.isInternetConnection(this)) {\r\n                        if (Config.isMenuFragmentComingFrom == Config.isMenuFragmentComingFromBookingTable) {\r\n                            startRazorPayment()\r\n                        } else {\r\n                            // is selected type pick up now\r\n                            val currentTimess: String =\r\n                                SimpleDateFormat(\"hh:mm aa\", Locale.getDefault()).format(Date())\r\n                            if (selectedIndex == 1) {\r\n                                callCheckRestaurantTimeApi(\r\n                                    serviceId.toInt(),\r\n                                    currentTimess\r\n                                )\r\n                                return\r\n                            }\r\n\r\n                            callCheckRestaurantTimeApi(\r\n                                serviceId.toInt(),\r\n                                PubFun.parseDate(\r\n                                    tvMyBucketPickUpTime.text.toString().trim(),\r\n                                    Config.defaultTimeFormat,\r\n                                    Config.requestTimeFormat\r\n                                )!!\r\n\r\n                            )\r\n                        }\r\n                    } else {\r\n                        showMsgDialogAndProceed(Config.msgToastForInternet)\r\n                    }\r\n                }\r\n                clBucketPromoCode -> {\r\n                    if (PubFun.isInternetConnection(this@MyBucketActivity)) {\r\n                        Config.isCouponRedeemButtonVisible = true\r\n                        myRoomDatabase.daoConfig().apply {\r\n                            deleteConfigTableByField(Config.dbOfferListServiceId)\r\n                            insertConfigTable(\r\n                                TableConfig(\r\n                                    Config.dbOfferListServiceId,\r\n                                    serviceId\r\n                                )\r\n                            )\r\n                        }\r\n                        Config.isCouponOpeningFromBucket = true\r\n                        Config.isEventBottomBarClicked = false\r\n                        Config.isMyCouponClickedFromHome = true\r\n                        startActivity(Intent(this@MyBucketActivity, CouponActivity::class.java))\r\n                    } else {\r\n                        showMsgDialogAndProceed(Config.msgToastForInternet)\r\n                    }\r\n                }\r\n                ivCouponCross -> {\r\n                    Config.isCouponApplied = false\r\n                    Config.isCouponRedeem = false\r\n                    Config.getSelectedCouponCode = \"\"\r\n                    Config.isCouponDiscountType = 0\r\n                    Config.isCouponBuyQty = 0\r\n                    Config.isCouponGetQty = 0\r\n                    Config.isCouponMenuId = 0\r\n                    Config.isCouponBuyGetSelected = false\r\n                    discountCouponTotal = 0.0\r\n                    applyCouponChanges()\r\n                    calculateFooterSection(bucketDataList)\r\n                }\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    private fun openRangeTimePickerDialog() {\r\n        try {\r\n            val mCurrentTime = Calendar.getInstance()\r\n            mCurrentTime.add(Calendar.MINUTE, 30)\r\n            val hour = mCurrentTime[Calendar.HOUR_OF_DAY]\r\n            val minute = mCurrentTime[Calendar.MINUTE]\r\n            val mTimePicker = RangeTimePickerDialog(\r\n                this@MyBucketActivity,\r\n                2,\r\n                { timePicker, selectedHour, selectedMinute ->\r\n                    val mySelectedHrs: String = selectedHour.toString()\r\n                    val mySelectedMin: String =\r\n                        if (selectedMinute.toString().length == 1) \"0$selectedMinute\" else selectedMinute.toString()\r\n                    val mySelectedTime: String = \"$mySelectedHrs:$mySelectedMin\"\r\n                    tvMyBucketPickUpTime.text =\r\n                        PubFun.parseDate(mySelectedTime, \"HH:mm\", Config.defaultTimeFormat)\r\n//                    callApiForPickUpType(\r\n//                        \"SCHEDULE_PICKUP\",\r\n//                        tvMyBucketPickUpTime.text.toString().trim()\r\n//                    )\r\n                    callApiForPickUpType(\r\n                        \"SCHEDULE_PICKUP\", PubFun.parseDate(\r\n                            tvMyBucketPickUpTime.text.toString(),\r\n                            Config.defaultTimeFormat,\r\n                            Config.requestTimeFormat\r\n                        ).toString()\r\n                    )\r\n                }, hour, minute, false, true\r\n            ) //true = 24 hour time\r\n            mTimePicker.setTitle(\"Select Time\")\r\n            mTimePicker.setMin(hour, minute)\r\n            mTimePicker.show()\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    /*razor pay implementation*/\r\n    fun startRazorPayment() {\r\n\r\n        val activity = this\r\n\r\n        val co = Checkout()\r\n        co.setKeyID(getString(R.string.razorpay_live_key))\r\n        val currencyStr = bucketDataList[0].currencyStr\r\n\r\n        try {\r\n            val totalAmount = (totalAmt * 100).toInt()\r\n            val options = JSONObject()\r\n            options.put(\"currency\", currencyStr)\r\n            options.put(\"amount\", totalAmount)\r\n            options.put(\"name\", getString(R.string.app_name))\r\n\r\n            val preFill = JSONObject()\r\n            preFill.put(\"email\", prefs.getLoginModel().email)\r\n            preFill.put(\"contact\", prefs.getLoginModel().mobile)\r\n            preFill.put(\"name\", prefs.getLoginModel().name)\r\n            options.put(\"prefill\", preFill)\r\n\r\n            val retryObj = JSONObject()\r\n            retryObj.put(\"enabled\", false)\r\n            options.put(\"retry\", retryObj)\r\n            co.open(activity, options)\r\n\r\n        } catch (e: Exception) {\r\n            Toast.makeText(activity, \"Error in payment: \" + e.message, Toast.LENGTH_SHORT)\r\n                .show()\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    override fun onPaymentSuccess(p0: String?, p1: PaymentData?) {\r\n        callApiForConfirmOrder(p1!!)\r\n    }\r\n\r\n    override fun onPaymentError(p0: Int, p1: String?, p2: PaymentData?) {\r\n        // Toast.makeText(this, \"in payment faliour\", Toast.LENGTH_LONG).show()\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/themarkettheory/user/ui/restaurant/MyBucketActivity.kt b/app/src/main/java/com/themarkettheory/user/ui/restaurant/MyBucketActivity.kt
--- a/app/src/main/java/com/themarkettheory/user/ui/restaurant/MyBucketActivity.kt	(revision 22835b89a09487dd586150f30da0a89d4fc6fa82)
+++ b/app/src/main/java/com/themarkettheory/user/ui/restaurant/MyBucketActivity.kt	(date 1643172926764)
@@ -524,7 +524,7 @@
                         subTotal.toString(),
                         totalAmt.toString(),
                         "",
-                        "payment_id",  //paymentData.paymentId.toString(),
+                        "payment_id",//paymentData.paymentId.toString()
                         totalPoints.toString(),
                         edMyBucketSpecialInstaruction.text.toString().trim(),
                         currentTimess,
@@ -823,7 +823,7 @@
                 totalPoints += bucketDataList[i].qty * bucketDataList[i].point
             }
 
-            totalTax += (subTotal * bucketDataList[0].tax   ) / 100
+            totalTax += (subTotal * bucketDataList[0].tax) / 100
 
 
             /* if (Config.isCouponApplied) {
@@ -856,7 +856,10 @@
                 for (obj in serviceDetails.offers!!) {
                     //      Log.e("coupon-list", bucketDataList[i].offerCouponCode.toString())
                     if (obj.couponCode != null) {
-                        if (obj.couponCode!!.lowercase(Locale.getDefault()) == Config.getSelectedCouponCode.lowercase(Locale.getDefault())) {
+                        if (obj.couponCode!!.lowercase(Locale.getDefault()) == Config.getSelectedCouponCode.lowercase(
+                                Locale.getDefault()
+                            )
+                        ) {
                             val discountAmt = obj.discountAmount
                             Log.e("coupon discount", "{$discountAmt}")
                             if (discountAmt != null) {
Index: app/src/main/java/com/themarkettheory/user/viewmodel/LoginViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.themarkettheory.user.viewmodel\r\n\r\nimport android.app.Application\r\nimport android.util.Log\r\nimport androidx.lifecycle.MutableLiveData\r\nimport com.themarkettheory.user.newmodels.login.NewLoginResponse\r\nimport io.reactivex.android.schedulers.AndroidSchedulers\r\nimport io.reactivex.schedulers.Schedulers\r\n\r\n\r\nclass LoginViewModel(application: Application) : BaseViewModel(application) {\r\n\r\n//    @ViewModelInject\r\n//    constructor()\r\n\r\n    val isLoadingSocial = MutableLiveData<Boolean>()\r\n    val responseLogin = MutableLiveData<NewLoginResponse>()\r\n    val responseSocialLogin = MutableLiveData<NewLoginResponse>()\r\n\r\n    fun login(\r\n        email: String,\r\n        password: String,\r\n        login_via: String,\r\n        device_type: String,\r\n        device_token: String\r\n    ) {\r\n        Log.e(\"login data\",email)\r\n        Log.e(\"password\",password)\r\n        Log.e(\"login_via\",login_via)\r\n        Log.e(\"device_type\",device_type)\r\n        Log.e(\"device_token\",device_token)\r\n        isLoading.value = true\r\n        disposable = apiService\r\n            .login(email, password, login_via, device_type, device_token)\r\n            .subscribeOn(Schedulers.io())\r\n            .observeOn(AndroidSchedulers.mainThread())\r\n            .subscribe({ result ->\r\n                responseLogin.value = result\r\n                isLoading.value = false\r\n            }, { error ->\r\n                isLoading.value = false\r\n                errorMsg.value = error.message\r\n            })\r\n    }\r\n\r\n    fun social_login(\r\n        login_via: String?,\r\n        device_token: String?,\r\n        device_type: String?,\r\n        social_id: String?,\r\n        name: String?,\r\n        email: String?,\r\n        image: String?\r\n    ) {\r\n        login_via?.let { Log.e(\"login_via\", it) }\r\n        device_type?.let { Log.e(\"device_type\", it) }\r\n        device_token?.let { Log.e(\"device_token\", it) }\r\n        name?.let { Log.e(\"name\", it) }\r\n        email?.let { Log.e(\"email\", it) }\r\n        image?.let { Log.e(\"image\", it) }\r\n        social_id?.let { Log.e(\"social_id\", it) }\r\n\r\n\r\n\r\n        isLoadingSocial.value = true\r\n        disposable = apiService\r\n            .social_login(\r\n                login_via,\r\n                device_token,\r\n                device_type,\r\n                social_id,\r\n                name,\r\n                email,\r\n                image\r\n            )\r\n            .subscribeOn(Schedulers.io())\r\n            .observeOn(AndroidSchedulers.mainThread())\r\n            .subscribe({ result ->\r\n                responseSocialLogin.value = result\r\n                isLoadingSocial.value = false\r\n            }, { error -> isLoadingSocial.value = false })\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/themarkettheory/user/viewmodel/LoginViewModel.kt b/app/src/main/java/com/themarkettheory/user/viewmodel/LoginViewModel.kt
--- a/app/src/main/java/com/themarkettheory/user/viewmodel/LoginViewModel.kt	(revision 22835b89a09487dd586150f30da0a89d4fc6fa82)
+++ b/app/src/main/java/com/themarkettheory/user/viewmodel/LoginViewModel.kt	(date 1643179105811)
@@ -24,7 +24,7 @@
         device_type: String,
         device_token: String
     ) {
-        Log.e("login data",email)
+        Log.e("email",email)
         Log.e("password",password)
         Log.e("login_via",login_via)
         Log.e("device_type",device_type)
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources>\r\n    <string name=\"app_name\">The Market Theory</string>\r\n    <string name=\"sign_in\">Sign In</string>\r\n    <!--<string name=\"razorpay_sandbox_key\" translatable=\"false\">rzp_test_bcynZKYAWLD4r9</string>-->\r\n    <!--<string name=\"razorpay_sandbox_secret\" translatable=\"false\">myCL3gfHSdhot1Xt1rVoadHd</string>-->\r\n\r\n    <!--<string name=\"razorpay_live_secret\" translatable=\"false\">PRZaZHVUGncoFIZiOZqmeKwI</string>\r\n    <string name=\"razorpay_sandbox_key\" translatable=\"false\">rzp_test_M2FkmkrT6qthLV</string>-->\r\n\r\n    <!--<string name=\"razorpay_live_key\" translatable=\"false\">rzp_live_fgpIjUAcBmaTI5</string>--> <!--old live key-->\r\n\r\n<!--    <string name=\"razorpay_live_key\" translatable=\"false\">rzp_live_jt5nT7EvpCH8qD</string> &lt;!&ndash;Live Key&ndash;&gt;-->\r\n    <string name=\"razorpay_live_key\" translatable=\"false\">rzp_test_M2FkmkrT6qthLV</string> <!--Test / Dev key-->\r\n\r\n    <!--<string name=\"razorpay_sandbox_secret\" translatable=\"false\">inLqHKS95RxWOlj3buZwRtDn</string>\r\n    <string name=\"razorpay_live_secret\" translatable=\"false\">inLqHKS95RxWOlj3buZwRtDn</string>-->\r\n    <string name=\"with_your_social_network\">with your social network</string>\r\n    <string name=\"facebook\">Facebook</string>\r\n    <string name=\"instagram\">Instagram</string>\r\n    <string name=\"or_connect_with\">Or Connect with</string>\r\n    <string name=\"mobile_number_or_email_id\">Mobile Number or Email ID</string>\r\n    <string name=\"please_enter_email_or_phone\">Please enter mobile number or Email</string>\r\n    <string name=\"please_enter_phone\">Please enter mobile number</string>\r\n    <string name=\"please_enter_email\">Please enter Email</string>\r\n    <string name=\"password\">Current Password</string>\r\n    <string name=\"please_enter_password\">Please enter Password</string>\r\n    <string name=\"terms_and_conditions\"><u>Terms and Conditions</u></string>\r\n    <string name=\"don_t_have_an_account_register\"><font color=\"#77868F\">Don’t have an account?</font> <font color=\"#21c8cd\">Register</font></string>\r\n    <string name=\"recover_my_password\">Recover my password</string>\r\n    <string name=\"already_have_an_account_sign_in\"><font color=\"#77868F\">Already have an account?</font> <font color=\"#21c8cd\">Sign In</font></string>\r\n    <string name=\"email_id\">Email Id *</string>\r\n    <string name=\"mobile_number\">Mobile Number *</string>\r\n    <string name=\"next\">NEXT</string>\r\n    <string name=\"sign_up\">Sign Up</string>\r\n    <string name=\"profile\">Profile</string>\r\n    <string name=\"password_mandatory\">Password *</string>\r\n    <string name=\"verify_mobile_for_otp\">please enter verification OTP PIN sent to %s your mobile number</string>\r\n    <string name=\"enter_pin_here\">Enter PIN Here</string>\r\n    <string name=\"verify\">Verify OTP</string>\r\n    <string name=\"resend_otp\"><u>Resend OTP</u></string>\r\n    <string name=\"request_otp\"><u>Request OTP</u></string>\r\n    <string name=\"enter_full_name_and_date_of_birth_along_with_image_upload_or_take_picture\">Enter full name and date of birth along with image upload or take picture</string>\r\n    <string name=\"full_name_mandatory\">Full Name *</string>\r\n    <string name=\"dob\">DOB</string>\r\n    <string name=\"gender\">Gender</string>\r\n    <string name=\"male\">Male</string>\r\n    <string name=\"female\">Female</string>\r\n    <string name=\"zip_code_for_city_and_state\">ZIP Code for City and State *</string>\r\n    <string name=\"submit\">Submit</string>\r\n    <string name=\"needs_to_enable_your_location_services_for_this\">Needs to enable your location services for this</string>\r\n    <string name=\"search_city_or_locality\">Search City or Locality</string>\r\n    <string name=\"or\">OR</string>\r\n    <string name=\"use_my_current_location\">Use my current location</string>\r\n    <string name=\"recent\">Recent</string>\r\n    <string name=\"popular_cities\">Popular Cities</string>\r\n    <string name=\"close\">Close</string>\r\n    <string name=\"don_t_miss_out_on_the_nbest_deals\">Don\\'t miss out on the\\nbest deals!</string>\r\n    <string name=\"get_notified_of_super_saver_deals_and_noffers_to_your_favourite_locations\">Get notified of super saver deals and\\noffers to your favourite locations.</string>\r\n    <string name=\"turn_notification_on\">Turn notification on</string>\r\n    <!-- TODO: Remove or change this placeholder text -->\r\n    <string name=\"hello_blank_fragment\">Hello blank fragment</string>\r\n    <string name=\"recommended\">Recommended</string>\r\n    <string name=\"see_all\">See All</string>\r\n    <string name=\"restaurant\">Restaurant</string>\r\n    <string name=\"salon\">Salon</string>\r\n    <string name=\"gym\">Gym</string>\r\n    <string name=\"spa\">Spa</string>\r\n    <string name=\"medical\">Medical</string>\r\n    <string name=\"car_service\">Car Service</string>\r\n    <string name=\"trending_offers\">Trending Offers</string>\r\n    <string name=\"expires_in\">Expires in :</string>\r\n    <string name=\"nearest\">Nearest</string>\r\n    <string name=\"upcoming_events\">Upcoming Events</string>\r\n    <string name=\"popular_locations\">Popular Locations</string>\r\n    <string name=\"overview\">Overview</string>\r\n    <string name=\"booking\">Booking</string>\r\n    <string name=\"menu\">Menu</string>\r\n    <string name=\"reviews\">Reviews</string>\r\n    <string name=\"add_review\">Add Review</string>\r\n    <string name=\"report\">Report</string>\r\n    <string name=\"add\">+ Add</string>\r\n    <string name=\"added\">Added</string>\r\n    <string name=\"quick_bites\">Quick Bites</string>\r\n    <string name=\"select_time\">Select Time</string>\r\n    <string name=\"select_date\">Select Date</string>\r\n    <string name=\"select_no_of_guests\">Select No. of Guests</string>\r\n    <string name=\"child\">Child</string>\r\n    <string name=\"adult\">Adult</string>\r\n    <string name=\"special_request_if_any\">Special Request (if any)</string>\r\n    <string name=\"special_occasion_if_any\">Special Occasion(if any)</string>\r\n    <string name=\"select_special_occasion\">Select Special Occasion</string>\r\n    <string name=\"enter_message_if_any_special_request\">Enter message if any special request</string>\r\n    <string name=\"book_now\">Book Table</string>\r\n    <string name=\"continue_to_order\">Continue to Order</string>\r\n    <string name=\"write_review\">Write Review</string>\r\n    <string name=\"live_deal\">Live Deal</string>\r\n    <string name=\"see_all_photos_amp_video\"><![CDATA[See All Photos & Video]]></string>\r\n    <string name=\"_86_points\">POINTS</string>\r\n    <string name=\"restaurant_description\">Restaurant Description</string>\r\n    <string name=\"see_more\">SeeMore</string>\r\n    <string name=\"see_less\">SeeLess</string>\r\n    <string name=\"collect_stamps_amp_get_product_free\"><font color=\"#ffffff\">Collect Stamps &amp; Get Product</font> <font color=\"#02c8ce\">Free</font></string>\r\n    <string name=\"discounted_coupons\">Discounted Coupons</string>\r\n    <string name=\"cross_promotion_partners\">Cross Promotion Partners</string>\r\n    <string name=\"in_bucket\">In Bucket</string>\r\n    <string name=\"my_bucket\">My Bucket</string>\r\n    <string name=\"order_confirmation\">Order Confirmation</string>\r\n    <string name=\"time\">Time:</string>\r\n    <string name=\"apply_promo_code\">Apply Promo Code</string>\r\n    <string name=\"order_points\">Order Points</string>\r\n    <string name=\"confirm_your_order\">Confirm your Order</string>\r\n    <string name=\"bill_detail\">Bill Detail</string>\r\n    <string name=\"order_points_62\"><font color=\"#77868f\">Order Points :</font> <font color=\"#02C8CE\">62</font></string>\r\n    <string name=\"subtotal\">Subtotal</string>\r\n    <string name=\"cartsubtotal\">Sub Total: </string>\r\n    <string name=\"tax\">Tax: </string>\r\n    <string name=\"total\">Total</string>\r\n    <string name=\"if_you_liked_share_it_with_your_n_friends_or_guest\">If you liked, share it with your\\n friends or guest</string>\r\n    <string name=\"whatsapp\">Whatsapp</string>\r\n    <string name=\"email\">Email ID*</string>\r\n    <string name=\"rate_your_experience_at_restaurant\">Rate Your Experience</string>\r\n    <string name=\"customer_service\">Customer Service</string>\r\n    <string name=\"food_quality\">Food Quality</string>\r\n    <string name=\"restaurant_cleanliness\">Restaurant Cleanliness</string>\r\n    <string name=\"recommend_to_friends\">Recommend to Friends</string>\r\n    <string name=\"deals\">Deals</string>\r\n    <string name=\"hours\">Hours</string>\r\n    <string name=\"mins\">Mins</string>\r\n    <string name=\"secs\">Secs</string>\r\n    <string name=\"fix_meals\">Fix Meals</string>\r\n    <string name=\"my_points\">My Points</string>\r\n    <string name=\"available_points\">Available Points</string>\r\n    <string name=\"redeem_your_points_for_exciting_deals\">Redeem your points for exciting deals</string>\r\n    <string name=\"total_points\">Total Points</string>\r\n    <string name=\"redeem_now\">Redeem Now</string>\r\n    <string name=\"points\">Points</string>\r\n    <string name=\"description\">Description</string>\r\n    <string name=\"msg1\">Established fact that a reader will be distracte dreceive\\nSometimes by accident, sometimes on purpose (injected humour and the like)\\nThere are many variations of passages\\nValid until 31 Dec, 2019</string>\r\n    <string name=\"about_the_restaurant\">About the Restaurant</string>\r\n    <string name=\"facilites_amp_features\"><![CDATA[Facilites & Features]]></string>\r\n    <string name=\"valet_available\">Valet Available</string>\r\n    <string name=\"parking\">Parking</string>\r\n    <string name=\"take_away\">Take Away</string>\r\n    <string name=\"card_accepted\">Card Accepted</string>\r\n    <string name=\"amex_accepted\">Amex Accepted</string>\r\n    <string name=\"screening\">Screening</string>\r\n    <string name=\"tags\">Tags</string>\r\n    <string name=\"social\">Social</string>\r\n    <string name=\"msg2\">08:00 AM to 09:00 AM Breakfast\\n 12:00 PM to 03:00 PM Lunch\\n 07:30 PM to 10:00 PM Dinner</string>\r\n    <string name=\"redeem_points\">Redeem Points</string>\r\n    <string name=\"collect_stamps\">Collect Stamps</string>\r\n    <string name=\"_50_off_first_purchase\"><font color=\"#ffd230\">50%</font> <font color=\"#ffffff\">off first purchase</font></string>\r\n    <string name=\"coupon_code\">Coupon Code</string>\r\n    <string name=\"regular\">Regular</string>\r\n    <string name=\"buzzer\">Buzzer</string>\r\n    <string name=\"cross_promotion\">Cross Promotion</string>\r\n    <string name=\"popular\">Popular</string>\r\n    <string name=\"search\">Search</string>\r\n    <string name=\"alerts\">Alerts</string>\r\n    <string name=\"alert\">Alert</string>\r\n    <string name=\"coupon_codes\">Coupon Codes</string>\r\n    <string name=\"buy_1_get_one_free\"><font color=\"#ffffff\">Buy</font> <font color=\"#ffd230\">1</font> <font color=\"#ffffff\">get one free</font></string>\r\n    <string name=\"use_your_activated_coupons_for_your_nearby\"><font color=\"#ffffff\">Use your</font> <font color=\"#02C8CE\">activated coupons</font> <font color=\"#ffffff\">for your nearby</font></string>\r\n    <string name=\"coupons\">Coupons</string>\r\n    <string name=\"activate_now\">Activate Now</string>\r\n    <string name=\"activated\">Activated</string>\r\n    <string name=\"my_orders_appointment\">My Orders / Appointment</string>\r\n    <string name=\"my_orders\">My Orders</string>\r\n    <string name=\"my_booking\">My Booking</string>\r\n    <string name=\"my_booking_appointment\">My Bookings / Appointments</string>\r\n    <string name=\"refer_and_earn\">Refer and Earn</string>\r\n    <string name=\"switch_to_business_profile\">Switch to Business Profile</string>\r\n    <string name=\"rate_this_app\">Rate this App</string>\r\n    <string name=\"support_help\">Support / Help</string>\r\n    <string name=\"settings\">Settings</string>\r\n    <string name=\"sign_out\">Sign out</string>\r\n    <string name=\"notifications\">Notifications</string>\r\n    <string name=\"notification\">Notification</string>\r\n    <string name=\"points_history\">Points History</string>\r\n    <string name=\"all\">All</string>\r\n    <string name=\"earn\">Earn</string>\r\n    <string name=\"earn_now\">Earn Now</string>\r\n    <string name=\"spend\">Spend</string>\r\n    <string name=\"popular_events\">Popular Events</string>\r\n    <string name=\"events\">Events</string>\r\n    <string name=\"event_description\">Event Description</string>\r\n    <string name=\"participants\">Participants</string>\r\n    <string name=\"select_your_category\">Select your Category</string>\r\n    <string name=\"date\">Date:</string>\r\n    <string name=\"payment_method\">Payment Method</string>\r\n    <string name=\"proceed_to_pay\">Proceed to Pay</string>\r\n    <string name=\"select_option_to_pay\">Select option to pay</string>\r\n    <string name=\"my_cards\">My Cards</string>\r\n    <string name=\"saved_card\">Saved Card</string>\r\n    <string name=\"pay_securely\">Pay Securely</string>\r\n    <string name=\"new_card\">New Card</string>\r\n    <string name=\"debit_credit_card\">Debit/Credit Card</string>\r\n    <string name=\"expriry_year\">Expriry Year</string>\r\n    <string name=\"expriry_month\">Expriry Month</string>\r\n    <string name=\"other_payment_method\">Other Payment Method</string>\r\n    <string name=\"seats\">Seats</string>\r\n    <string name=\"status\">Status</string>\r\n    <string name=\"venue\">Venue</string>\r\n    <string name=\"ticket_code\">Ticket Code</string>\r\n    <string name=\"ticket_details\">Ticket Details</string>\r\n    <string name=\"copy\">Copy</string>\r\n    <string name=\"messenger\">Messenger</string>\r\n    <string name=\"more\">More</string>\r\n    <string name=\"invite_friends\">Invite Friends</string>\r\n    <string name=\"retail\">Retail</string>\r\n    <string name=\"bakery\">Bakery</string>\r\n    <string name=\"collect_stamp\">Collect Stamp</string>\r\n    <string name=\"select_plan\">Select Plan</string>\r\n    <string name=\"contact_us\">Contact Us</string>\r\n    <string name=\"order_detail\">Order Detail</string>\r\n    <string name=\"special_request\">Special Request</string>\r\n    <string name=\"cancel_booking\">Cancel Booking</string>\r\n    <string name=\"edit_photo\"><u>Edit Photo</u></string>\r\n    <string name=\"edit_profile\">Edit Profile</string>\r\n    <string name=\"edit_profile_update\">Update Profile</string>\r\n    <string name=\"name\">Name</string>\r\n    <string name=\"save_changes\">Save Changes</string>\r\n    <string name=\"details_optional\">Details(Optional)</string>\r\n    <string name=\"for_business_profile\">For Business Profile</string>\r\n    <string name=\"services\">Services</string>\r\n    <string name=\"select_services_for\">Select Services For</string>\r\n    <string name=\"men\">Men</string>\r\n    <string name=\"women\">Women</string>\r\n    <string name=\"available_services\">Available services</string>\r\n    <string name=\"combo_pack\">Combo Pack</string>\r\n    <string name=\"select_specialist\">Select Specialist</string>\r\n    <string name=\"booking_information\">Booking Information</string>\r\n    <string name=\"select_and_continue\">Select and Continue</string>\r\n    <string name=\"checkout\">Checkout</string>\r\n    <string name=\"date_amp_time\"><![CDATA[Date & Time]]></string>\r\n    <string name=\"booking_details\">Booking details</string>\r\n    <string name=\"specialist\">Specialist</string>\r\n    <string name=\"packages\">Packages</string>\r\n    <string name=\"amenities\">Amenities</string>\r\n    <string name=\"product_details\">Product Details</string>\r\n    <string name=\"add_to_cart\">Add to Cart</string>\r\n    <string name=\"added_to_cart\">Added to Cart</string>\r\n    <!--<string name=\"google_key\">AIzaSyABGkxexMgUDwjNle_FsokJ_j6Aqvyu0tc</string>-->\r\n    <string name=\"google_key\">AIzaSyBXGQYyh1UlT229SHt3JyehDkBlZ-CCN78</string>\r\n    <string name=\"google_place_api_key\">AIzaSyB9l64Pb12pnkX7bqVwH57Q2DSsrRv_eo4</string>\r\n    <string name=\"googleAccountWebClientID\">250742114157-kkt1dtnp0997cqcokq4fujmgnp1thvm5.apps.googleusercontent.com</string>\r\n    <string name=\"googleApplicationID\">1:250742114157:android:20f78a555c7b2a6f4f3c64</string>\r\n    <string name=\"googleProjectID\">the-market-theory-09072021</string>\r\n    <string name=\"you_can_cancle_your_plan_at_any_time_n_one_time_payment\">You can cancel your plan at any time.\\n One time payment</string>\r\n    <string name=\"total_cost\">Total cost</string>\r\n    <string name=\"back_to_home_screen\">Back to Home Screen</string>\r\n    <string name=\"full_name\">Full Name</string>\r\n    <string name=\"facebook_app_id\">726933398179877</string>\r\n    <string name=\"fb_login_protocol_scheme\">fb726933398179877</string>\r\n    <string name=\"open\">Open</string>\r\n    <string name=\"enter_promo_code\">Enter Promo Code</string>\r\n    <string name=\"apply\">Apply</string>\r\n    <string name=\"promo_code\">Promo Code</string>\r\n    <string name=\"available_coupons\">Available coupons</string>\r\n    <string name=\"available_promo_code\">Available Promo code</string>\r\n    <string name=\"please_select_atleast_one_ticket\">Please select at least one ticket</string>\r\n    <string name=\"google\">Google</string>\r\n    <string name=\"are_you_sure\">Are you sure you want to sign out?</string>\r\n    <string name=\"change_password\">Change Password</string>\r\n    <string name=\"delete_account\">Delete Account</string>\r\n    <string name=\"selectdeliverylocation\">Select Delivery Location</string>\r\n    <string name=\"YourLocation\">Your Location</string>\r\n    <string name=\"ConfirmLocation\">Confirm Location</string>\r\n    <string name=\"CompleteAddress\">Complete Address</string>\r\n    <string name=\"Housenumber\">House number</string>\r\n    <string name=\"Floor\">Floor</string>\r\n    <string name=\"Tower_Block\">Tower/Block</string>\r\n    <string name=\"locationforlater\">Tag this location for later</string>\r\n    <string name=\"saveadddress\">Save Address</string>\r\n    <string name=\"update_address\">Update Address</string>\r\n    <string name=\"change\">Change</string>\r\n    <string name=\"myAddress\">My Address</string>\r\n    <string name=\"AddAddress\">Add Address</string>\r\n    <string name=\"edit\">Edit</string>\r\n    <string name=\"delete\">Delete</string>\r\n    <string name=\"home\">home</string>\r\n    <string name=\"work\">work</string>\r\n    <string name=\"office\">Office</string>\r\n    <string name=\"other\">other</string>\r\n    <string name=\"something_went_wrong\">Something went wrong</string>\r\n    <string name=\"special_instructions\">Special Instructions</string>\r\n    <string name=\"sorry_no_items_are_available\">Sorry! No Items are available</string>\r\n    <string name=\"special_instruction\">Special Instruction</string>\r\n    <string name=\"my_events\">My Events</string>\r\n    <string name=\"view_on_map\">View on Map</string>\r\n    <string name=\"add_details_here\">Add report here</string>\r\n    <string name=\"done\">Done</string>\r\n    <string name=\"confirm_password\">Confirm Password</string>\r\n    <string name=\"new_password\">New Password</string>\r\n    <string name=\"write_for_any_queries\">Write for any queries</string>\r\n    <string name=\"schedule_now\">Schedule Now</string>\r\n    <string name=\"select\">Select</string>\r\n    <string name=\"schedule_pickup_time\">Schedule Pickup Time</string>\r\n    <string name=\"pickup_time\">Pickup Time</string>\r\n    <string name=\"recover_password\">Recover Password</string>\r\n    <string name=\"my_coupons\">My Coupons</string>\r\n    <string name=\"schedule_pickup\">Schedule Pickup</string>\r\n    <string name=\"pickup_now\">Pickup Now</string>\r\n    <string name=\"checkout_privacy_policy\"><b><u>Checkout Privacy Policy</u></b></string>\r\n    <string name=\"privacy_policy\">Privacy Policy</string>\r\n    <string name=\"dine_in_only\"><u>Dine In Only</u></string>\r\n    <string name=\"explain_unusual_activity_or_service\">Explain unusual activity or service</string>\r\n    <string name=\"add_more\">+ Add More</string>\r\n    <string name=\"enter_otp\">Enter OTP</string>\r\n    <string name=\"otp_can_be_resend_in\">Didn\\'t receive the OTP?\\nRequest for a new one in %s seconds</string>\r\n    <string name=\"city_selection\">Want to see Offers Near you?</string>\r\n    <string name=\"live_deals_blink\">LIVE DEALS</string>\r\n    <string name=\"update\">Update</string>\r\n    <string name=\"connect_with\">connect with</string>\r\n    <string name=\"restaurant_desc_all\"><![CDATA[%s <font color=\\'#02C8CE\\'><b>See More</b></font>]]></string>\r\n    <string name=\"enter_mobile_number\">Enter Mobile Number</string>\r\n    <string name=\"status_colon\">Status:</string>\r\n    <string name=\"pre_order\">Pre Order</string>\r\n    <string name=\"favorite\">Favorite</string>\r\n    <string name=\"unusual_activity_please_report\"><u>Unusual activity please report</u></string>\r\n    <string name=\"coupon_detail\">Coupon Detail</string>\r\n    <string name=\"lorem_ipsum\">Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</string>\r\n    <string name=\"invite_n_earn\">Ask your friends to signup as a vendor<br />with your referral code and make an initial<br />point. Once done, each earn <font color='#02C8CE'>100</font> Points.</string>\r\n\r\n    <string name=\"points_text\"><![CDATA[<font color=\\'#02C8CE\\'>%s</font><font color=\\'#77868F\\'> Points</font>]]></string>\r\n    <string name=\"points_PointText\"><![CDATA[<font color=\\'#02C8CE\\'>Live</font><font color=\\'#ffffff\\'> Deals</font>]]></string>\r\n\r\n    <string name=\"coupon_max_offer_price\"><![CDATA[<font color=\\'#77868F\\'>Max Offer value up to</font><font color=\\'#EDD464\\'> Rs.%s</font>]]></string>\r\n\r\n    <string name=\"order_redeem_point\">Order Redeem Point</string>\r\n    <string name=\"live_deal_html\"><font color=\"#02C8CE\">Live</font> Deal</string>\r\n    <string name=\"live_deals\">Live Deals</string>\r\n    <string name=\"coupon_discount\">Coupon Discount</string>\r\n    <string name=\"enter_special_instructions\">Enter Special Instructions</string>\r\n    <string name=\"call\">Call</string>\r\n    <string name=\"dining_in\">Dining in</string>\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
--- a/app/src/main/res/values/strings.xml	(revision 22835b89a09487dd586150f30da0a89d4fc6fa82)
+++ b/app/src/main/res/values/strings.xml	(date 1643172926670)
@@ -9,8 +9,8 @@
 
     <!--<string name="razorpay_live_key" translatable="false">rzp_live_fgpIjUAcBmaTI5</string>--> <!--old live key-->
 
-<!--    <string name="razorpay_live_key" translatable="false">rzp_live_jt5nT7EvpCH8qD</string> &lt;!&ndash;Live Key&ndash;&gt;-->
-    <string name="razorpay_live_key" translatable="false">rzp_test_M2FkmkrT6qthLV</string> <!--Test / Dev key-->
+   <!-- <string name="razorpay_live_key" translatable="false">rzp_live_jt5nT7EvpCH8qD</string> --><!--Live Key-->
+     <string name="razorpay_live_key" translatable="false">rzp_test_M2FkmkrT6qthLV</string> <!--Test / Dev key-->
 
     <!--<string name="razorpay_sandbox_secret" translatable="false">inLqHKS95RxWOlj3buZwRtDn</string>
     <string name="razorpay_live_secret" translatable="false">inLqHKS95RxWOlj3buZwRtDn</string>-->
Index: app/src/main/java/com/themarkettheory/user/network/ApiService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.themarkettheory.user.network\r\n\r\nimport android.util.Log\r\nimport androidx.databinding.library.BuildConfig\r\nimport com.google.gson.GsonBuilder\r\nimport com.themarkettheory.user.model.*\r\nimport com.themarkettheory.user.newmodels.NewGeneralRes\r\nimport com.themarkettheory.user.newmodels.addlocation.NewAddLocationRes\r\nimport com.themarkettheory.user.newmodels.addreview.AddReviewRes\r\nimport com.themarkettheory.user.newmodels.booking.NewBookingRes\r\nimport com.themarkettheory.user.newmodels.booking.bookingdetails.NewBookingDetailsRes\r\nimport com.themarkettheory.user.newmodels.bucketcart.GetCartNewRes\r\nimport com.themarkettheory.user.newmodels.bucketcart.confirm_order.NewConfirmOrderRes\r\nimport com.themarkettheory.user.newmodels.changepassword.ChangePasswordRes\r\nimport com.themarkettheory.user.newmodels.coupons.NewOfferListRes\r\nimport com.themarkettheory.user.newmodels.coupons.apply.CheckPromoCodeRes\r\nimport com.themarkettheory.user.newmodels.getcategories.NewGetCategoriesRes\r\nimport com.themarkettheory.user.newmodels.getrecentpopularlocation.NewGetRecentPopularLocation\r\nimport com.themarkettheory.user.newmodels.home.NewHomeRes\r\nimport com.themarkettheory.user.newmodels.livedeals.NewLiveDealRes\r\nimport com.themarkettheory.user.newmodels.login.NewLoginResponse\r\nimport com.themarkettheory.user.newmodels.login.NewResendOtpResponse\r\nimport com.themarkettheory.user.newmodels.map.NewServiceListRes\r\nimport com.themarkettheory.user.newmodels.menulist.NewMenuListRes\r\nimport com.themarkettheory.user.newmodels.myorders.MyOrdersNewRes\r\nimport com.themarkettheory.user.newmodels.mypoints.NewMyPointsRes\r\nimport com.themarkettheory.user.newmodels.mytablebookings.MyTableBookingNewRes\r\nimport com.themarkettheory.user.newmodels.orderconfirmation.GetNewOrderConfirmRes\r\nimport com.themarkettheory.user.newmodels.overview.NewServiceDetailsRes\r\nimport com.themarkettheory.user.newmodels.overview.allServiceImages.AllServiceImages\r\nimport com.themarkettheory.user.newmodels.pointhistory.NewPointHistoryRes\r\nimport com.themarkettheory.user.newmodels.review.NewReviewDataRes\r\nimport com.themarkettheory.user.newmodels.searchrestaurant.SearchRestaurantRes\r\nimport com.themarkettheory.user.newmodels.totalpoints.NewTotalPointRes\r\nimport com.themarkettheory.user.newmodels.viewallrecommended.NewAllRecommendedRes\r\nimport io.reactivex.Observable\r\nimport okhttp3.*\r\nimport okhttp3.logging.HttpLoggingInterceptor\r\nimport org.json.JSONArray\r\nimport retrofit2.Retrofit\r\nimport retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory\r\nimport retrofit2.converter.gson.GsonConverterFactory\r\nimport retrofit2.http.*\r\nimport java.util.concurrent.TimeUnit\r\nimport okhttp3.ResponseBody\r\nimport retrofit2.Call\r\n\r\n\r\ninterface ApiService {\r\n\r\n    companion object {\r\n         var BASE_URL = \"https://dev.themarkettheory.com/api/\"\r\n       // var BASE_URL = \"https://themarkettheory.com/api/v1/\"\r\n\r\n        fun create(token: String?): ApiService {\r\n            val client = OkHttpClient.Builder()\r\n                .connectTimeout(100, TimeUnit.SECONDS)\r\n                .readTimeout(100, TimeUnit.SECONDS)\r\n                .addInterceptor(object : Interceptor {\r\n                    override fun intercept(chain: Interceptor.Chain): Response {\r\n                        Log.e(\"Token\", token.toString())\r\n                        val newRequest = chain.request().newBuilder()\r\n                            .addHeader(\"Authorization\", \"Bearer $token\")\r\n                            .build()\r\n                        return chain.proceed(newRequest)\r\n                    }\r\n\r\n                }).build()\r\n\r\n            val okHttpBuilder = OkHttpClient.Builder()\r\n            okHttpBuilder.addInterceptor(HttpLoggingInterceptor().apply {\r\n                level =\r\n                    if (BuildConfig.DEBUG) HttpLoggingInterceptor.Level.BODY else HttpLoggingInterceptor.Level.NONE\r\n            })\r\n\r\n            val gson = GsonBuilder()\r\n                .setLenient()\r\n                .create()\r\n\r\n            val retrofit = Retrofit.Builder()\r\n                .addCallAdapterFactory(\r\n                    RxJava2CallAdapterFactory.create()\r\n                )\r\n                .addConverterFactory(\r\n                    GsonConverterFactory.create(gson)\r\n                )\r\n                .baseUrl(BASE_URL)\r\n                .client(client)\r\n                .build()\r\n\r\n            return retrofit.create(ApiService::class.java)\r\n        }\r\n    }\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"auth/login\")\r\n    fun login(\r\n        @Field(\"email\") email: String,\r\n        @Field(\"password\") password: String,\r\n        @Field(\"login_via\") login_via: String,\r\n        @Field(\"device_type\") device_type: String,\r\n        @Field(\"device_token\") device_token: String,\r\n//        @Field(\"name\") name: String?,\r\n//        @Field(\"profile_pic\") profile_pic: String?\r\n    ): Observable<NewLoginResponse>\r\n\r\n    /*\r\n       *\r\n     * */\r\n    @FormUrlEncoded\r\n    @POST(\"auth/login\")\r\n    fun social_login(\r\n        @Field(\"login_via\") login_via: String?,\r\n        @Field(\"device_token\") device_token: String?,\r\n        @Field(\"device_type\") device_type: String?,\r\n        @Field(\"social_id\") social_id: String?,\r\n        @Field(\"name\") name: String?,\r\n        @Field(\"email\") email: String?,\r\n        @Field(\"profile_pic\") profile_pic: String?\r\n    ): Observable<NewLoginResponse>\r\n\r\n    /*@Field(\"facebook_token\") facebook_token: String?,\r\n    @Field(\"instagram_token\") instagram_token: String?,\r\n    @Field(\"google_token\") google_token: String?,*/\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"auth/check_email_mobile\")\r\n    fun check_email_mobile(\r\n        @Field(\"mobile\") mobile: String?,\r\n        @Field(\"country_code\") country_code: String?,\r\n        @Field(\"email\") email: String?,\r\n        @Field(\"is_edit\") is_edit: String?,\r\n        @Field(\"login_via\") login_via: String?,\r\n        @Field(\"password\") password: String?,\r\n        @Field(\"social_id\") social_id: String?,\r\n        @Field(\"profile_pic\") profile_pic: String?\r\n    ): Observable<NewLoginResponse>\r\n\r\n\r\n    @Multipart\r\n    @POST(\"auth/register\")\r\n    fun register(\r\n        @Part(\"email\") email: RequestBody,\r\n        @Part(\"mobile\") mobile: RequestBody,\r\n        @Part(\"country_code\") country_code: RequestBody,\r\n        @Part(\"name\") name: RequestBody,\r\n        @Part(\"zip\") zip: RequestBody,\r\n        @Part(\"device_token\") device_token: RequestBody,\r\n        @Part(\"device_type\") device_type: RequestBody,\r\n        @Part(\"login_via\") login_via: RequestBody,\r\n        @Part(\"dob\") dob: RequestBody,\r\n        @Part(\"gender\") gender: RequestBody,\r\n        @Part(\"password\") password: RequestBody,\r\n        @Part(\"social_id\") social_id: RequestBody,\r\n        @Part register: MultipartBody.Part?\r\n    ): Observable<LoginResponse>\r\n\r\n    @GET(\"profile\")\r\n    fun profile(): Observable<LoginResponse>\r\n\r\n    @GET(\"profile\")\r\n    fun profileNew(): Observable<NewLoginResponse>\r\n\r\n    @GET(\"account_status\")\r\n    fun accountStatus(): Observable<NewLoginResponse>\r\n\r\n    @GET(\"points_history\")\r\n    fun points_history(\r\n        @Query(\"get_point\") get_point: String?,\r\n        @Query(\"service_id\") service_id: String?\r\n    ): Observable<NewPointHistoryRes>\r\n\r\n    @GET(\"get_sub_categories/{id}\")\r\n    fun get_sub_categories(@Path(\"id\") id: String?): Observable<SubCategoriesResponse>\r\n\r\n    @Multipart\r\n    @POST(\"update_profile\")\r\n    fun update_profile(\r\n        @Part(\"email\") email: RequestBody,\r\n        @Part(\"name\") name: RequestBody,\r\n        @Part(\"mobile\") mobile: RequestBody,\r\n        @Part(\"country_code\") country_code: RequestBody,\r\n        @Part(\"gender\") gender: RequestBody,\r\n        @Part(\"dob\") dob: RequestBody,\r\n        @Part(\"zip\") zip: RequestBody,\r\n        @Part profile_image: MultipartBody.Part?\r\n    ): Observable<NewLoginResponse>\r\n\r\n    @GET(\"get_events\")\r\n    fun get_events(): Observable<GetEventsResponse>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"get_event_details\")\r\n    fun get_event_details(\r\n        @Field(\"event_id\") event_id: String?,\r\n        @Field(\"latitude\") latitude: String?,\r\n        @Field(\"longitude\") longitude: String?\r\n    ): Observable<EventDetailResponse>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"change_notification_status\")\r\n    fun change_notification_status(\r\n        @Field(\"notification_status\") notification_status: Int?,\r\n        @Field(\"remind_me\") remind_me: Int?\r\n    ): Observable<NewGeneralRes>\r\n\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"updatesettings\")\r\n    fun update_notification(\r\n        @Field(\"is_notification\") notification_status: Int?\r\n    ): Observable<NewGeneralRes>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"get_static_pages\")\r\n    fun get_static_pages(\r\n        @Field(\"type\") type: String\r\n    ): Observable<GetStaticPageResponse>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"favourite\")\r\n    fun favourite(\r\n        @Field(\"event_id\") event_id: String?\r\n    ): Observable<GeneralResponse>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"participate\")\r\n    fun participate(\r\n        @Field(\"event_id\") event_id: String?,\r\n        @Field(\"subtotal\") subtotal: String?,\r\n        @Field(\"tax_amount\") tax_amount: String?,\r\n        @Field(\"tax\") tax: String?,\r\n        @Field(\"discount_type\") discount_type: String?,\r\n        @Field(\"discount\") discount: String?,\r\n        @Field(\"total\") total: String?,\r\n        @Field(\"payment_id\") payment_id: String?,\r\n        @Field(\"offer_id\") offer_id: String?,\r\n        @Field(\"ticket\") ticket: JSONArray\r\n    ): Observable<CreateEventResponse>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"ticket_details\")\r\n    fun ticket_details(\r\n        @Field(\"order_id\") order_id: String?\r\n    ): Observable<GetTicketDetailResponse>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"service_list\")\r\n    fun service_list(\r\n        @Field(\"category\") category: String?,\r\n        @Field(\"sub_category\") sub_category: String?,\r\n        @Field(\"type\") type: String?,\r\n        @Field(\"food_type\") food_type: String?,\r\n        @Field(\"sort\") sort: String?,\r\n        @Field(\"is_favourite\") is_favourite: String?,\r\n        @Field(\"popular_location_id\") popular_location_id: String?\r\n    ): Observable<NewServiceListRes>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"service_details\")\r\n    fun service_details(\r\n        @Field(\"id\") id: String?,\r\n        @Field(\"latitude\") latitude: String,\r\n        @Field(\"longitude\") longitude: String\r\n    ): Observable<NewServiceDetailsRes>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"all_service_images\")\r\n    fun all_service_images(\r\n        @Field(\"id\") id: String?\r\n    ): Observable<AllServiceImages>\r\n\r\n//    @FormUrlEncoded\r\n//    @POST(\"menus\")\r\n//    fun menus(\r\n//        @Field(\"id\") id: String?\r\n//    ): Observable<GetMenuResponse>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"menu_list\")\r\n    fun menus(\r\n        @Field(\"id\") id: String?\r\n    ): Observable<NewMenuListRes>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"menus\")\r\n    fun retail_menus(\r\n        @Field(\"id\") id: String?\r\n    ): Observable<RetailMenuResponse>\r\n\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"add_review\")\r\n    fun add_review(\r\n        @Field(\"service_id\") service_id: Int?,\r\n        @Field(\"rating[0]\") rating0: Float,\r\n        @Field(\"rating[1]\") rating1: Float,\r\n        @Field(\"rating[2]\") rating2: Float,\r\n        @Field(\"rating[3]\") rating3: Float,\r\n        @Field(\"comment\") comment: String?\r\n    ): Observable<AddReviewRes>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"review\")\r\n    fun review(\r\n        @Field(\"id\") service_id: String?\r\n    ): Observable<NewReviewDataRes>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"pickup\")\r\n    fun pickup(\r\n        @Field(\"service_id\") service_id: String,\r\n        @Field(\"subtotal\") subtotal: String,\r\n        @Field(\"tax_amount\") tax_amount: String,\r\n        @Field(\"tax\") tax: String,\r\n        @Field(\"discount_type\") discount_type: String,\r\n        @Field(\"discount\") discount: String,\r\n        @Field(\"total\") total: String,\r\n        @Field(\"payment_id\") payment_id: String,\r\n        @Field(\"offer_id\") offer_id: String\r\n    ): Observable<GeneralResponse>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"favourite_services\")\r\n    fun favourite_services(\r\n        @Field(\"service_id\") service_id: String?\r\n    ): Observable<NewGeneralRes>\r\n\r\n    @GET(\"get_categories\")\r\n    fun get_categories(): Observable<NewGetCategoriesRes>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"get_favourite_services\")\r\n    fun get_favourite_services(\r\n        @Field(\"category_id\") category_id: String?\r\n    ): Observable<GetFavoriteServicesResponse>\r\n\r\n    @POST(\"mybooking\")\r\n    fun myTableBooking(): Observable<MyTableBookingNewRes>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"home\")\r\n    fun home(\r\n        @Field(\"latitude\") latitude: String,\r\n        @Field(\"longitude\") longitude: String\r\n    ): Observable<NewHomeRes>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"auth/otp_verification\")\r\n    fun otp_verification(\r\n        @Field(\"mobile\") mobile: String?,\r\n        @Field(\"otp\") otp: String?,\r\n        @Field(\"country_code\") country_code: String\r\n    ): Observable<NewLoginResponse>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"auth/resend_otp\")\r\n    fun resend_otp(\r\n        @Field(\"mobile\") mobile: String?,\r\n        @Field(\"country_code\") country_code: String\r\n    ): Observable<NewResendOtpResponse>\r\n\r\n    @GET(\"mypoints\")\r\n    fun mypoints(@Query(\"service_id\") service_id: String?): Observable<NewMyPointsRes>\r\n\r\n    @GET(\"total_points\")\r\n    fun total_points(\r\n        @Query(\"filter\") filter: String?,\r\n        @Query(\"service_id\") service_id: String?\r\n    ): Observable<NewTotalPointRes>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"services\")\r\n    fun saloon_spa_services(\r\n        @Field(\"id\") id: String?,\r\n        @Field(\"gender\") gender: String\r\n    ): Observable<SaloonSpaServicesResponse>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"book_saloon\")\r\n    fun book_saloon(\r\n        @Field(\"service_id\") service_id: String?,\r\n        @Field(\"subtotal\") subtotal: String?,\r\n        @Field(\"tax_amount\") tax_amount: String?,\r\n        @Field(\"tax\") tax: String?,\r\n        @Field(\"discount_type\") discount_type: String?,\r\n        @Field(\"discount\") discount: String?,\r\n        @Field(\"total\") total: String?,\r\n        @Field(\"payment_id\") payment_id: String?,\r\n        @Field(\"offer_id\") offer_id: String?,\r\n        @Field(\"services\") services: JSONArray,\r\n        @Field(\"specialist_id\") specialist_id: String?,\r\n        @Field(\"date\") date: String?,\r\n        @Field(\"time\") time: String?,\r\n        @Field(\"total_person\") total_person: String?,\r\n        @Field(\"adult\") adult: String?,\r\n        @Field(\"child\") child: String?,\r\n        @Field(\"occasion_id\") occasion_id: String?,\r\n        @Field(\"special_instruction\") special_instruction: String?\r\n    ): Observable<BookSaloonResponse>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"book_table\")\r\n    fun book_table(\r\n        @Field(\"service_id\") service_id: String?,\r\n        @Field(\"date\") date: String?,\r\n        @Field(\"time\") time: String?,\r\n        @Field(\"total_person\") total_person: String?,\r\n        @Field(\"adult\") adult: String?,\r\n        @Field(\"child\") child: String?,\r\n        @Field(\"occasion_id\") occasion_id: String?,\r\n        @Field(\"special_request\") special_request: String?\r\n    ): Observable<NewBookingRes>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"gym_packages\")\r\n    fun gym_packages(@Field(\"id\") id: String?): Observable<GymPackagesResponse>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"retail_menu_detail\")\r\n    fun retail_menu_detail(@Field(\"id\") id: String?): Observable<RetailMenuDetailResponse>\r\n\r\n    @GET(\"my_orders\")\r\n    fun my_orders(): Observable<MyOrdersNewRes>\r\n\r\n    @GET(\"occations\")\r\n    fun occations(): Observable<OccationsResponse>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"my_order_details\")\r\n    fun my_order_details(@Field(\"id\") id: String?): Observable<OrderDetailResponse>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"my_order_details\")\r\n    fun my_order_details_new(@Field(\"id\") id: String?): Observable<GetNewOrderConfirmRes>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"cancel_order\")\r\n    fun cancelOrder(\r\n        @Field(\"id\") id: String?,\r\n        @Field(\"reason\") reason: String?\r\n    ): Observable<NewGeneralRes>\r\n\r\n    /*@GET(\"view_all_event\")\r\n    fun view_all_event(): Observable<AllEventResponse>*/\r\n\r\n    @POST(\"view_all_recommanded\")\r\n    fun view_all_recommanded(): Observable<NewAllRecommendedRes>\r\n\r\n    @POST(\"view_all_nearest\")\r\n    fun view_all_nearest(): Observable<AllNearestResponse>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"view_all_offers\")\r\n    fun view_all_offers(@Field(\"service_id\") service_id: String?): Observable<AllOfferResponse>\r\n\r\n    @GET(\"get_cart\")\r\n    fun get_cart(): Observable<GetCartResponse>\r\n\r\n    @GET(\"get_cart\")\r\n    fun get_cart(\r\n        @Query(\"booking_id\") booking_id: Int,\r\n        @Query(\"is_redeem\") is_redeem: Int,\r\n        @Query(\"is_live_deal\") is_live_deal: Int,\r\n        @Query(\"is_dine_in\") is_dine_in: Int\r\n    ): Observable<GetCartNewRes>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"add_cart\")\r\n    fun add_cart(\r\n        @Field(\"menu_id\") menu_id: String?,\r\n        @Field(\"qty\") qty: String?,\r\n        @Field(\"service_id\") service_id: String?\r\n    ): Observable<GeneralResponse>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"add_cart\")\r\n    fun add_cart(\r\n        @Field(\"menu_id\") menu_id: String?,\r\n        @Field(\"qty\") qty: String?,\r\n        @Field(\"service_id\") service_id: String?,\r\n        @Field(\"is_redeem\") is_redeem: String?\r\n    ): Observable<GeneralResponse>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"add_cart\")\r\n    fun menu_add_cart(\r\n        @Field(\"service_id\") service_id: String?,\r\n        @Field(\"dish_id\") dish_id: String?,\r\n        @Field(\"is_redeem\") is_redeem: String?,\r\n        @Field(\"qty\") qty: String?,\r\n        @Field(\"booking_id\") booking_id: String?,\r\n        @Field(\"is_live_deal\") is_live_deal: Int?,\r\n        @Field(\"is_dine_in\") is_dine_in: Int?\r\n    ): Observable<NewGeneralRes>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"offers_list\")\r\n    fun offers_list(\r\n        @Field(\"id\") id: String?,\r\n        @Field(\"type\") type: String?\r\n    ): Observable<NewOfferListRes>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"favourite_coupon\")\r\n    fun favourite_coupon(\r\n        @Field(\"offer_id\") offer_id: String\r\n    ): Observable<NewGeneralRes>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"coupons\")\r\n    fun coupons(@Field(\"type\") type: String?): Observable<OfferListResponse>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"check_promocode\")\r\n    fun check_promocode(\r\n        @Field(\"promocode\") promocode: String?,\r\n        @Field(\"id\") id: String?,\r\n        @Field(\"type\") type: String?\r\n    ): Observable<CheckPromoCodeResponse>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"check_promocode\")\r\n    fun check_promo_code_new(\r\n        @Field(\"id\") id: String?,\r\n        @Field(\"promocode\") promocode: String?,\r\n        @Field(\"booking_id\") booking_id: String?\r\n    ): Observable<CheckPromoCodeRes>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"add_address\")\r\n    fun add_address(\r\n        @Field(\"google_address\") google_address: String?,\r\n        @Field(\"house_number\") house_number: String?,\r\n        @Field(\"floor\") floor: String?,\r\n        @Field(\"tower\") tower: String?,\r\n        @Field(\"type\") type: String?,\r\n        @Field(\"is_default\") is_default: String?,\r\n        @Field(\"address_optional\") address_optional: String?,\r\n        @Field(\"latitude\") latitude: String?,\r\n        @Field(\"longitude\") longitude: String?\r\n    ): Observable<GeneralResponse>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"edit_address\")\r\n    fun edit_address(\r\n        @Field(\"google_address\") google_address: String?,\r\n        @Field(\"house_number\") house_number: String?,\r\n        @Field(\"floor\") floor: String?,\r\n        @Field(\"tower\") tower: String?,\r\n        @Field(\"type\") type: String?,\r\n        @Field(\"is_default\") is_default: String?,\r\n        @Field(\"address_optional\") address_optional: String?,\r\n        @Field(\"latitude\") latitude: String?,\r\n        @Field(\"longitude\") longitude: String?,\r\n        @Field(\"id\") id: String?\r\n    ): Observable<GeneralResponse>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"delete_address\")\r\n    fun delete_address(@Field(\"id\") id: String?): Observable<GeneralResponse>\r\n\r\n    @GET(\"addresses\")\r\n    fun addresses(): Observable<GetAddressListResponse>\r\n\r\n    @GET(\"stamps\")\r\n    fun stamps(@Query(\"service_id\") service_id: String?): Observable<GetStampsResponse>\r\n\r\n    @GET(\"auth/countries\")\r\n    fun countries(): Observable<CountryListResponse>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"live_deals\")\r\n    fun live_deals(@Field(\"id\") id: String?): Observable<NewLiveDealRes>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"pickup\")\r\n    fun pickup(\r\n        @Field(\"service_id\") service_id: String?,\r\n        @Field(\"subtotal\") subtotal: String?,\r\n        @Field(\"tax_amount\") tax_amount: String?,\r\n        @Field(\"tax\") tax: String?,\r\n        @Field(\"discount_type\") discount_type: String?,\r\n        @Field(\"discount\") discount: String?,\r\n        @Field(\"total\") total: String?,\r\n        @Field(\"payment_id\") payment_id: String?,\r\n        @Field(\"offer_id\") offer_id: String?,\r\n        @Field(\"orders\") orders: JSONArray?,\r\n        @Field(\"points\") points: String?,\r\n        @Field(\"special_instruction\") special_instruction: String?,\r\n        @Field(\"pickup_time\") pickup_time: String?\r\n    ): Observable<PickupResponse>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"check_service\")\r\n    fun check_service(\r\n        @Field(\"service_id\") service_id: String?,\r\n        @Field(\"subtotal\") subtotal: String?,\r\n        @Field(\"tax_amount\") tax_amount: String?,\r\n        @Field(\"tax\") tax: String?,\r\n        @Field(\"discount_type\") discount_type: String?,\r\n        @Field(\"discount\") discount: String?,\r\n        @Field(\"total\") total: String?,\r\n        @Field(\"payment_id\") payment_id: String?,\r\n        @Field(\"offer_id\") offer_id: String?,\r\n        @Field(\"orders\") orders: JSONArray?,\r\n        @Field(\"points\") points: String?,\r\n        @Field(\"special_instruction\") special_instruction: String?,\r\n        @Field(\"pickup_time\") pickup_time: String?\r\n    ): Observable<PickupResponse>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"pickup\")\r\n    fun pickup(\r\n        @Field(\"service_id\") service_id: String?,\r\n        @Field(\"items\") items: JSONArray?,\r\n        @Field(\"subtotal\") subtotal: String?,\r\n        @Field(\"total\") total: String?,\r\n        @Field(\"offer_id\") offer_id: String?,\r\n        @Field(\"payment_id\") payment_id: String?,\r\n        @Field(\"points\") points: String?,\r\n        @Field(\"special_instruction\") special_instruction: String?,\r\n        @Field(\"pickup_time\") pickup_time: String?,\r\n        @Field(\"tax\") tax: String?,\r\n        @Field(\"booking_id\") booking_id: String?\r\n    ): Observable<NewConfirmOrderRes>\r\n\r\n    // new add order api integration\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"pickup\")\r\n    fun addOrder(\r\n        @Field(\"service_id\") service_id: String?,\r\n        @Field(\"items\") items: String?,\r\n        @Field(\"subtotal\") subtotal: String?,\r\n        @Field(\"total\") total: String?,\r\n        @Field(\"offer_id\") offer_id: String?,\r\n        @Field(\"payment_id\") payment_id: String?,\r\n        @Field(\"points\") points: String?,\r\n        @Field(\"special_instruction\") special_instruction: String?,\r\n        @Field(\"pickup_time\") pickup_time: String?,\r\n        @Field(\"tax\") tax: String?,\r\n        @Field(\"booking_id\") booking_id: String?,\r\n    ): Observable<GetCartNewRes>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"pickup\")\r\n    fun reatilpickup(\r\n        @Field(\"service_id\") service_id: String?,\r\n        @Field(\"subtotal\") subtotal: String?,\r\n        @Field(\"tax_amount\") tax_amount: String?,\r\n        @Field(\"tax\") tax: String?,\r\n        @Field(\"discount_type\") discount_type: String?,\r\n        @Field(\"discount\") discount: String?,\r\n        @Field(\"total\") total: String?,\r\n        @Field(\"payment_id\") payment_id: String?,\r\n        @Field(\"offer_id\") offer_id: String?,\r\n        @Field(\"orders\") orders: JSONArray?,\r\n        @Field(\"points\") points: String?,\r\n        @Field(\"special_instruction\") special_instruction: String?,\r\n        @Field(\"sizeId\") sizeId: String?\r\n    ): Observable<PickupResponse>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"specialists\")\r\n    fun specialists(\r\n        @Field(\"id\") id: String?\r\n    ): Observable<SpecialistListResponse>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"total_points_details\")\r\n    fun total_points_details(\r\n        @Field(\"id\") id: String?\r\n    ): Observable<PointsDetailResponse>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"mybooking_details\")\r\n    fun mybooking_details(\r\n        @Field(\"id\") id: String?\r\n    ): Observable<NewBookingDetailsRes>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"cancel_table\")\r\n    fun cancel_table(\r\n        @Field(\"booking_id\") booking_id: String?\r\n    ): Observable<NewGeneralRes>\r\n\r\n    @GET(\"my_events\")\r\n    fun my_events(): Observable<MyEventsResponse>\r\n\r\n    @GET(\"get_places\")\r\n    fun get_places(): Observable<GetPlacesResponse>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"gym_enquiry\")\r\n    fun gym_enquiry(\r\n        @Field(\"package_id\") package_id: String?,\r\n        @Field(\"service_id\") service_id: String?,\r\n        @Field(\"person\") person: String?,\r\n        @Field(\"special_instruction\") special_instruction: String?\r\n    ): Observable<GeneralResponse>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"total_points_details_new\")\r\n    fun total_points_details_new(\r\n        @Field(\"service_id\") service_id: String?\r\n    ): Observable<TotalPointsDetailResponse>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"search_places\")\r\n    fun search_places(\r\n        @Field(\"search_str\") service_id: String?\r\n    ): Observable<AllNearestResponse>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"allsearch\")\r\n    fun all_search(\r\n        @Field(\"search\") search: String\r\n    ): Observable<SearchRestaurantRes>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"switch_to_business\")\r\n    fun switch_to_business(\r\n        @Field(\"name\") name: String?,\r\n        @Field(\"email\") email: String?,\r\n        @Field(\"mobile\") mobile: String?,\r\n        @Field(\"details\") details: String?\r\n    ): Observable<NewGeneralRes>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"report_service\")\r\n    fun report_service(\r\n        @Field(\"id\") id: String?,\r\n        @Field(\"description\") description: String?,\r\n        @Field(\"type\") type: String?,\r\n        @Field(\"question\") question: String?\r\n    ): Observable<NewGeneralRes>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"change_password\")\r\n    fun change_password(\r\n        @Field(\"new_password\") new_password: String?,\r\n        @Field(\"password\") password: String?\r\n    ): Observable<ChangePasswordRes>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"activate_coupon\")\r\n    fun activate_coupon(\r\n        @Field(\"offer_id\") offer_id: String?\r\n    ): Observable<GeneralResponse>\r\n\r\n    @POST(\"delete_account\")\r\n    fun delete_account(): Observable<DeleterResponse>\r\n\r\n    @GET(\"get_activated_coupons\")\r\n    fun get_activated_coupons(): Observable<GetActivatedCouponsResponse>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"auth/forget_password\")\r\n    fun forget_password(\r\n        @Field(\"email\") email: String?\r\n    ): Observable<NewGeneralRes>\r\n\r\n    @GET(\"get_notification\")\r\n    fun get_notifications(): Observable<NotificationListResponse>\r\n    // fun get_notifications(@Path(value = \"name\") name: String?): Observable<NotificationListResponse>\r\n\r\n    @GET(\"get_notification\")\r\n    fun get_notifications_offer(@Query(\"filter\") coupon: String?): Observable<NotificationOfferListResponse>\r\n\r\n    @GET(\"get_recent_popular_location\")\r\n    fun get_recent_popular_location(): Observable<NewGetRecentPopularLocation>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"add_location\")\r\n    fun add_location(\r\n        @Field(\"address\") address: String,\r\n        @Field(\"latitude\") latitude: String,\r\n        @Field(\"longitude\") longitude: String,\r\n        @Field(\"place_id\") place_id: String,\r\n        @Field(\"type\") type: String\r\n    ): Observable<NewAddLocationRes>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"special_instruction\")\r\n    fun add_special_instruction(\r\n        @Field(\"booking_id\") booking_id: String,\r\n        @Field(\"special_instruction\") special_instruction: String,\r\n        @Field(\"is_redeem\") is_redeem: String,\r\n        @Field(\"is_live_deal\") is_live_deal: Int\r\n    ): Observable<GetCartNewRes>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"book_type\")\r\n    fun schedule_pickup_type(\r\n        @Field(\"type\") type: String,\r\n        @Field(\"schedule_time\") schedule_time: String,\r\n        @Field(\"is_redeem\") is_redeem: Int,\r\n        @Field(\"is_live_deal\") is_live_deal: Int,\r\n        @Field(\"is_dine_in\") is_dine_in: Int\r\n    ): Observable<GetCartNewRes>\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"check_restaurant_time\")\r\n    fun checkRestaurantTime(\r\n        @Field(\"id\") id: Int?,\r\n        @Field(\"time\") time: String?\r\n    ): Observable<NewGeneralRes>\r\n\r\n    // check_restaurant_time , pickup\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/themarkettheory/user/network/ApiService.kt b/app/src/main/java/com/themarkettheory/user/network/ApiService.kt
--- a/app/src/main/java/com/themarkettheory/user/network/ApiService.kt	(revision 22835b89a09487dd586150f30da0a89d4fc6fa82)
+++ b/app/src/main/java/com/themarkettheory/user/network/ApiService.kt	(date 1643172926717)
@@ -49,8 +49,8 @@
 interface ApiService {
 
     companion object {
-         var BASE_URL = "https://dev.themarkettheory.com/api/"
-       // var BASE_URL = "https://themarkettheory.com/api/v1/"
+        //         var BASE_URL = "https://dev.themarkettheory.com/api/" //Development
+        var BASE_URL = "https://themarkettheory.com/api/v1/"  //Live
 
         fun create(token: String?): ApiService {
             val client = OkHttpClient.Builder()
