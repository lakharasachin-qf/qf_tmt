Index: app/src/main/java/com/themarkettheory/user/ui/restaurant/MyBucketActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.themarkettheory.user.ui.restaurant\r\n\r\nimport RangeTimePickerDialog\r\nimport android.annotation.SuppressLint\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.os.Looper\r\nimport android.os.SystemClock\r\nimport android.text.Editable\r\nimport android.text.TextWatcher\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.view.WindowManager\r\nimport android.widget.RadioButton\r\nimport android.widget.RadioGroup\r\nimport android.widget.Toast\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.google.android.material.textview.MaterialTextView\r\nimport com.razorpay.*\r\nimport com.themarkettheory.user.R\r\nimport com.themarkettheory.user.database.dbtables.TableConfig\r\nimport com.themarkettheory.user.helper.Config\r\nimport com.themarkettheory.user.helper.PubFun\r\nimport com.themarkettheory.user.helper.Utils\r\nimport com.themarkettheory.user.interfaces.ListClickListenerCart\r\nimport com.themarkettheory.user.newmodels.booking.bookingdetails.NewBookingDetailsRes\r\nimport com.themarkettheory.user.newmodels.bucketcart.GetCartNewRes\r\nimport com.themarkettheory.user.newmodels.bucketcart.ServiceDetails\r\nimport com.themarkettheory.user.ui.coupon.CouponActivity\r\nimport com.themarkettheory.user.ui.dialog.dialogToast.DialogToast\r\nimport com.themarkettheory.user.ui.main.activity.BaseActivity\r\nimport com.themarkettheory.user.viewmodel.CartViewModel\r\nimport com.themarkettheory.user.viewmodel.VendorDetailViewModel\r\nimport kotlinx.android.synthetic.main.activity_my_bucket.*\r\nimport kotlinx.android.synthetic.main.activity_my_bucket.rvMyCart\r\nimport kotlinx.android.synthetic.main.activity_my_bucket.tvAddMore\r\nimport kotlinx.android.synthetic.main.activity_my_bucket.tvAddress\r\nimport kotlinx.android.synthetic.main.activity_my_bucket.tvMyCart\r\nimport kotlinx.android.synthetic.main.activity_my_bucket.tvSubtotal\r\nimport kotlinx.android.synthetic.main.activity_my_bucket.tvVendorTitle\r\nimport kotlinx.android.synthetic.main.activity_my_bucket.tvtax\r\nimport kotlinx.android.synthetic.main.activity_mybucket_new.*\r\nimport kotlinx.android.synthetic.main.fragment_booking.*\r\nimport kotlinx.android.synthetic.main.toolbar.*\r\nimport org.json.JSONArray\r\nimport org.json.JSONObject\r\nimport java.text.DecimalFormat\r\nimport java.text.NumberFormat\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\nimport kotlin.collections.ArrayList\r\n\r\n\r\nclass MyBucketActivity : BaseActivity(), View.OnClickListener, PaymentResultWithDataListener {\r\n    // View Model cart\r\n    private lateinit var cartViewModel: CartViewModel\r\n    private lateinit var vendorDetailViewModel: VendorDetailViewModel\r\n\r\n    //Recycler View adapter object\r\n    private lateinit var bucketAdapter: BucketAdapter\r\n    var bucketDataList = ArrayList<MyBucketCartRes>()\r\n\r\n    //general\r\n    var isLoadedFirstTime = true\r\n    var totalAmt = 0.0\r\n    val numberFormat: NumberFormat = DecimalFormat(\"#0.00\")\r\n    var subTotal = 0.0\r\n    var totalTax = 0.0\r\n    var discountCouponTotal = 0.0\r\n    var totalPoints = 0\r\n    var bookingId = \"0\"\r\n    var serviceId = \"\"\r\n    var serviceName = \"\"\r\n    val pickupNowType = \"pickup now\"\r\n    private var isDiningInSelected = false\r\n\r\n    //discounted coupon\r\n    private val couponPercentage = 1\r\n    private val couponFlat = 2\r\n    private val couponBuyGet = 3\r\n    private var lastClickTime = 0L\r\n\r\n    // edit text delay\r\n    val delay: Long = 3000\r\n    var lastEditText: Long = 0\r\n    val handlerEditText = Handler(Looper.getMainLooper())\r\n\r\n    // for time\r\n    var formatHours = SimpleDateFormat(Config.defaultTimeFormat, Locale.getDefault())\r\n\r\n    var radioGroup: RadioGroup? = null\r\n    var pickupNowsss: RadioButton? = null\r\n\r\n    private lateinit var tvCouponCode: MaterialTextView\r\n    private lateinit var tvDiningIn: MaterialTextView\r\n\r\n    var selectedIndex: Int = 0\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_mybucket_new)\r\n        try {\r\n            // setting keyboard adjustment\r\n            window\r\n                .setSoftInputMode(\r\n                    WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN or\r\n                            WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN\r\n                )\r\n\r\n            tvCouponCode = findViewById(R.id.tvCouponCode)\r\n            tvDiningIn = findViewById(R.id.tvDiningIn)\r\n            init()\r\n            Log.e(\"Config.\",Config.getSelectedCouponCode)\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        try {\r\n\r\n            if (bucketDataList.size != 0) {\r\n                applyCouponChanges()\r\n                calculateFooterSection(bucketDataList)\r\n            }\r\n\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    override fun onBackPressed() {\r\n        /*super.onBackPressed()*/\r\n        if (PubFun.isInternetConnection(this@MyBucketActivity)) {\r\n            if (Config.isHomeGoCartClicked && !Config.isBucketAddMoreClicked) {\r\n                Config.isHomeGoCartClicked = false\r\n                finish()\r\n            } else {\r\n                if (Config.isMenuFragmentComingFrom.isEmpty()) {\r\n                    Config.isMenuFragmentComingFrom = Config.isMenuFragmentComingFromBucketCart\r\n                }\r\n                Config.isVideoPlay = false\r\n                startActivity(\r\n                    Intent(this@MyBucketActivity, VendorDetailActivity::class.java)\r\n                        .putExtra(\"category\", \"1\")\r\n                        .putExtra(\"serviceId\", serviceId)\r\n                        .putExtra(\"vendorTitle\", serviceName)\r\n                        .putExtra(\"selectPosition\", 2)\r\n                )\r\n            }\r\n            if (Config.isCouponComingFromMainActivity) {\r\n                Config.isCouponComingFromMainActivity = false\r\n                Config.isEventBottomBarClicked = true\r\n            }\r\n            if (Config.isCouponComingFromAllFragment) {\r\n                Config.isCouponComingFromAllFragment = false\r\n                Config.isCouponOpeningFromBucket = false\r\n                Config.isEventBottomBarClicked = true\r\n                Config.isMyCouponClickedFromHome = true\r\n            }\r\n            if (Config.isCouponComingFromOverviewViewAll) {\r\n                Config.isCouponComingFromOverviewViewAll = false\r\n                Config.isCouponOpeningFromBucket = false\r\n                Config.isEventBottomBarClicked = true\r\n                Config.isMyCouponClickedFromHome = true\r\n            }\r\n            if (Config.isCouponComingFromMenuFragment) {\r\n                Config.isCouponComingFromMenuFragment = false\r\n                Config.isCouponOpeningFromBucket = false\r\n                Config.isEventBottomBarClicked = true\r\n                Config.isMyCouponClickedFromHome = true\r\n                Config.isMyCouponClickedFromProfileMenu = true\r\n            }\r\n            finish()\r\n        } else {\r\n            showMsgDialogAndProceed(Config.msgToastForInternet)\r\n        }\r\n    }\r\n\r\n    private fun callGetCart(bookingID: Int) {\r\n        if (PubFun.isInternetConnection(this)) {\r\n            cartViewModel.get_cart(bookingID, 0, 0, 0)\r\n        } else {\r\n            showMsgDialogAndProceed(Config.msgToastForInternet)\r\n        }\r\n    }\r\n\r\n    private fun callServiceDetail() {\r\n        try {\r\n            if (PubFun.isInternetConnection(this@MyBucketActivity)) {\r\n                if (!Config.isPreOrder) {\r\n                    //if pre order is false then only call this API\r\n                    vendorDetailViewModel.service_details(Config.vendorDetailServiceId)\r\n                } else {\r\n                    tvDiningIn.visibility = View.GONE\r\n                }\r\n            } else {\r\n                tvDiningIn.visibility = View.GONE\r\n                showMsgDialogAndProceed(Config.msgToastForInternet)\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    private fun init() = try {\r\n        //view model intialization\r\n        vendorDetailViewModel = ViewModelProvider(this).get(VendorDetailViewModel::class.java)\r\n        cartViewModel = ViewModelProvider(this).get(CartViewModel::class.java)\r\n\r\n        // toolbar title\r\n        tvTitle.text = getString(R.string.my_bucket)\r\n\r\n\r\n        clMyBucketTable.visibility = View.GONE\r\n        constraintPickUp.visibility = View.VISIBLE\r\n//\r\n//            if (Config.isCouponApplied) {\r\n//                tvCouponCode.text = Config.getSelectedCouponCode\r\n//            }\r\n\r\n        applyCouponChanges()\r\n\r\n        //region For Booking Table for X person with date & time\r\n        if (Config.isMenuFragmentComingFrom == Config.isMenuFragmentComingFromBookingTable) {\r\n            val newBookingDetailsRes =\r\n                gson.fromJson(\r\n                    myRoomDatabase.daoConfig()\r\n                        .selectConfigTableByField(Config.dbNewBookingDetailRes)!!,\r\n                    NewBookingDetailsRes::class.java\r\n                )\r\n            Log.e(\"TableBBB0\", gson.toJson(newBookingDetailsRes.data))\r\n            //Getting booking Id\r\n            bookingId = newBookingDetailsRes.data!!.id!!.toString().trim()\r\n\r\n            //doing table section hidden\r\n            clMyBucketTable.visibility =\r\n                if (newBookingDetailsRes.data!!.adult!! > 0) View.VISIBLE else View.GONE\r\n            constraintPickUp.visibility =\r\n                if (newBookingDetailsRes.data!!.adult!! > 0) View.GONE else View.VISIBLE\r\n\r\n            //Booking Table for X People or Persons\r\n            tvMyBucketTable.text = \"Table for ${newBookingDetailsRes.data!!.total_person} \" +\r\n                    if (newBookingDetailsRes.data!!.total_person!! == 1) \"People\" else \"Persons\"\r\n\r\n            //Booking Date\r\n            tvMyBucketDateText.text = PubFun.parseDate(\r\n                newBookingDetailsRes.data!!.booking_date,\r\n                Config.requestDateFormat,\r\n                Config.defaultDateFormat\r\n            )\r\n\r\n            //Booking Time\r\n            tvOrderConfirmationTextValue.text = newBookingDetailsRes.data!!.booking_time!!.trim()\r\n        }\r\n        //endregion\r\n\r\n        // requesting api for cart detail\r\n        callGetCart(bookingId.toInt())\r\n\r\n//        //Loader\r\n        cartViewModel.isLoading.observe(this, {\r\n            try {\r\n                if (it!!) {\r\n                    Utils.showProgress(this@MyBucketActivity)\r\n                } else {\r\n                    Utils.hideProgress(this@MyBucketActivity)\r\n                }\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            }\r\n        })\r\n        //api response for cart details\r\n        cartViewModel.responseGetCartNew.observe(this, {\r\n            when (it.status!!) {\r\n                0 -> showMsgDialogAndProceed(it.message!!)\r\n                1 -> populateCartDetails(it!!)\r\n            }\r\n        })\r\n\r\n        cartViewModel.responseRemovePromocode.observe(this, {\r\n            when (it.status!!) {\r\n                0 -> showMsgDialogAndProceed(it.message!!)\r\n                1 -> it.message?.let { it1 -> showMsgDialogAndProceed(it1) }\r\n            }\r\n        })\r\n\r\n        // api response for order confirmation\r\n        cartViewModel.responseConfirmOrder.observe(this, {\r\n            when (it.status!!) {\r\n                0 -> showMsgDialogAndProceed(it.message!!)\r\n                1 -> {\r\n                    myRoomDatabase.daoConfig().deleteConfigTableByField(Config.dbOrderId)\r\n                    myRoomDatabase.daoConfig().insertConfigTable(\r\n                        TableConfig(\r\n                            Config.dbOrderId,\r\n                            it.orderId!!.toString().trim()\r\n                        )\r\n                    )\r\n                    startActivity(\r\n                        Intent(\r\n                            this@MyBucketActivity,\r\n                            OrderConfirmationActivity::class.java\r\n                        )\r\n                    )\r\n                    finish()\r\n                }\r\n            }\r\n        })\r\n\r\n        //Check Restaurant Time API response\r\n        vendorDetailViewModel.responseCheckRestaurantTime.observe(this, {\r\n            try {\r\n                when (it.status!!) {\r\n                    0 -> showMsgDialogAndProceed(it.message!!.trim())\r\n                    1 -> startRazorPayment()\r\n                }\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            }\r\n        })\r\n\r\n        //Click listener\r\n        ivBack.setOnClickListener(this)\r\n        tvAddMore.setOnClickListener(this)\r\n        tvMyBucketPickUpTime.setOnClickListener(this)\r\n        clBucketPromoCode.setOnClickListener(this)\r\n        ivCouponCross.setOnClickListener(this)\r\n\r\n\r\n        // setting up the text on picktime text\r\n        radioGroup = findViewById(R.id.radioGroup)\r\n\r\n        with(radioGroup) {\r\n            this?.setOnCheckedChangeListener(RadioGroup.OnCheckedChangeListener { group, checkedId ->\r\n                when (checkedId) {\r\n                    R.id.rbSchedulePickup -> {\r\n//                        if (isDiningInSelected) {\r\n//                            tvDiningIn.performClick()\r\n//                        }\r\n                        ivMyBucketClock.visibility = View.VISIBLE\r\n                        tvMyBucketPickUpTime.visibility = View.VISIBLE\r\n                        tvMyBucketPickUpTime.text = \"Select Schedule Time\"\r\n                        selectedIndex = 0\r\n                        if (tvMyBucketPickUpTime.text.toString() != \"Select Schedule Time\")\r\n                            callApiForPickUpType(\"SCHEDULE_PICKUP\", \"\")\r\n                        else\r\n                            callApiForPickUpType(\"SCHEDULE_PICKUP\", \"\")\r\n\r\n                    }\r\n                    R.id.rbPickupNow -> {\r\n//                        if (isDiningInSelected) {\r\n//                            tvDiningIn.performClick()\r\n//                        }\r\n                        ivMyBucketClock.visibility = View.GONE\r\n                        tvMyBucketPickUpTime.visibility = View.GONE\r\n                        selectedIndex = 1\r\n\r\n                        callApiForPickUpType(\"PICKUP_NOW\", \"\")\r\n                    }\r\n//                    // else -> {\r\n                }\r\n            })\r\n        }\r\n\r\n        vendorDetailViewModel.responseServiceDetail.observe(this, {\r\n            when (it.status!!) {\r\n                0 -> showMsgDialogAndProceed(it.message!!.trim())\r\n                1 -> {\r\n                    tvDiningIn.visibility = if (it.data!!.isTableBooking!! == 1)\r\n                        View.VISIBLE else View.GONE\r\n                }\r\n            }\r\n        })\r\n\r\n        tvDiningIn.setOnClickListener {\r\n//            if (!isDiningInSelected) {\r\n//                with(radioGroup) { this?.clearCheck() }\r\n//            }\r\n\r\n            tvDiningIn.setCompoundDrawablesRelativeWithIntrinsicBounds(\r\n                if (isDiningInSelected) R.drawable.ic_radio_button_unchecked else\r\n                    R.drawable.ic_radio_button_checked,\r\n                0,\r\n                0,\r\n                0\r\n            )\r\n\r\n\r\n            isDiningInSelected = !isDiningInSelected\r\n//            if(isDiningInSelected){\r\n//                selectedIndex = 2\r\n//\r\n//            }\r\n\r\n        }\r\n\r\n        // setting onclick listener to confirm your order button\r\n        btnMyBucketCartConfirmYourOrder.setOnClickListener(this)\r\n\r\n        val runnableEditText = Runnable {\r\n            //if (Config.isMenuFragmentComingFrom != Config.isMenuFragmentComingFromBookingTable) {\r\n\r\n            if (System.currentTimeMillis() > ((lastEditText + delay) - 500)) {\r\n                callApiForSpecialInstruction(\r\n                    \"0\",\r\n                    edMyBucketSpecialInstaruction.text.toString().trim()\r\n                )\r\n            }\r\n            //}\r\n        }\r\n        edMyBucketSpecialInstaruction.addTextChangedListener(object : TextWatcher {\r\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {\r\n            }\r\n\r\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\r\n                handlerEditText.removeCallbacks(runnableEditText)\r\n            }\r\n\r\n            override fun afterTextChanged(s: Editable?) {\r\n                if (s.toString().trim().isNotEmpty()) {\r\n                    lastEditText = System.currentTimeMillis()\r\n                    handlerEditText.postDelayed(runnableEditText, delay)\r\n                }\r\n            }\r\n\r\n        })\r\n    } catch (e: Exception) {\r\n        e.printStackTrace()\r\n    }\r\n\r\n    private fun applyCouponChanges() {\r\n        try {\r\n            /*Apply Coupon*/\r\n\r\n            ivCouponCross.visibility = if (Config.isCouponApplied) View.VISIBLE else View.GONE\r\n            tvMyBucketCouponDiscountText.visibility =\r\n                if (Config.isCouponApplied) View.VISIBLE else View.GONE\r\n            tvCouponDiscount.visibility = if (Config.isCouponApplied) View.VISIBLE else View.GONE\r\n\r\n            tvCouponCode.apply {\r\n                text =\r\n                    if (Config.isCouponApplied) Config.getSelectedCouponCode else getString(R.string.apply_promo_code)\r\n                setTextColor(\r\n                    if (Config.isCouponApplied)\r\n                        ContextCompat.getColor(\r\n                            this@MyBucketActivity,\r\n                            R.color.myRobinsEggBlue\r\n                        ) else ContextCompat.getColor(\r\n                        this@MyBucketActivity,\r\n                        R.color.myWhite\r\n                    )\r\n                )\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    private fun callCheckRestaurantTimeApi(id: Int, time: String) {\r\n        vendorDetailViewModel.checkRestaurantTime(id, time)\r\n    }\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    private fun showMsgDialogAndProceed(msg: String) {\r\n        try {\r\n            Utils.hideProgress(this)\r\n            val myDialog = DialogToast(this)\r\n            myDialog.show()\r\n            myDialog.holder?.let {\r\n                it.tvTitle.text = getString(R.string.my_bucket)\r\n                it.tvMessage.text = msg\r\n                it.btnDialogCancel.visibility = View.GONE\r\n                var i = Config.autoDialogDismissTimeInSec\r\n                it.btnDialogLogout.apply {\r\n                    visibility = View.GONE\r\n                    post(object : Runnable {\r\n                        override fun run() {\r\n                            if (i == 0) {\r\n                                myDialog.dismiss()\r\n                            } else {\r\n                                i--\r\n                                postDelayed(this, 1000)\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n                /*it.btnDialogLogout.text = \"OK\"\r\n                it.btnDialogLogout.setOnClickListener {\r\n                    myDialog.dismiss()\r\n                }*/\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    private fun callApiForSpecialInstruction(bookingID: String, specialInstructionMsg: String) {\r\n        try {\r\n            if (PubFun.isInternetConnection(this)) {\r\n                Log.e(\"Speical\", \"Request\")\r\n                cartViewModel.special_request(bookingID, specialInstructionMsg, \"0\", 0)\r\n            } else {\r\n                showMsgDialogAndProceed(Config.msgToastForInternet)\r\n            }\r\n\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n\r\n    private fun callApiForPickUpType(type: String, scheduleTime: String) {\r\n        Log.e(type, scheduleTime)\r\n        try {\r\n            if (PubFun.isInternetConnection(this)) {\r\n                cartViewModel.pickup_type(type, scheduleTime, 0, 0, 0)\r\n            } else {\r\n                showMsgDialogAndProceed(Config.msgToastForInternet)\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    private fun callApiForConfirmOrder(paymentData: PaymentData) {\r\n        try {\r\n            val menuArray = JSONArray()\r\n            for (i in bucketDataList.indices) {\r\n                val menuObject = JSONObject()\r\n                menuObject.put(\"menu_id\", bucketDataList[i].menuID.toString())\r\n                menuObject.put(\"qty\", bucketDataList[i].qty.toString())\r\n                menuObject.put(\"price\", bucketDataList[i].finalPrice.toString())\r\n                menuObject.put(\"points\", bucketDataList[i].point.toString())\r\n                menuObject.put(\"is_redeem\", \"\")\r\n                menuArray.put(menuObject)\r\n            }\r\n            if (PubFun.isInternetConnection(this)) {\r\n\r\n                val currentTimess: String =\r\n                    SimpleDateFormat(\"hh:mm aa\", Locale.getDefault()).format(Date())\r\n                if (selectedIndex == 1) {\r\n\r\n\r\n                    //change payment_id in live mode\r\n                    cartViewModel.confirmOrder(\r\n                        bucketDataList[0].serviceId.toString(),\r\n                        menuArray,\r\n                        subTotal.toString(),\r\n                        totalAmt.toString(),\r\n                        \"\",\r\n                        paymentData.paymentId.toString(), //\"payment_id\",\r\n                        totalPoints.toString(),\r\n                        edMyBucketSpecialInstaruction.text.toString().trim(),\r\n                        currentTimess,\r\n                        totalTax.toString(),\r\n                        bookingId\r\n                    )\r\n                    return\r\n                }\r\n                cartViewModel.confirmOrder(\r\n                    bucketDataList[0].serviceId.toString(),\r\n                    menuArray,\r\n                    subTotal.toString(),\r\n                    totalAmt.toString(),\r\n                    \"\",\r\n                    paymentData.paymentId.toString(),\r\n                    totalPoints.toString(),\r\n                    edMyBucketSpecialInstaruction.text.toString().trim(),\r\n                    tvMyBucketPickUpTime.text.toString().trim(),\r\n                    totalTax.toString(),\r\n                    bookingId\r\n                )\r\n            } else {\r\n                showMsgDialogAndProceed(Config.msgToastForInternet)\r\n            }\r\n\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    lateinit var serviceDetails: ServiceDetails\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    private fun populateCartDetails(res: GetCartNewRes) {\r\n        try {\r\n            Log.e(\"populateCartDetails\", \"populateCartDetails\");\r\n            Log.e(\"Cart Data\", gson.toJson(res))\r\n            if (res.data != null) {\r\n\r\n\r\n                //restaurant id\r\n                if (res.data!!.serviceDetails != null) {\r\n                    Config.vendorDetailServiceId = res.data!!.serviceDetails!!.id!!.toString()\r\n                    //restaurant name\r\n                    Config.vendorDetailServiceName = res.data!!.serviceDetails!!.title!!\r\n                    //restaurant title\r\n                    tvVendorTitle.text = res.data!!.serviceDetails!!.title!!\r\n                    // retaurant address\r\n                    tvAddress.text = res.data!!.serviceDetails!!.address!!\r\n                    // cart size\r\n                    val cartSize = res.data!!.list!!.size\r\n                    tvMyCart.text =\r\n                        \"My Cart (${cartSize} ${if (cartSize == 1) \"Item\" else \"Items\"})\"\r\n                    //Service ID\r\n                    serviceId = res.data!!.serviceDetails!!.id.toString().trim()\r\n                    //Service Name\r\n                    serviceName = res.data!!.serviceDetails!!.title!!.trim()\r\n                }\r\n\r\n\r\n                //tvCouponDiscount.text = res.data!!.couponData!!.discountAmount.toString()\r\n                // setting time +30 if pickup type is pickup now\r\n                if (Config.isMenuFragmentComingFrom != Config.isMenuFragmentComingFromBookingTable) {\r\n                    // setting up special instruction\r\n                    edMyBucketSpecialInstaruction.setText(\r\n                        res.data!!.booking!!.specialInstruction!!.toString().trim()\r\n                    )\r\n\r\n                    // setting up radio group selection\r\n                    radioGroup?.apply {\r\n                        check(\r\n                            getChildAt(\r\n                                if (res.data!!.booking!!.type!!.toString()\r\n                                        .lowercase(Locale.getDefault()) == pickupNowType\r\n                                ) 1 else 0\r\n                            ).id\r\n                        )\r\n                    }\r\n\r\n                    Log.e(\"30+\", \"yes\")\r\n                    if (res.data!!.booking!!.type!!.toString()\r\n                            .lowercase(Locale.getDefault()) == pickupNowType\r\n                    ) {\r\n                        //add30MinutesToCurrentTime()\r\n                        selectedIndex = 1\r\n                        callApiForPickUpType(\"PICKUP_NOW\", \"\")\r\n\r\n                    } else {\r\n                        // setting up booking time\r\n                        if (res.data!!.booking!!.bookingTime!!.isNotEmpty()) {\r\n                            tvMyBucketPickUpTime.text = PubFun.parseDate(\r\n                                res.data!!.booking!!.bookingTime!!,\r\n                                Config.requestTimeFormat,\r\n                                Config.defaultTimeFormat\r\n                            )\r\n                            callApiForPickUpType(\r\n                                \"SCHEDULE_PICKUP\", PubFun.parseDate(\r\n                                    tvMyBucketPickUpTime.text.toString(),\r\n                                    Config.defaultTimeFormat,\r\n                                    Config.requestTimeFormat\r\n                                ).toString()\r\n                            )\r\n                            // tvMyBucketPickUpTime.text.toString().trim()\r\n\r\n                        } else {\r\n//                            callApiForPickUpType(\r\n//                                \"SCHEDULE_PICKUP\",\r\n//                                \"\"\r\n//                            )\r\n                        }\r\n                        selectedIndex = 0\r\n                    }\r\n                }\r\n                //recycler view\r\n                val listener = object : ListClickListenerCart {\r\n                    override fun onClickListener(\r\n                        view: View,\r\n                        pos: Int,\r\n                        objects: Any,\r\n                        isItemAdded: Boolean\r\n                    ) {\r\n                        if (!isLoadedFirstTime) {\r\n                            val bucketData = objects as MyBucketCartRes\r\n                            bucketDataList[pos].qty = bucketData.qty\r\n                            bucketAdapter.notifyDataSetChanged()\r\n                            calculateFooterSection(bucketDataList)\r\n\r\n                            //calling api for adding and removing items\r\n                            if (bucketData.qty > 0) {\r\n                                vendorDetailViewModel.menu_add_cart(\r\n                                    bucketData.serviceId.toString(),\r\n                                    bucketData.menuID.toString(),\r\n                                    \"0\",\r\n                                    bucketData.qty.toString(),\r\n                                    \"0\",\r\n                                    0,\r\n                                    if (isDiningInSelected) 1 else 0\r\n                                )\r\n\r\n                                //region Coupon Logic for Bug 1 Get 1 free\r\n                                val totalQty = Config.isCouponBuyQty + Config.isCouponGetQty\r\n                                if (Config.isCouponApplied && Config.isCouponDiscountType == couponBuyGet\r\n                                    && Config.isCouponMenuId == bucketData.menuID\r\n                                ) {\r\n                                    Config.isCouponBuyGetSelected = true\r\n                                    if (bucketData.qty == totalQty) {\r\n                                        //Applied coupon discount\r\n                                        coupon@ for (i in bucketDataList.indices) {\r\n                                            if (Config.isCouponMenuId == bucketDataList[i].menuID) {\r\n                                                discountCouponTotal = bucketDataList[i].finalPrice\r\n                                                break@coupon\r\n                                            }\r\n                                        }\r\n                                    } else if (bucketData.qty < totalQty) {\r\n                                        //remove coupon discount\r\n                                        discountCouponTotal = 0.0\r\n                                    }\r\n                                    calculateFooterSection(bucketDataList)\r\n                                }\r\n                                //endregion\r\n                            } else {\r\n                                vendorDetailViewModel.menu_add_cart(\r\n                                    bucketData.serviceId.toString(),\r\n                                    bucketData.menuID.toString(),\r\n                                    \"0\",\r\n                                    \"0\",\r\n                                    \"0\",\r\n                                    0,\r\n                                    if (isDiningInSelected) 1 else 0\r\n                                )\r\n                                bucketAdapter.removeItem(pos)\r\n                                bucketDataList.removeAt(pos)\r\n                                // cart size\r\n                                val cartSize = bucketDataList.size\r\n                                tvMyCart.text =\r\n                                    \"My Cart (${cartSize} ${if (cartSize == 1) \"Item\" else \"Items\"})\"\r\n                                // calling onbackpress when cart size is 0\r\n                                if (cartSize < 1) {\r\n                                    Config.isCouponApplied = false\r\n                                    Config.isCouponRedeem = false\r\n                                    Config.getSelectedCouponCode = \"\"\r\n                                    Config.isCouponDiscountType = 0\r\n                                    Config.isCouponBuyQty = 0\r\n                                    Config.isCouponGetQty = 0\r\n                                    Config.isCouponMenuId = 0\r\n                                    Config.isCouponBuyGetSelected = false\r\n                                    discountCouponTotal = 0.0\r\n                                    applyCouponChanges()\r\n                                    calculateFooterSection(bucketDataList)\r\n                                    onBackPressed()\r\n                                }\r\n                                calculateFooterSection(bucketDataList)\r\n\r\n                                if (Config.isCouponApplied && Config.isCouponDiscountType == couponBuyGet\r\n                                    && Config.isCouponMenuId == bucketData.menuID\r\n                                ) {\r\n                                    ivCouponCross.performClick()\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                bucketAdapter = BucketAdapter(listener)\r\n                bucketDataList.clear()\r\n                serviceDetails = res.data!!.serviceDetails!!\r\n                for (i in res.data!!.list!!.indices) {\r\n                    val bucketCartRes = MyBucketCartRes(\r\n                        res.data!!.serviceDetails!!.id!!,\r\n                        res.data!!.serviceDetails!!.title!!,\r\n                        res.data!!.list!![i].menu!!.foodType!!,\r\n                        res.data!!.list!![i].menu!!.isSpicy!!,\r\n                        res.data!!.list!![i].menu!!.id!!,\r\n                        res.data!!.list!![i].menu!!.title!!,\r\n                        res.data!!.list!![i].menu!!.categoryName!!,\r\n                        res.data!!.list!![i].menu!!.finalPrice!!,\r\n                        res.data!!.list!![i].menu!!.actualPrice!!,\r\n                        res.data!!.list!![i].menu!!.point!!,\r\n                        res.data!!.list!![i].menu!!.preparingTime!!,\r\n                        res.data!!.list!![i].qty!!,\r\n                        res.data!!.list!![i].menu!!.tax!!.toDouble(),\r\n                        res.data!!.list!![i].menu!!.currency!!,\r\n                        res.data!!.serviceDetails!!.currencyStr!!,\r\n                        res.data!!.serviceDetails!!.offers!![i].menuId!!,\r\n                        res.data!!.serviceDetails!!.offers!![i].couponCode!!.trim(),\r\n                        res.data!!.serviceDetails!!.offers!![i].discountType!!,\r\n                        res.data!!.serviceDetails!!.offers!![i].discountAmount!!,\r\n                        res.data!!.serviceDetails!!.offers!![i].buyQty!!,\r\n                        res.data!!.serviceDetails!!.offers!![i].getQty!!,\r\n                    )\r\n                    Log.e(\"NEwCreated\", gson.toJson(bucketCartRes))\r\n                    bucketDataList.add(bucketCartRes)\r\n                }\r\n\r\n                if (res.data!!.couponData.couponCode!!.isNotEmpty()) {\r\n                    Config.isCouponRedeem = false\r\n                    Config.getSelectedCouponCode = res.data!!.couponData.couponCode!!.trim()\r\n                    Config.isCouponDiscountType = res.data!!.couponData.discountType!!\r\n                    Config.isCouponBuyQty = res.data!!.couponData.buyQty!!\r\n                    Config.isCouponGetQty = res.data!!.couponData.getQty!!\r\n                    Config.isCouponMenuId = res.data!!.couponData.menuId!!\r\n                    Config.isCouponApplied = true\r\n                    applyCouponChanges()\r\n                }\r\n            }\r\n\r\n\r\n\r\n            bucketAdapter.setBucketData(bucketDataList)\r\n            rvMyCart.apply {\r\n                layoutManager = LinearLayoutManager(this@MyBucketActivity)\r\n                adapter = bucketAdapter\r\n            }\r\n            calculateFooterSection(bucketDataList)\r\n\r\n            if (SystemClock.elapsedRealtime() - lastClickTime < 10000) return\r\n            lastClickTime = SystemClock.elapsedRealtime()\r\n            if (Config.isCouponApplied && Config.isCouponDiscountType == couponBuyGet && !Config.isCouponBuyGetSelected) {\r\n                val dialogCoupon = DialogToast(this@MyBucketActivity)\r\n                dialogCoupon.show()\r\n                dialogCoupon.holder!!.let {\r\n                    it.tvTitle.text = \"The Market Theory\"\r\n                    it.tvMessage.text = \"You have applied for buy ${Config.isCouponBuyQty} and \" +\r\n                            \"get ${Config.isCouponGetQty}. So do you want to add more qty?\"\r\n                    it.btnDialogCancel.text = \"No\"\r\n                    it.btnDialogLogout.text = \"Yes\"\r\n                    it.btnDialogCancel.setOnClickListener {\r\n                        dialogCoupon.dismiss()\r\n                    }\r\n                    it.btnDialogLogout.setOnClickListener {\r\n                        try {\r\n                            dialogCoupon.dismiss()\r\n                            Config.isCouponBuyGetSelected = true\r\n                            val totalQty = Config.isCouponBuyQty + Config.isCouponGetQty\r\n                            coupon@ for (i in bucketDataList.indices) {\r\n                                if (Config.isCouponMenuId == bucketDataList[i].menuID) {\r\n                                    bucketDataList[i].qty = totalQty\r\n                                    discountCouponTotal = bucketDataList[i].finalPrice\r\n                                    bucketAdapter.updatedQty(i, totalQty)\r\n                                    break@coupon\r\n                                }\r\n                            }\r\n                            calculateFooterSection(bucketDataList)\r\n                        } catch (e: Exception) {\r\n                            e.printStackTrace()\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            callServiceDetail()\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    private fun add30MinutesToCurrentTime() {\r\n        val cal = Calendar.getInstance()\r\n        cal.add(Calendar.MINUTE, 30)\r\n        tvMyBucketPickUpTime.text = PubFun.parseDate(\r\n            cal.time.toString(),\r\n            \"EEE MMM dd HH:mm:ss\",\r\n            Config.defaultTimeFormat\r\n        )\r\n        callApiForPickUpType(\r\n            \"PICKUP_NOW\",\r\n            \"\"\r\n        )\r\n    }\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    private fun calculateFooterSection(bucketDataList: ArrayList<MyBucketCartRes>) {\r\n        try {\r\n            subTotal = 0.0\r\n            totalTax = 0.0\r\n            totalPoints = 0\r\n            totalAmt = 0.0\r\n\r\n            for (i in bucketDataList.indices) {\r\n                //Calculate Sub Total\r\n                subTotal += bucketDataList[i].qty * bucketDataList[i].finalPrice\r\n\r\n                //Calculate Total Tax\r\n                //totalTax += (subTotal * bucketDataList[i].tax) / 100\r\n\r\n                //Calculate Total Points\r\n                totalPoints += bucketDataList[i].qty * bucketDataList[i].point\r\n            }\r\n\r\n            totalTax += (subTotal * bucketDataList[0].tax) / 100\r\n\r\n\r\n            //region Check for discounted coupon if any\r\n            if (Config.isCouponApplied) {\r\n                for (obj in serviceDetails.offers!!) {\r\n                    //Log.e(\"coupon-list\", bucketDataList[i].offerCouponCode.toString())\r\n                    if (obj.couponCode != null) {\r\n                        if (obj.couponCode!!.lowercase(Locale.getDefault()) == Config.getSelectedCouponCode.lowercase(\r\n                                Locale.getDefault()\r\n                            )\r\n                        ) {\r\n                            val discountAmt = obj.discountAmount\r\n                            Log.e(\"coupon discount\", \"{$discountAmt}\")\r\n                            if (discountAmt != null) {\r\n                                discountCouponTotal = when (obj.discountType) {\r\n                                    couponPercentage -> (subTotal * discountAmt) / 100\r\n                                    couponFlat -> discountAmt.toDouble()\r\n                                    else -> if (Config.isCouponBuyGetSelected) discountCouponTotal else 0.0\r\n                                }\r\n                            }\r\n                            break\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            //endregion\r\n\r\n            //Setting Sub Total Amount\r\n            tvSubtotal.text =\r\n                bucketDataList[0].currency + if (subTotal == 0.0) \"0.00\" else numberFormat.format(\r\n                    subTotal\r\n                )\r\n\r\n            //Discount Coupon\r\n            tvCouponDiscount.text = \"-${bucketDataList[0].currency}\" +\r\n                    numberFormat.format(discountCouponTotal)\r\n\r\n            //Setting Tax Amount\r\n            tvtax.text =\r\n                bucketDataList[0].currency + if (totalTax == 0.0) \"0.00\" else numberFormat.format(\r\n                    totalTax\r\n                )\r\n\r\n            //Setting Total Amount = Sub Total Amount + Tax Amount\r\n            totalAmt = subTotal - discountCouponTotal + totalTax\r\n            tvMyBucketTotalAmount.text = \"${bucketDataList[0].currency}${\r\n                if (totalAmt == 0.0) \"0.00\" else numberFormat.format(totalAmt)\r\n            }\"\r\n\r\n            //Setting Total Item Point\r\n            tvMyBucketTotalOrderPoints.text = totalPoints.toString()\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        } finally {\r\n            isLoadedFirstTime = false\r\n        }\r\n    }\r\n\r\n    override fun onClick(v: View?) {\r\n        try {\r\n            when (v) {\r\n                ivBack -> onBackPressed()\r\n                tvAddMore -> {\r\n                    if (PubFun.isInternetConnection(this@MyBucketActivity)) {\r\n                        if (Config.isHomeGoCartClicked) {\r\n                            Config.isBucketAddMoreClicked = true\r\n                        }\r\n                        onBackPressed()\r\n                    } else {\r\n                        showMsgDialogAndProceed(Config.msgToastForInternet)\r\n                    }\r\n                }\r\n                tvMyBucketPickUpTime -> {\r\n                    openRangeTimePickerDialog()\r\n                }\r\n                btnMyBucketCartConfirmYourOrder -> {\r\n                    if (PubFun.isInternetConnection(this)) {\r\n                        if (Config.isMenuFragmentComingFrom == Config.isMenuFragmentComingFromBookingTable) {\r\n                            startRazorPayment()\r\n                        } else {\r\n                            // is selected type pick up now\r\n                            val currentTimess: String =\r\n                                SimpleDateFormat(\"hh:mm aa\", Locale.getDefault()).format(Date())\r\n                            if (selectedIndex == 1) {\r\n                                callCheckRestaurantTimeApi(\r\n                                    serviceId.toInt(),\r\n                                    currentTimess\r\n                                )\r\n                                return\r\n                            }\r\n\r\n                            callCheckRestaurantTimeApi(\r\n                                serviceId.toInt(),\r\n                                PubFun.parseDate(\r\n                                    tvMyBucketPickUpTime.text.toString().trim(),\r\n                                    Config.defaultTimeFormat,\r\n                                    Config.requestTimeFormat\r\n                                )!!\r\n\r\n                            )\r\n                        }\r\n                    } else {\r\n                        showMsgDialogAndProceed(Config.msgToastForInternet)\r\n                    }\r\n                }\r\n                clBucketPromoCode -> {\r\n                    if (PubFun.isInternetConnection(this@MyBucketActivity)) {\r\n                        Config.isCouponRedeemButtonVisible = true\r\n                        myRoomDatabase.daoConfig().apply {\r\n                            deleteConfigTableByField(Config.dbOfferListServiceId)\r\n                            insertConfigTable(\r\n                                TableConfig(\r\n                                    Config.dbOfferListServiceId,\r\n                                    serviceId\r\n                                )\r\n                            )\r\n                        }\r\n                        Config.isCouponOpeningFromBucket = true\r\n                        Config.isEventBottomBarClicked = false\r\n                        Config.isMyCouponClickedFromHome = true\r\n                        startActivity(Intent(this@MyBucketActivity, CouponActivity::class.java))\r\n                    } else {\r\n                        showMsgDialogAndProceed(Config.msgToastForInternet)\r\n                    }\r\n                }\r\n                ivCouponCross -> {\r\n                    cartViewModel.removePromoCode(serviceId.toInt(),bookingId,Config.getSelectedCouponCode)\r\n                    Config.isCouponApplied = false\r\n                    Config.isCouponRedeem = false\r\n                    Config.getSelectedCouponCode = \"\"\r\n                    Config.isCouponDiscountType = 0\r\n                    Config.isCouponBuyQty = 0\r\n                    Config.isCouponGetQty = 0\r\n                    Config.isCouponMenuId = 0\r\n                    Config.isCouponBuyGetSelected = false\r\n                    discountCouponTotal = 0.0\r\n                    applyCouponChanges()\r\n                    calculateFooterSection(bucketDataList)\r\n                }\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    private fun openRangeTimePickerDialog() {\r\n        try {\r\n            val mCurrentTime = Calendar.getInstance()\r\n            mCurrentTime.add(Calendar.MINUTE, 30)\r\n            val hour = mCurrentTime[Calendar.HOUR_OF_DAY]\r\n            val minute = mCurrentTime[Calendar.MINUTE]\r\n            val mTimePicker = RangeTimePickerDialog(\r\n                this@MyBucketActivity,\r\n                2,\r\n                { timePicker, selectedHour, selectedMinute ->\r\n                    val mySelectedHrs: String = selectedHour.toString()\r\n                    val mySelectedMin: String =\r\n                        if (selectedMinute.toString().length == 1) \"0$selectedMinute\" else selectedMinute.toString()\r\n                    val mySelectedTime: String = \"$mySelectedHrs:$mySelectedMin\"\r\n                    tvMyBucketPickUpTime.text =\r\n                        PubFun.parseDate(mySelectedTime, \"HH:mm\", Config.defaultTimeFormat)\r\n//                    callApiForPickUpType(\r\n//                        \"SCHEDULE_PICKUP\",\r\n//                        tvMyBucketPickUpTime.text.toString().trim()\r\n//                    )\r\n                    callApiForPickUpType(\r\n                        \"SCHEDULE_PICKUP\", PubFun.parseDate(\r\n                            tvMyBucketPickUpTime.text.toString(),\r\n                            Config.defaultTimeFormat,\r\n                            Config.requestTimeFormat\r\n                        ).toString()\r\n                    )\r\n                }, hour, minute, false, true\r\n            ) //true = 24 hour time\r\n            mTimePicker.setTitle(\"Select Time\")\r\n            mTimePicker.setMin(hour, minute)\r\n            mTimePicker.show()\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    /*razor pay implementation*/\r\n    fun startRazorPayment() {\r\n\r\n        val activity = this\r\n\r\n        val co = Checkout()\r\n        co.setKeyID(getString(R.string.razorpay_live_key))\r\n        val currencyStr = bucketDataList[0].currencyStr\r\n\r\n        try {\r\n            val totalAmount = (totalAmt * 100).toInt()\r\n            val options = JSONObject()\r\n            options.put(\"currency\", currencyStr)\r\n            options.put(\"amount\", totalAmount)\r\n            options.put(\"name\", getString(R.string.app_name))\r\n\r\n            val preFill = JSONObject()\r\n            preFill.put(\"email\", prefs.getLoginModel().email)\r\n            preFill.put(\"contact\", prefs.getLoginModel().mobile)\r\n            preFill.put(\"name\", prefs.getLoginModel().name)\r\n            options.put(\"prefill\", preFill)\r\n\r\n            val retryObj = JSONObject()\r\n            retryObj.put(\"enabled\", false)\r\n            options.put(\"retry\", retryObj)\r\n            co.open(activity, options)\r\n\r\n        } catch (e: Exception) {\r\n            Toast.makeText(activity, \"Error in payment: \" + e.message, Toast.LENGTH_SHORT)\r\n                .show()\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    override fun onPaymentSuccess(p0: String?, p1: PaymentData?) {\r\n        callApiForConfirmOrder(p1!!)\r\n    }\r\n\r\n    override fun onPaymentError(p0: Int, p1: String?, p2: PaymentData?) {\r\n        // Toast.makeText(this, \"in payment faliour\", Toast.LENGTH_LONG).show()\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/themarkettheory/user/ui/restaurant/MyBucketActivity.kt b/app/src/main/java/com/themarkettheory/user/ui/restaurant/MyBucketActivity.kt
--- a/app/src/main/java/com/themarkettheory/user/ui/restaurant/MyBucketActivity.kt	(revision a76bab96113d2ac5aac0a03bf2a754ef748ea040)
+++ b/app/src/main/java/com/themarkettheory/user/ui/restaurant/MyBucketActivity.kt	(date 1643291049658)
@@ -112,7 +112,7 @@
             tvCouponCode = findViewById(R.id.tvCouponCode)
             tvDiningIn = findViewById(R.id.tvDiningIn)
             init()
-            Log.e("Config.",Config.getSelectedCouponCode)
+            Log.e("Config.", Config.getSelectedCouponCode)
         } catch (e: Exception) {
             e.printStackTrace()
         }
@@ -262,7 +262,7 @@
         // requesting api for cart detail
         callGetCart(bookingId.toInt())
 
-//        //Loader
+        //Loader
         cartViewModel.isLoading.observe(this, {
             try {
                 if (it!!) {
@@ -553,7 +553,7 @@
                         subTotal.toString(),
                         totalAmt.toString(),
                         "",
-                        paymentData.paymentId.toString(), //"payment_id",
+                        paymentData.paymentId.toString(),  //   "payment_id"
                         totalPoints.toString(),
                         edMyBucketSpecialInstaruction.text.toString().trim(),
                         currentTimess,
@@ -1009,7 +1009,11 @@
                     }
                 }
                 ivCouponCross -> {
-                    cartViewModel.removePromoCode(serviceId.toInt(),bookingId,Config.getSelectedCouponCode)
+                    cartViewModel.removePromoCode(
+                        serviceId.toInt(),
+                        bookingId,
+                        Config.getSelectedCouponCode
+                    )
                     Config.isCouponApplied = false
                     Config.isCouponRedeem = false
                     Config.getSelectedCouponCode = ""
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources>\r\n    <string name=\"app_name\">The Market Theory</string>\r\n    <string name=\"sign_in\">Sign In</string>\r\n\r\n\r\n<!--    <string name=\"razorpay_live_key\" translatable=\"false\">rzp_live_jt5nT7EvpCH8qD</string>  &lt;!&ndash;Live Key&ndash;&gt;-->\r\n      <string name=\"razorpay_live_key\" translatable=\"false\">rzp_test_M2FkmkrT6qthLV</string>\r\n\r\n\r\n    <string name=\"with_your_social_network\">with your social network</string>\r\n    <string name=\"facebook\">Facebook</string>\r\n    <string name=\"instagram\">Instagram</string>\r\n    <string name=\"or_connect_with\">Or Connect with</string>\r\n    <string name=\"mobile_number_or_email_id\">Mobile Number or Email ID</string>\r\n    <string name=\"please_enter_email_or_phone\">Please enter mobile number or Email</string>\r\n    <string name=\"please_enter_phone\">Please enter mobile number</string>\r\n    <string name=\"please_enter_email\">Please enter Email</string>\r\n    <string name=\"password\">Current Password</string>\r\n    <string name=\"please_enter_password\">Please enter Password</string>\r\n    <string name=\"terms_and_conditions\"><u>Terms and Conditions</u></string>\r\n    <string name=\"don_t_have_an_account_register\"><font color=\"#77868F\">Don’t have an account?</font> <font color=\"#21c8cd\">Register</font></string>\r\n    <string name=\"recover_my_password\">Recover my password</string>\r\n    <string name=\"already_have_an_account_sign_in\"><font color=\"#77868F\">Already have an account?</font> <font color=\"#21c8cd\">Sign In</font></string>\r\n    <string name=\"email_id\">Email Id *</string>\r\n    <string name=\"mobile_number\">Mobile Number *</string>\r\n    <string name=\"next\">NEXT</string>\r\n    <string name=\"sign_up\">Sign Up</string>\r\n    <string name=\"profile\">Profile</string>\r\n    <string name=\"password_mandatory\">Password *</string>\r\n    <string name=\"verify_mobile_for_otp\">please enter verification OTP PIN sent to %s your mobile number</string>\r\n    <string name=\"enter_pin_here\">Enter PIN Here</string>\r\n    <string name=\"verify\">Verify OTP</string>\r\n    <string name=\"resend_otp\"><u>Resend OTP</u></string>\r\n    <string name=\"request_otp\"><u>Request OTP</u></string>\r\n    <string name=\"enter_full_name_and_date_of_birth_along_with_image_upload_or_take_picture\">Enter full name and date of birth along with image upload or take picture</string>\r\n    <string name=\"full_name_mandatory\">Full Name *</string>\r\n    <string name=\"dob\">DOB</string>\r\n    <string name=\"gender\">Gender</string>\r\n    <string name=\"male\">Male</string>\r\n    <string name=\"female\">Female</string>\r\n    <string name=\"zip_code_for_city_and_state\">ZIP Code for City and State *</string>\r\n    <string name=\"submit\">Submit</string>\r\n    <string name=\"needs_to_enable_your_location_services_for_this\">Needs to enable your location services for this</string>\r\n    <string name=\"search_city_or_locality\">Search City or Locality</string>\r\n    <string name=\"or\">OR</string>\r\n    <string name=\"use_my_current_location\">Use my current location</string>\r\n    <string name=\"recent\">Recent</string>\r\n    <string name=\"popular_cities\">Popular Cities</string>\r\n    <string name=\"close\">Close</string>\r\n    <string name=\"don_t_miss_out_on_the_nbest_deals\">Don\\'t miss out on the\\nbest deals!</string>\r\n    <string name=\"get_notified_of_super_saver_deals_and_noffers_to_your_favourite_locations\">Get notified of super saver deals and\\noffers to your favourite locations.</string>\r\n    <string name=\"turn_notification_on\">Turn notification on</string>\r\n    <!-- TODO: Remove or change this placeholder text -->\r\n    <string name=\"hello_blank_fragment\">Hello blank fragment</string>\r\n    <string name=\"recommended\">Recommended</string>\r\n    <string name=\"see_all\">See All</string>\r\n    <string name=\"restaurant\">Restaurant</string>\r\n    <string name=\"salon\">Salon</string>\r\n    <string name=\"gym\">Gym</string>\r\n    <string name=\"spa\">Spa</string>\r\n    <string name=\"medical\">Medical</string>\r\n    <string name=\"car_service\">Car Service</string>\r\n    <string name=\"trending_offers\">Trending Offers</string>\r\n    <string name=\"expires_in\">Expires in :</string>\r\n    <string name=\"nearest\">Nearest</string>\r\n    <string name=\"upcoming_events\">Upcoming Events</string>\r\n    <string name=\"popular_locations\">Popular Locations</string>\r\n    <string name=\"overview\">Overview</string>\r\n    <string name=\"booking\">Booking</string>\r\n    <string name=\"menu\">Menu</string>\r\n    <string name=\"reviews\">Reviews</string>\r\n    <string name=\"add_review\">Add Review</string>\r\n    <string name=\"report\">Report</string>\r\n    <string name=\"add\">+ Add</string>\r\n    <string name=\"added\">Added</string>\r\n    <string name=\"quick_bites\">Quick Bites</string>\r\n    <string name=\"select_time\">Select Time</string>\r\n    <string name=\"select_date\">Select Date</string>\r\n    <string name=\"select_no_of_guests\">Select No. of Guests</string>\r\n    <string name=\"child\">Child</string>\r\n    <string name=\"adult\">Adult</string>\r\n    <string name=\"special_request_if_any\">Special Request (if any)</string>\r\n    <string name=\"special_occasion_if_any\">Special Occasion(if any)</string>\r\n    <string name=\"select_special_occasion\">Select Special Occasion</string>\r\n    <string name=\"enter_message_if_any_special_request\">Enter message if any special request</string>\r\n    <string name=\"book_now\">Book Table</string>\r\n    <string name=\"continue_to_order\">Continue to Order</string>\r\n    <string name=\"write_review\">Write Review</string>\r\n    <string name=\"live_deal\">Live Deal</string>\r\n    <string name=\"see_all_photos_amp_video\"><![CDATA[See All Photos & Video]]></string>\r\n    <string name=\"_86_points\">POINTS</string>\r\n    <string name=\"restaurant_description\">Restaurant Description</string>\r\n    <string name=\"see_more\">SeeMore</string>\r\n    <string name=\"see_less\">SeeLess</string>\r\n    <string name=\"collect_stamps_amp_get_product_free\"><font color=\"#ffffff\">Collect Stamps &amp; Get Product</font> <font color=\"#02c8ce\">Free</font></string>\r\n    <string name=\"discounted_coupons\">Discounted Coupons</string>\r\n    <string name=\"cross_promotion_partners\">Cross Promotion Partners</string>\r\n    <string name=\"in_bucket\">In Bucket</string>\r\n    <string name=\"my_bucket\">My Bucket</string>\r\n    <string name=\"order_confirmation\">Order Confirmation</string>\r\n    <string name=\"time\">Time:</string>\r\n    <string name=\"apply_promo_code\">Apply Promo Code</string>\r\n    <string name=\"order_points\">Order Points</string>\r\n    <string name=\"confirm_your_order\">Confirm your Order</string>\r\n    <string name=\"bill_detail\">Bill Detail</string>\r\n    <string name=\"order_points_62\"><font color=\"#77868f\">Order Points :</font> <font color=\"#02C8CE\">62</font></string>\r\n    <string name=\"subtotal\">Subtotal</string>\r\n    <string name=\"cartsubtotal\">Sub Total: </string>\r\n    <string name=\"tax\">Tax: </string>\r\n    <string name=\"total\">Total</string>\r\n    <string name=\"if_you_liked_share_it_with_your_n_friends_or_guest\">If you liked, share it with your\\n friends or guest</string>\r\n    <string name=\"whatsapp\">Whatsapp</string>\r\n    <string name=\"email\">Email ID*</string>\r\n    <string name=\"rate_your_experience_at_restaurant\">Rate Your Experience</string>\r\n    <string name=\"customer_service\">Customer Service</string>\r\n    <string name=\"food_quality\">Food Quality</string>\r\n    <string name=\"restaurant_cleanliness\">Restaurant Cleanliness</string>\r\n    <string name=\"recommend_to_friends\">Recommend to Friends</string>\r\n    <string name=\"deals\">Deals</string>\r\n    <string name=\"hours\">Hours</string>\r\n    <string name=\"mins\">Mins</string>\r\n    <string name=\"secs\">Secs</string>\r\n    <string name=\"fix_meals\">Fix Meals</string>\r\n    <string name=\"my_points\">My Points</string>\r\n    <string name=\"available_points\">Available Points</string>\r\n    <string name=\"redeem_your_points_for_exciting_deals\">Redeem your points for exciting deals</string>\r\n    <string name=\"total_points\">Total Points</string>\r\n    <string name=\"redeem_now\">Redeem Now</string>\r\n    <string name=\"points\">Points</string>\r\n    <string name=\"description\">Description</string>\r\n    <string name=\"msg1\">Established fact that a reader will be distracte dreceive\\nSometimes by accident, sometimes on purpose (injected humour and the like)\\nThere are many variations of passages\\nValid until 31 Dec, 2019</string>\r\n    <string name=\"about_the_restaurant\">About the Restaurant</string>\r\n    <string name=\"facilites_amp_features\"><![CDATA[Facilites & Features]]></string>\r\n    <string name=\"valet_available\">Valet Available</string>\r\n    <string name=\"parking\">Parking</string>\r\n    <string name=\"take_away\">Take Away</string>\r\n    <string name=\"card_accepted\">Card Accepted</string>\r\n    <string name=\"amex_accepted\">Amex Accepted</string>\r\n    <string name=\"screening\">Screening</string>\r\n    <string name=\"tags\">Tags</string>\r\n    <string name=\"social\">Social</string>\r\n    <string name=\"msg2\">08:00 AM to 09:00 AM Breakfast\\n 12:00 PM to 03:00 PM Lunch\\n 07:30 PM to 10:00 PM Dinner</string>\r\n    <string name=\"redeem_points\">Redeem Points</string>\r\n    <string name=\"collect_stamps\">Collect Stamps</string>\r\n    <string name=\"_50_off_first_purchase\"><font color=\"#ffd230\">50%</font> <font color=\"#ffffff\">off first purchase</font></string>\r\n    <string name=\"coupon_code\">Coupon Code</string>\r\n    <string name=\"regular\">Regular</string>\r\n    <string name=\"buzzer\">Buzzer</string>\r\n    <string name=\"cross_promotion\">Cross Promotion</string>\r\n    <string name=\"popular\">Popular</string>\r\n    <string name=\"search\">Search</string>\r\n    <string name=\"alerts\">Alerts</string>\r\n    <string name=\"alert\">Alert</string>\r\n    <string name=\"coupon_codes\">Coupon Codes</string>\r\n    <string name=\"buy_1_get_one_free\"><font color=\"#ffffff\">Buy</font> <font color=\"#ffd230\">1</font> <font color=\"#ffffff\">get one free</font></string>\r\n    <string name=\"use_your_activated_coupons_for_your_nearby\"><font color=\"#ffffff\">Use your</font> <font color=\"#02C8CE\">activated coupons</font> <font color=\"#ffffff\">for your nearby</font></string>\r\n    <string name=\"coupons\">Coupons</string>\r\n    <string name=\"activate_now\">Activate Now</string>\r\n    <string name=\"activated\">Activated</string>\r\n    <string name=\"my_orders_appointment\">My Orders / Appointment</string>\r\n    <string name=\"my_orders\">My Orders</string>\r\n    <string name=\"my_booking\">My Booking</string>\r\n    <string name=\"my_booking_appointment\">My Bookings / Appointments</string>\r\n    <string name=\"refer_and_earn\">Refer and Earn</string>\r\n    <string name=\"switch_to_business_profile\">Switch to Business Profile</string>\r\n    <string name=\"rate_this_app\">Rate this App</string>\r\n    <string name=\"support_help\">Support / Help</string>\r\n    <string name=\"settings\">Settings</string>\r\n    <string name=\"sign_out\">Sign out</string>\r\n    <string name=\"notifications\">Notifications</string>\r\n    <string name=\"notification\">Notification</string>\r\n    <string name=\"points_history\">Points History</string>\r\n    <string name=\"all\">All</string>\r\n    <string name=\"earn\">Earn</string>\r\n    <string name=\"earn_now\">Earn Now</string>\r\n    <string name=\"spend\">Spend</string>\r\n    <string name=\"popular_events\">Popular Events</string>\r\n    <string name=\"events\">Events</string>\r\n    <string name=\"event_description\">Event Description</string>\r\n    <string name=\"participants\">Participants</string>\r\n    <string name=\"select_your_category\">Select your Category</string>\r\n    <string name=\"date\">Date:</string>\r\n    <string name=\"payment_method\">Payment Method</string>\r\n    <string name=\"proceed_to_pay\">Proceed to Pay</string>\r\n    <string name=\"select_option_to_pay\">Select option to pay</string>\r\n    <string name=\"my_cards\">My Cards</string>\r\n    <string name=\"saved_card\">Saved Card</string>\r\n    <string name=\"pay_securely\">Pay Securely</string>\r\n    <string name=\"new_card\">New Card</string>\r\n    <string name=\"debit_credit_card\">Debit/Credit Card</string>\r\n    <string name=\"expriry_year\">Expriry Year</string>\r\n    <string name=\"expriry_month\">Expriry Month</string>\r\n    <string name=\"other_payment_method\">Other Payment Method</string>\r\n    <string name=\"seats\">Seats</string>\r\n    <string name=\"status\">Status</string>\r\n    <string name=\"venue\">Venue</string>\r\n    <string name=\"ticket_code\">Ticket Code</string>\r\n    <string name=\"ticket_details\">Ticket Details</string>\r\n    <string name=\"copy\">Copy</string>\r\n    <string name=\"messenger\">Messenger</string>\r\n    <string name=\"more\">More</string>\r\n    <string name=\"invite_friends\">Invite Friends</string>\r\n    <string name=\"retail\">Retail</string>\r\n    <string name=\"bakery\">Bakery</string>\r\n    <string name=\"collect_stamp\">Collect Stamp</string>\r\n    <string name=\"select_plan\">Select Plan</string>\r\n    <string name=\"contact_us\">Contact Us</string>\r\n    <string name=\"order_detail\">Order Detail</string>\r\n    <string name=\"special_request\">Special Request</string>\r\n    <string name=\"cancel_booking\">Cancel Booking</string>\r\n    <string name=\"edit_photo\"><u>Edit Photo</u></string>\r\n    <string name=\"edit_profile\">Edit Profile</string>\r\n    <string name=\"edit_profile_update\">Update Profile</string>\r\n    <string name=\"name\">Name</string>\r\n    <string name=\"save_changes\">Save Changes</string>\r\n    <string name=\"details_optional\">Details(Optional)</string>\r\n    <string name=\"for_business_profile\">For Business Profile</string>\r\n    <string name=\"services\">Services</string>\r\n    <string name=\"select_services_for\">Select Services For</string>\r\n    <string name=\"men\">Men</string>\r\n    <string name=\"women\">Women</string>\r\n    <string name=\"available_services\">Available services</string>\r\n    <string name=\"combo_pack\">Combo Pack</string>\r\n    <string name=\"select_specialist\">Select Specialist</string>\r\n    <string name=\"booking_information\">Booking Information</string>\r\n    <string name=\"select_and_continue\">Select and Continue</string>\r\n    <string name=\"checkout\">Checkout</string>\r\n    <string name=\"date_amp_time\"><![CDATA[Date & Time]]></string>\r\n    <string name=\"booking_details\">Booking details</string>\r\n    <string name=\"specialist\">Specialist</string>\r\n    <string name=\"packages\">Packages</string>\r\n    <string name=\"amenities\">Amenities</string>\r\n    <string name=\"product_details\">Product Details</string>\r\n    <string name=\"add_to_cart\">Add to Cart</string>\r\n    <string name=\"added_to_cart\">Added to Cart</string>\r\n    <!--<string name=\"google_key\">AIzaSyABGkxexMgUDwjNle_FsokJ_j6Aqvyu0tc</string>-->\r\n    <string name=\"google_key\">AIzaSyBXGQYyh1UlT229SHt3JyehDkBlZ-CCN78</string>\r\n    <string name=\"google_place_api_key\">AIzaSyB9l64Pb12pnkX7bqVwH57Q2DSsrRv_eo4</string>\r\n    <string name=\"googleAccountWebClientID\">250742114157-kkt1dtnp0997cqcokq4fujmgnp1thvm5.apps.googleusercontent.com</string>\r\n    <string name=\"googleApplicationID\">1:250742114157:android:20f78a555c7b2a6f4f3c64</string>\r\n    <string name=\"googleProjectID\">the-market-theory-09072021</string>\r\n    <string name=\"you_can_cancle_your_plan_at_any_time_n_one_time_payment\">You can cancel your plan at any time.\\n One time payment</string>\r\n    <string name=\"total_cost\">Total cost</string>\r\n    <string name=\"back_to_home_screen\">Back to Home Screen</string>\r\n    <string name=\"full_name\">Full Name</string>\r\n    <string name=\"facebook_app_id\">726933398179877</string>\r\n    <string name=\"fb_login_protocol_scheme\">fb726933398179877</string>\r\n    <string name=\"open\">Open</string>\r\n    <string name=\"enter_promo_code\">Enter Promo Code</string>\r\n    <string name=\"apply\">Apply</string>\r\n    <string name=\"promo_code\">Promo Code</string>\r\n    <string name=\"available_coupons\">Available coupons</string>\r\n    <string name=\"available_promo_code\">Available Promo code</string>\r\n    <string name=\"please_select_atleast_one_ticket\">Please select at least one ticket</string>\r\n    <string name=\"google\">Google</string>\r\n    <string name=\"are_you_sure\">Are you sure you want to sign out?</string>\r\n    <string name=\"change_password\">Change Password</string>\r\n    <string name=\"delete_account\">Delete Account</string>\r\n    <string name=\"selectdeliverylocation\">Select Delivery Location</string>\r\n    <string name=\"YourLocation\">Your Location</string>\r\n    <string name=\"ConfirmLocation\">Confirm Location</string>\r\n    <string name=\"CompleteAddress\">Complete Address</string>\r\n    <string name=\"Housenumber\">House number</string>\r\n    <string name=\"Floor\">Floor</string>\r\n    <string name=\"Tower_Block\">Tower/Block</string>\r\n    <string name=\"locationforlater\">Tag this location for later</string>\r\n    <string name=\"saveadddress\">Save Address</string>\r\n    <string name=\"update_address\">Update Address</string>\r\n    <string name=\"change\">Change</string>\r\n    <string name=\"myAddress\">My Address</string>\r\n    <string name=\"AddAddress\">Add Address</string>\r\n    <string name=\"edit\">Edit</string>\r\n    <string name=\"delete\">Delete</string>\r\n    <string name=\"home\">home</string>\r\n    <string name=\"work\">work</string>\r\n    <string name=\"office\">Office</string>\r\n    <string name=\"other\">other</string>\r\n    <string name=\"something_went_wrong\">Something went wrong</string>\r\n    <string name=\"special_instructions\">Special Instructions</string>\r\n    <string name=\"sorry_no_items_are_available\">Sorry! No Items are available</string>\r\n    <string name=\"special_instruction\">Special Instruction</string>\r\n    <string name=\"my_events\">My Events</string>\r\n    <string name=\"view_on_map\">View on Map</string>\r\n    <string name=\"add_details_here\">Add report here</string>\r\n    <string name=\"done\">Done</string>\r\n    <string name=\"confirm_password\">Confirm Password</string>\r\n    <string name=\"new_password\">New Password</string>\r\n    <string name=\"write_for_any_queries\">Write for any queries</string>\r\n    <string name=\"schedule_now\">Schedule Now</string>\r\n    <string name=\"select\">Select</string>\r\n    <string name=\"schedule_pickup_time\">Schedule Pickup Time</string>\r\n    <string name=\"pickup_time\">Pickup Time</string>\r\n    <string name=\"recover_password\">Recover Password</string>\r\n    <string name=\"my_coupons\">My Coupons</string>\r\n    <string name=\"schedule_pickup\">Schedule Pickup</string>\r\n    <string name=\"pickup_now\">Pickup Now</string>\r\n    <string name=\"checkout_privacy_policy\"><b><u>Checkout Privacy Policy</u></b></string>\r\n    <string name=\"privacy_policy\">Privacy Policy</string>\r\n    <string name=\"dine_in_only\"><u>Dine In Only</u></string>\r\n    <string name=\"explain_unusual_activity_or_service\">Explain unusual activity or service</string>\r\n    <string name=\"add_more\">+ Add More</string>\r\n    <string name=\"enter_otp\">Enter OTP</string>\r\n    <string name=\"otp_can_be_resend_in\">Didn\\'t receive the OTP?\\nRequest for a new one in %s seconds</string>\r\n    <string name=\"city_selection\">Want to see Offers Near you?</string>\r\n    <string name=\"live_deals_blink\">LIVE DEALS</string>\r\n    <string name=\"update\">Update</string>\r\n    <string name=\"connect_with\">connect with</string>\r\n    <string name=\"restaurant_desc_all\"><![CDATA[%s <font color=\\'#02C8CE\\'><b>See More</b></font>]]></string>\r\n    <string name=\"enter_mobile_number\">Enter Mobile Number</string>\r\n    <string name=\"status_colon\">Status:</string>\r\n    <string name=\"pre_order\">Pre Order</string>\r\n    <string name=\"favorite\">Favorite</string>\r\n    <string name=\"unusual_activity_please_report\"><u>Unusual activity please report</u></string>\r\n    <string name=\"coupon_detail\">Coupon Detail</string>\r\n    <string name=\"lorem_ipsum\">Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</string>\r\n    <string name=\"invite_n_earn\">Ask your friends to signup as a vendor<br />with your referral code and make an initial<br />point. Once done, each earn <font color='#02C8CE'>100</font> Points.</string>\r\n\r\n    <string name=\"points_text\"><![CDATA[<font color=\\'#02C8CE\\'>%s</font><font color=\\'#77868F\\'> Points</font>]]></string>\r\n    <string name=\"points_PointText\"><![CDATA[<font color=\\'#02C8CE\\'>Live</font><font color=\\'#ffffff\\'> Deals</font>]]></string>\r\n\r\n    <string name=\"coupon_max_offer_price\"><![CDATA[<font color=\\'#77868F\\'>Max Offer value up to</font><font color=\\'#EDD464\\'> Rs.%s</font>]]></string>\r\n\r\n    <string name=\"order_redeem_point\">Order Redeem Point</string>\r\n    <string name=\"live_deal_html\"><font color=\"#02C8CE\">Live</font> Deal</string>\r\n    <string name=\"live_deals\">Live Deals</string>\r\n    <string name=\"coupon_discount\">Coupon Discount</string>\r\n    <string name=\"enter_special_instructions\">Enter Special Instructions</string>\r\n    <string name=\"call\">Call</string>\r\n    <string name=\"dining_in\">Dining in</string>\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
--- a/app/src/main/res/values/strings.xml	(revision a76bab96113d2ac5aac0a03bf2a754ef748ea040)
+++ b/app/src/main/res/values/strings.xml	(date 1643291049604)
@@ -3,8 +3,8 @@
     <string name="sign_in">Sign In</string>
 
 
-<!--    <string name="razorpay_live_key" translatable="false">rzp_live_jt5nT7EvpCH8qD</string>  &lt;!&ndash;Live Key&ndash;&gt;-->
-      <string name="razorpay_live_key" translatable="false">rzp_test_M2FkmkrT6qthLV</string>
+    <string name="razorpay_live_key" translatable="false">rzp_live_jt5nT7EvpCH8qD</string>  <!--Live Key-->
+     <!-- <string name="razorpay_live_key" translatable="false">rzp_test_M2FkmkrT6qthLV</string>-->
 
 
     <string name="with_your_social_network">with your social network</string>
Index: app/src/main/java/com/themarkettheory/user/firebase/MyFirebaseMessagingService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.themarkettheory.user.firebase\r\n\r\nimport android.app.*\r\nimport android.content.ContentResolver\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.graphics.Bitmap\r\nimport android.graphics.BitmapFactory\r\nimport android.media.RingtoneManager\r\nimport android.net.Uri\r\nimport android.os.Build\r\nimport android.text.Html\r\nimport android.text.TextUtils\r\nimport android.util.Log\r\nimport android.util.Patterns\r\nimport androidx.core.app.NotificationCompat\r\nimport androidx.localbroadcastmanager.content.LocalBroadcastManager\r\nimport com.google.firebase.messaging.FirebaseMessagingService\r\nimport com.google.firebase.messaging.RemoteMessage\r\nimport com.gotem.firebase.NotificationUtils\r\nimport com.themarkettheory.user.R\r\nimport com.themarkettheory.user.helper.Constants\r\nimport com.themarkettheory.user.helper.Prefs\r\nimport com.themarkettheory.user.ui.main.activity.MainActivity\r\nimport java.io.IOException\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\nimport java.text.ParseException\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\n\r\n\r\nclass MyFirebaseMessagingService : FirebaseMessagingService() {\r\n\r\n    private val TAG = MyFirebaseMessagingService::class.java.simpleName\r\n\r\n    override fun onNewToken(p0: String) {\r\n        super.onNewToken(p0)\r\n        val prefs = Prefs(applicationContext)\r\n        prefs.setStringValue(Constants.fcm_token, p0)\r\n        prefs.setToken(applicationContext, p0)\r\n        Log.d(\"##Token\", p0)\r\n    }\r\n\r\n    override fun onMessageReceived(remoteMessage: RemoteMessage) {\r\n        Log.e(\"##Token\", \"Notification Comes\")\r\n\r\n        Log.e(TAG, \"From: \" + remoteMessage.from!!)\r\n\r\n        // Check if message contains a data payload.\r\n        if (remoteMessage.data.isNotEmpty()) {\r\n            Log.e(TAG, \"Data Payload: \" + remoteMessage.data.toString())\r\n//            if (!NotificationUtils.isAppIsInBackground(applicationContext)) {\r\n            try {\r\n                val map = remoteMessage.data\r\n                if (map != null) {\r\n                    handleDataMessage(map)\r\n                } else {\r\n                    handleNotification(remoteMessage.notification?.body, remoteMessage)\r\n                }\r\n            } catch (e: Exception) {\r\n                Log.e(TAG, \"Exception: \" + e.message)\r\n            }\r\n//            }\r\n        }\r\n\r\n        // Check if message contains a notification payload.\r\n        if (remoteMessage.notification != null) {\r\n            Log.e(TAG, \"Notification Body: \" + remoteMessage.notification!!.body!!)\r\n//            handleNotification(remoteMessage.notification!!.body, remoteMessage)\r\n            if (NotificationUtils.isAppIsInBackground(applicationContext)) {\r\n                handleDataMessage(remoteMessage.data)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun handleNotification(message: String?, remoteMessage: RemoteMessage?) {\r\n        if (!NotificationUtils.isAppIsInBackground(applicationContext)) {\r\n            // app is in foreground, broadcast the push message\r\n            if (message != \"Resume Maintenance\") {\r\n                val pushNotification = Intent(Config.PUSH_NOTIFICATION)\r\n                pushNotification.putExtra(\"message\", message)\r\n                LocalBroadcastManager.getInstance(this).sendBroadcast(pushNotification)\r\n                val msg = remoteMessage!!.notification?.body\r\n                val key = remoteMessage!!.notification?.bodyLocalizationKey\r\n\r\n                val resultIntent = Intent(applicationContext, MainActivity::class.java)\r\n                /*val resultIntent = Intent(applicationContext, NotificationActivity::class.java)\r\n                resultIntent.putExtra(\"message\", message)*/\r\n\r\n                NotificationUtils.showNotificationMessage(\r\n                    resources.getString(R.string.app_name),\r\n                    message,\r\n                    System.currentTimeMillis(),\r\n                    resultIntent,\r\n                    \"\",\r\n                    applicationContext\r\n                )\r\n                // play notification sound\r\n                NotificationUtils.playNotificationSound(applicationContext)\r\n            }\r\n        } else {\r\n            // If the app is in background, firebase itself handles the notification\r\n        }\r\n    }\r\n//{user_message=Your order id : #TMT000615 is confirmed, service_id=0, notification_type=5, sound=Default, title=Mirch Masala Restaurant,\r\n// message=Your order id : #TMT000615 is confirmed,\r\n// isScheduled=false, order_id=0, scheduledTime=}\r\n    private fun handleDataMessage(map: Map<String, String>) {\r\n        try {\r\n            Log.e(\"RECEEVED\",map.toString())\r\n            val title = map[\"title\"]\r\n            var message: String?\r\n            var imageUrl = map[\"image\"]\r\n            val type = map[\"type\"]\r\n            val notification_type = map[\"notification_type\"]\r\n            val sender_id = map[\"sender_id\"]\r\n            val sender_name = map[\"sender_name\"]\r\n            val sender_image = map[\"sender_image\"]\r\n            val receiver_id = map[\"receiver_id\"]\r\n            val message_type = map[\"chat_type\"]\r\n            val message_text = map[\"chat_text\"]\r\n            val timestamp = System.currentTimeMillis()\r\n            val prefs = Prefs(applicationContext)\r\n            message = map[\"body\"]\r\n            if (message.isNullOrEmpty())\r\n                message = \"\"\r\n\r\n            if (message_type == \"image\")\r\n                imageUrl = message_text\r\n\r\n            val pushNotification = Intent(Config.PUSH_NOTIFICATION)\r\n            pushNotification.putExtra(\"message\", message)\r\n            pushNotification.putExtra(\"notification_type\", notification_type)\r\n            LocalBroadcastManager.getInstance(this).sendBroadcast(pushNotification)\r\n\r\n            if (!prefs.getLoginModel().id.toString().isNullOrEmpty()) {\r\n//                    var resultIntent = Intent()\r\n//                        resultIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK)\r\n//                        resultIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)\r\n                val pushNotification = Intent(\"requests_count\")\r\n                //pushNotification.putExtra(\"message\", message)\r\n                pushNotification.putExtra(\"message\", map[\"user_message\"])\r\n                pushNotification.putExtra(\"notification_type\", notification_type)\r\n\r\n                LocalBroadcastManager.getInstance(this).sendBroadcast(pushNotification)\r\n\r\n                val resultIntent = Intent(applicationContext, MainActivity::class.java)\r\n                /*val resultIntent = Intent(applicationContext, NotificationActivity::class.java)\r\n                resultIntent.putExtra(\"message\", message)\r\n                resultIntent.putExtra(\"notificationFlag\", true)*/\r\n\r\n                val intent = Intent(Config.PUSH_NOTIFICATION)\r\n                intent.setAction(\"OPEN_NEW_ACTIVITY\")\r\n\r\n                applicationContext.sendBroadcast(intent)\r\n\r\n                showNotificationMessage(\r\n                    title,\r\n                    message,\r\n                    timestamp,\r\n                    resultIntent,\r\n                    imageUrl,\r\n                    applicationContext\r\n                )\r\n                // NotificationUtils.playNotificationSound(applicationContext)\r\n\r\n            }\r\n\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    private fun showDialog(applicationContext: Context?) {\r\n        val builder = AlertDialog.Builder(applicationContext)\r\n        builder.setTitle(\"Alert\")\r\n        builder.setMessage(\"Your account has been unverified. Alternatively you can try removing this account and adding it again with diferrent email for verification process.\")\r\n        //builder.setPositiveButton(\"OK\", DialogInterface.OnClickListener(function = x))\r\n\r\n        builder.setPositiveButton(\"yes\") { dialog, which ->\r\n            val prefs = Prefs(applicationContext!!)\r\n            prefs.clear()\r\n            /*startActivity(\r\n                Intent(applicationContext, LoginActivity::class.java)\r\n                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\r\n            )*/\r\n        }\r\n//        builder.show()\r\n        val alertDialog = builder.create()\r\n        alertDialog.show()\r\n    }\r\n\r\n\r\n    fun showNotificationMessage(\r\n        title: String?,\r\n        message: String?,\r\n        timeStamp: Long,\r\n        intent: Intent,\r\n        imageUrl: String?,\r\n        context: Context\r\n    ) {\r\n        // Check for empty push message\r\n//        if (TextUtils.isEmpty(message))\r\n//            return\r\n\r\n        // notification icon\r\n        val icon: Int = R.drawable.ic_notification_icon\r\n\r\n        intent.flags =\r\n            Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_SINGLE_TOP or Intent.FLAG_ACTIVITY_NO_HISTORY\r\n        intent.setAction(Intent.ACTION_MAIN);\r\n        intent.addCategory(Intent.CATEGORY_LAUNCHER);\r\n        val resultPendingIntent: PendingIntent =\r\n            PendingIntent.getActivity(\r\n                context,\r\n                0,\r\n                intent,\r\n                PendingIntent.FLAG_UPDATE_CURRENT\r\n            )\r\n\r\n        val mBuilder = NotificationCompat.Builder(\r\n            context, Config.NOTIFICATION_CHANNEL_ID\r\n        )\r\n\r\n        // Create the NotificationChannel, but only on API 26+ because\r\n        // the NotificationChannel class is new and not in the support library\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            val name = context.getString(R.string.app_name)\r\n            val descriptionText = context.getString(R.string.app_name)\r\n            val importance = NotificationManager.IMPORTANCE_DEFAULT\r\n            val channel =\r\n                NotificationChannel(Config.NOTIFICATION_CHANNEL_ID, name, importance).apply {\r\n                    description = descriptionText\r\n                }\r\n            // Register the channel with the system\r\n            val notificationManager: NotificationManager =\r\n                context.getSystemService(NOTIFICATION_SERVICE) as NotificationManager\r\n            notificationManager.createNotificationChannel(channel)\r\n        }\r\n\r\n        val alarmSound: Uri = Uri.parse(\r\n            ContentResolver.SCHEME_ANDROID_RESOURCE\r\n                    + \"://\" + context.packageName + \"/raw/notification\"\r\n        )\r\n\r\n        if (!TextUtils.isEmpty(imageUrl)) {\r\n\r\n            if (imageUrl!!.length > 4 && Patterns.WEB_URL.matcher(imageUrl).matches()) {\r\n\r\n                val bitmap: Bitmap? = getBitmapFromURL(imageUrl)\r\n\r\n                if (bitmap != null) {\r\n                    showBigNotification(\r\n                        bitmap,\r\n                        mBuilder,\r\n                        icon,\r\n                        title,\r\n                        message,\r\n                        timeStamp,\r\n                        resultPendingIntent,\r\n                        alarmSound,\r\n                        context\r\n                    )\r\n                } else {\r\n                    showSmallNotification(\r\n                        mBuilder,\r\n                        icon,\r\n                        title,\r\n                        message,\r\n                        timeStamp,\r\n                        resultPendingIntent,\r\n                        alarmSound,\r\n                        context\r\n                    )\r\n                }\r\n            }\r\n        } else {\r\n            showSmallNotification(\r\n                mBuilder,\r\n                icon,\r\n                title,\r\n                message,\r\n                timeStamp,\r\n                resultPendingIntent,\r\n                alarmSound,\r\n                context\r\n            )\r\n            playNotificationSound(context)\r\n        }\r\n    }\r\n\r\n    private fun showSmallNotification(\r\n        mBuilder: NotificationCompat.Builder,\r\n        icon: Int,\r\n        title: String?,\r\n        message: String?,\r\n        timeStamp: Long,\r\n        resultPendingIntent: PendingIntent,\r\n        alarmSound: Uri,\r\n        context: Context\r\n    ) {\r\n\r\n        val inboxStyle = NotificationCompat.InboxStyle()\r\n\r\n        inboxStyle.addLine(message)\r\n\r\n        val notification: Notification\r\n        notification =\r\n            mBuilder.setSmallIcon(icon)\r\n//                .setColor(ContextCompat.getColor(applicationContext,R.color.white))\r\n                .setTicker(title)\r\n                .setAutoCancel(true)\r\n                .setContentTitle(title)\r\n                .setContentIntent(resultPendingIntent)\r\n                .setSound(alarmSound)\r\n                .setStyle(NotificationCompat.BigTextStyle().bigText(message))\r\n                .setWhen(timeStamp)\r\n                .setLargeIcon(BitmapFactory.decodeResource(context.resources, icon))\r\n                .setContentText(message)\r\n                .setPriority(NotificationCompat.PRIORITY_MAX)\r\n                .setChannelId(Config.NOTIFICATION_CHANNEL_ID)\r\n                .build()\r\n\r\n        val notificationManager =\r\n            context.getSystemService(NOTIFICATION_SERVICE) as NotificationManager\r\n        notificationManager.notify(Config.NOTIFICATION_ID, notification)\r\n    }\r\n\r\n    private fun showBigNotification(\r\n        bitmap: Bitmap,\r\n        mBuilder: NotificationCompat.Builder,\r\n        icon: Int,\r\n        title: String?,\r\n        message: String?,\r\n        timeStamp: Long,\r\n        resultPendingIntent: PendingIntent,\r\n        alarmSound: Uri,\r\n        context: Context\r\n    ) {\r\n        val bigPictureStyle = NotificationCompat.BigPictureStyle()\r\n        bigPictureStyle.setBigContentTitle(title)\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n            bigPictureStyle.setSummaryText(\r\n                Html.fromHtml(message, Html.FROM_HTML_MODE_COMPACT).toString()\r\n            )\r\n        } else {\r\n            bigPictureStyle.setSummaryText(Html.fromHtml(message).toString())\r\n        }\r\n        bigPictureStyle.bigPicture(bitmap)\r\n        val notification: Notification\r\n        notification =\r\n            mBuilder.setSmallIcon(icon)\r\n                .setTicker(title)\r\n                .setAutoCancel(true)\r\n                .setContentTitle(title)\r\n                .setContentIntent(resultPendingIntent)\r\n                .setSound(alarmSound)\r\n                .setStyle(bigPictureStyle)\r\n                .setWhen(timeStamp)\r\n                .setLargeIcon(BitmapFactory.decodeResource(context.resources, icon))\r\n                .setContentText(message)\r\n                .setPriority(NotificationCompat.PRIORITY_MAX)\r\n                .setChannelId(Config.NOTIFICATION_CHANNEL_ID)\r\n                .build()\r\n\r\n        val notificationManager =\r\n            context.getSystemService(NOTIFICATION_SERVICE) as NotificationManager\r\n        notificationManager.notify(Config.NOTIFICATION_ID_BIG_IMAGE, notification)\r\n    }\r\n\r\n\r\n    fun playNotificationSound(context: Context) {\r\n        try {\r\n            /*  Uri alarmSound = Uri.parse(ContentResolver.SCHEME_ANDROID_RESOURCE\r\n                    + \"://\" + mContext.getPackageName() + \"/raw/notification\");*/\r\n            val uri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION)\r\n\r\n            val r = RingtoneManager.getRingtone(context, uri)\r\n            r.play()\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Method checks if the app is in background or not\r\n     */\r\n    fun isAppIsInBackground(context: Context): Boolean {\r\n        var isInBackground = true\r\n        val am = context.getSystemService(ACTIVITY_SERVICE) as ActivityManager\r\n        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.KITKAT_WATCH) {\r\n            val runningProcesses = am.runningAppProcesses\r\n            for (processInfo in runningProcesses) {\r\n                if (processInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {\r\n                    for (activeProcess in processInfo.pkgList) {\r\n                        if (activeProcess == context.packageName) {\r\n                            isInBackground = false\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            val taskInfo = am.getRunningTasks(1)\r\n            val componentInfo = taskInfo[0].topActivity\r\n            if (componentInfo?.packageName == context.packageName) {\r\n                isInBackground = false\r\n            }\r\n        }\r\n\r\n        return isInBackground\r\n    }\r\n\r\n    // Clears notification tray messages\r\n    fun clearNotifications(context: Context) {\r\n        val notificationManager =\r\n            context.getSystemService(NOTIFICATION_SERVICE) as NotificationManager\r\n        notificationManager.cancelAll()\r\n    }\r\n\r\n    private fun getTimeMilliSec(timeStamp: String): Long {\r\n        val format = SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.getDefault())\r\n        try {\r\n            val date = format.parse(timeStamp)\r\n            return date.time\r\n        } catch (e: ParseException) {\r\n            e.printStackTrace()\r\n        }\r\n\r\n        return 0\r\n    }\r\n\r\n    /**\r\n     * Downloading push notification image before displaying it in\r\n     * the notification tray\r\n     */\r\n    private fun getBitmapFromURL(strURL: String): Bitmap? {\r\n        return try {\r\n            val url = URL(strURL)\r\n            val connection = url.openConnection() as HttpURLConnection\r\n            connection.doInput = true\r\n            connection.connect()\r\n            val input = connection.inputStream\r\n            BitmapFactory.decodeStream(input)\r\n        } catch (e: IOException) {\r\n            e.printStackTrace()\r\n            null\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/themarkettheory/user/firebase/MyFirebaseMessagingService.kt b/app/src/main/java/com/themarkettheory/user/firebase/MyFirebaseMessagingService.kt
--- a/app/src/main/java/com/themarkettheory/user/firebase/MyFirebaseMessagingService.kt	(revision a76bab96113d2ac5aac0a03bf2a754ef748ea040)
+++ b/app/src/main/java/com/themarkettheory/user/firebase/MyFirebaseMessagingService.kt	(date 1643289970960)
@@ -120,6 +120,7 @@
             val receiver_id = map["receiver_id"]
             val message_type = map["chat_type"]
             val message_text = map["chat_text"]
+            var serviceId =0 //map["chat_text"]
             val timestamp = System.currentTimeMillis()
             val prefs = Prefs(applicationContext)
             message = map["body"]
@@ -129,19 +130,22 @@
             if (message_type == "image")
                 imageUrl = message_text
 
+            if(notification_type == "10")
+                serviceId = map["service_id"]!!.toUInt().toInt()
+
             val pushNotification = Intent(Config.PUSH_NOTIFICATION)
             pushNotification.putExtra("message", message)
             pushNotification.putExtra("notification_type", notification_type)
+            pushNotification.putExtra("serviceId", serviceId)
             LocalBroadcastManager.getInstance(this).sendBroadcast(pushNotification)
 
             if (!prefs.getLoginModel().id.toString().isNullOrEmpty()) {
-//                    var resultIntent = Intent()
-//                        resultIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK)
-//                        resultIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)
+
                 val pushNotification = Intent("requests_count")
                 //pushNotification.putExtra("message", message)
                 pushNotification.putExtra("message", map["user_message"])
                 pushNotification.putExtra("notification_type", notification_type)
+                pushNotification.putExtra("serviceId", serviceId)
 
                 LocalBroadcastManager.getInstance(this).sendBroadcast(pushNotification)
 
Index: app/src/main/java/com/themarkettheory/user/ui/main/fragment/HomeFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.themarkettheory.user.ui.main.fragment\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.content.Intent\r\nimport android.graphics.Color\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ImageView\r\nimport android.widget.RelativeLayout\r\nimport android.widget.TextView\r\nimport androidx.core.app.ActivityOptionsCompat\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.Observer\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.themarkettheory.user.R\r\nimport com.themarkettheory.user.database.dbtables.TableConfig\r\nimport com.themarkettheory.user.helper.Config\r\nimport com.themarkettheory.user.helper.Constants\r\nimport com.themarkettheory.user.helper.PubFun\r\nimport com.themarkettheory.user.helper.Utils\r\nimport com.themarkettheory.user.interfaces.OnCategoryClickListener\r\nimport com.themarkettheory.user.newmodels.getcategories.Category\r\nimport com.themarkettheory.user.ui.dialog.dialogToast.DialogToast\r\nimport com.themarkettheory.user.ui.main.activity.CitySelectionActivity\r\nimport com.themarkettheory.user.ui.main.activity.FeedbackActivity\r\nimport com.themarkettheory.user.ui.main.activity.NotificationActivity\r\nimport com.themarkettheory.user.ui.main.activity.SearchActivity\r\nimport com.themarkettheory.user.ui.main.adapter.HomeCategoriesAdapter\r\nimport com.themarkettheory.user.ui.restaurant.MyBucketActivity\r\nimport com.themarkettheory.user.ui.restaurant.RestaurantFragment\r\nimport com.themarkettheory.user.ui.restaurant.restaurant_list.RestaurantListActivity\r\nimport com.themarkettheory.user.viewmodel.GeneralViewModel\r\nimport com.themarkettheory.user.viewmodel.HomeViewModel\r\nimport dagger.hilt.android.AndroidEntryPoint\r\nimport kotlinx.android.synthetic.main.fragment_home.*\r\n\r\n@AndroidEntryPoint\r\nclass HomeFragment : BaseFragment(), View.OnClickListener, OnCategoryClickListener {\r\n    private lateinit var homeCategoriesAdapter: HomeCategoriesAdapter\r\n\r\n    var relativeLayoutArray = arrayOf<RelativeLayout>()\r\n    var imageViewArray = arrayOf<ImageView>()\r\n    var textviewArray = arrayOf<TextView>()\r\n    var isMapView = false\r\n    var selectedCategoryId = \"\"\r\n    lateinit var homeViewModel: HomeViewModel\r\n    lateinit var generalViewModel: GeneralViewModel\r\n\r\n    //  lateinit var cartViewModel: CartViewModel\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        homeViewModel = ViewModelProvider(this).get(HomeViewModel::class.java)\r\n        generalViewModel = ViewModelProvider(requireActivity()).get(GeneralViewModel::class.java)\r\n        // cartViewModel = ViewModelProvider(requireActivity()).get(CartViewModel::class.java)\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        return inflater.inflate(R.layout.fragment_home, container, false)\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        relativeLayoutArray = arrayOf(\r\n            rlAll, rlRestaurant, rlSalon,\r\n            rlSpa, rlRetail, rlBakery, rlGym\r\n        )\r\n        imageViewArray = arrayOf(\r\n            ivAll, ivRestaurant, ivSalon,\r\n            ivSpa, ivRetail, ivBakery, ivGym\r\n        )\r\n        textviewArray = arrayOf(\r\n            tvAll, tvRestaurant, tvSalon,\r\n            tvSpa, tvRetail, tvBakery, tvGym\r\n        )\r\n        /*tvAddress.setText(Utils.getAddress(prefs.getLoginModel()))*/\r\n\r\n        tvAddress.text =\r\n            myRoomDatabase.daoConfig().selectConfigTableByField(Config.dbCurrentCitySelection)\r\n        /*tvAddress.text = \"Ahmebabad, Gujarat\"*/\r\n        /*if(param1?.selectedCategory == \"all\") {\r\n            setFragment(AllFragment())\r\n        }else{\r\n            isMapView = true\r\n            updateUI(rlRestaurant,tvRestaurant,ivRestaurant,Constants.RESTAURANT)\r\n        }*/\r\n\r\n        Config.currentLat = myRoomDatabase.daoConfig().selectConfigTableByField(Config.dbLat)!!\r\n        Config.currentLng = myRoomDatabase.daoConfig().selectConfigTableByField(Config.dbLng)!!\r\n\r\n        getHomeResponse()\r\n\r\n        Utils.category.observe(viewLifecycleOwner, Observer<String> {\r\n            setFragment(RestaurantFragment.newInstance(it, \"\"))\r\n            if (::homeCategoriesAdapter.isInitialized) {\r\n                homeCategoriesAdapter.setPosition(it.toInt())\r\n            }\r\n            if (it == \"0\") {\r\n                /*ivMap.visibility = View.GONE*/\r\n            } else\r\n                selectedCategoryId = it.toString()\r\n        })\r\n\r\n        llAll.setOnClickListener(this)\r\n        llRestaurant.setOnClickListener(this)\r\n        llSalon.setOnClickListener(this)\r\n        llSpa.setOnClickListener(this)\r\n        llRetail.setOnClickListener(this)\r\n        llBakery.setOnClickListener(this)\r\n        llGym.setOnClickListener(this)\r\n        llSearch.setOnClickListener(this)\r\n        llSearches.setOnClickListener(this)\r\n        ivNotification.setOnClickListener(this)\r\n        tvAddress.setOnClickListener(this)\r\n        ivMap.setOnClickListener(this)\r\n        ivLocation.setOnClickListener(this)\r\n        coCart.setOnClickListener(this)\r\n\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        try {\r\n            if (PubFun.isInternetConnection(requireActivity())) {\r\n                homeViewModel.home(Config.currentLat, Config.currentLng)\r\n            } else {\r\n                showMsgDialogAndProceed(Config.msgToastForInternet)\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    private fun getHomeResponse() {\r\n\r\n        homeViewModel.isLoading.observe(viewLifecycleOwner, Observer {\r\n            if (it!!) {\r\n                Utils.showProgress(requireActivity())\r\n            } else {\r\n                Utils.hideProgress(requireActivity())\r\n            }\r\n        })\r\n\r\n        homeViewModel.responseHome.observe(viewLifecycleOwner, Observer { home ->\r\n            when (home.status!!) {\r\n                0 -> showMsgDialogAndProceed(home.message!!.trim())\r\n                1 -> {\r\n\r\n                    // setting up the cart size\r\n                    tvCartCount.visibility =\r\n                        if (home.data!!.cartCount!!.toString().trim().toInt() > 0\r\n                        ) View.VISIBLE else View.GONE\r\n                    tvCartCount.text = home.data!!.cartCount!!.toString().trim()\r\n                    if (home.isFeedBack == 1) {\r\n                        startActivity(Intent(requireActivity(), FeedbackActivity::class.java))\r\n                    }\r\n\r\n                    home.data?.let {\r\n                        myRoomDatabase.daoConfig().deleteConfigTableByField(Config.dbNewHomeRes)\r\n                        myRoomDatabase.daoConfig().insertConfigTable(\r\n                            TableConfig(\r\n                                Config.dbNewHomeRes,\r\n                                gson.toJson(home)\r\n                            )\r\n                        )\r\n                        /*setFragment(AllFragment.newInstance(home.newHomeData, \"\"))*/\r\n                        setFragment(AllFragment())\r\n                        val subCategories = ArrayList<Category>()\r\n                        for (i in it.categories!![0].subcategory!!.indices) {\r\n                            val category = Category()\r\n                            category.id = it.categories!![0].subcategory!![i].id\r\n                            category.name = it.categories!![0].subcategory!![i].name\r\n\r\n                            if (category.name!! == Config.subCategory0IndexRestaurantOldName) {\r\n                                category.name = Config.subCategory0IndexRestaurantNewName\r\n                            }\r\n                            subCategories.add(category)\r\n                        }\r\n\r\n                        homeCategoriesAdapter = HomeCategoriesAdapter(\r\n                            requireActivity(),\r\n                            subCategories\r\n                        ) {\r\n                            if (PubFun.isInternetConnection(requireActivity())) {\r\n                                if (selectedCategoryId != it.id.toString()) {\r\n                                    selectedCategoryId = it.id.toString()\r\n                                    if (it.name!!.lowercase() == Config.subCategory0IndexRestaurantNewName) {\r\n                                        /*setFragment(AllFragment.newInstance(home.newHomeData, \"\"))*/\r\n                                        setFragment(AllFragment())\r\n                                        /*ivMap.visibility = View.GONE*/\r\n                                    } else {\r\n                                        /*ivMap.visibility = View.VISIBLE*/\r\n                                        /*setFragment(\r\n                                            RestaurantFragment.newInstance(\r\n                                                it.id.toString(),\r\n                                                \"\"\r\n                                            )\r\n                                        )*/\r\n                                        Config.foodCategorySelectedId = selectedCategoryId\r\n                                        Config.isRestaurantListOpeningFrom =\r\n                                            Config.restaurantListOpeningFromHomeFragment\r\n                                        startActivity(\r\n                                            Intent(\r\n                                                requireActivity(),\r\n                                                RestaurantListActivity::class.java\r\n                                            )\r\n                                        )\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                homeCategoriesAdapter.setPosition(Config.foodCategoryPreviousPosition)\r\n                                showMsgDialogAndProceed(Config.msgToastForInternet)\r\n                            }\r\n                        }\r\n                        rvHomeCategory.apply {\r\n                            adapter = homeCategoriesAdapter\r\n                            layoutManager =\r\n                                LinearLayoutManager(\r\n                                    requireActivity(),\r\n                                    LinearLayoutManager.HORIZONTAL,\r\n                                    false\r\n                                )\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n\r\n        /* generalViewModel.responseGetCart.observe(viewLifecycleOwner, Observer {\r\n             if (it.status!!) {\r\n                 if (it.data?.list.isNullOrEmpty()) {\r\n                     tvCartCount.visibility = View.GONE\r\n                 } else {\r\n                     tvCartCount.visibility = View.VISIBLE\r\n                     tvCartCount.setText(it.data?.list!!.size.toString())\r\n                 }\r\n             }\r\n         })*/\r\n\r\n        /*generalViewModel.responseGetProfile.observe(viewLifecycleOwner, Observer {\r\n            if (it.status!! == 1) {\r\n                *//*if(it.data?.address?.houseNumber.isNullOrEmpty() &&it.data?.address?.tower.isNullOrEmpty()){\r\n                    tvAddress.setText(Utils.getAddress(it.data!!))\r\n                }*//*\r\n                *//*tvAddress.setText(Utils.getAddress(it.data!!))*//*\r\n            }\r\n        })*/\r\n    }\r\n\r\n    override fun onClick(v: View?) {\r\n        when (v) {\r\n\r\n\r\n            ivNotification -> {\r\n                // startActivity(Intent(requireActivity(), FeedbackActivity::class.java))\r\n                if (PubFun.isInternetConnection(requireActivity())) {\r\n                    startActivity(Intent(requireActivity(), NotificationActivity::class.java))\r\n                } else {\r\n                    showMsgDialogAndProceed(Config.msgToastForInternet)\r\n                }\r\n            }\r\n\r\n\r\n            llAll -> {\r\n                updateUI(rlAll, tvAll, ivAll, \"\")\r\n                setFragment(AllFragment())\r\n                /*ivMap.visibility = View.GONE*/\r\n            }\r\n\r\n            llRestaurant -> {\r\n                updateUI(rlRestaurant, tvRestaurant, ivRestaurant, Constants.RESTAURANT)\r\n                setFragment(RestaurantFragment.newInstance(\"1\", \"\"))\r\n                if (::homeCategoriesAdapter.isInitialized) {\r\n                    homeCategoriesAdapter.setPosition(1)\r\n                }\r\n            }\r\n\r\n            tvAddress, ivLocation -> {\r\n                if (PubFun.isInternetConnection(requireActivity())) {\r\n                    startActivity(Intent(requireActivity(), CitySelectionActivity::class.java))\r\n                } else {\r\n                    showMsgDialogAndProceed(Config.msgToastForInternet)\r\n                }\r\n                /* startActivity(Intent(requireActivity(), MyAddressActivity::class.java))*/\r\n            }\r\n\r\n            coCart -> {\r\n                if (tvCartCount.visibility == View.VISIBLE) {\r\n                    Config.isHomeGoCartClicked = true\r\n                    Config.isMyPointClickedFromHome = true\r\n                    if (PubFun.isInternetConnection(requireActivity())) {\r\n                        startActivity(Intent(requireActivity(), MyBucketActivity::class.java))\r\n                    } else {\r\n                        showMsgDialogAndProceed(Config.msgToastForInternet)\r\n                    }\r\n                } else {\r\n                    showMsgDialogAndProceed(\"There is no items in your cart\")\r\n                }\r\n            }\r\n\r\n            llSalon -> {\r\n                updateUI(rlSalon, tvSalon, ivSalon, Constants.SALON)\r\n                setFragment(RestaurantFragment.newInstance(\"4\", \"\"))\r\n                if (::homeCategoriesAdapter.isInitialized) {\r\n                    homeCategoriesAdapter.setPosition(4)\r\n                }\r\n            }\r\n\r\n            llSpa -> {\r\n                updateUI(rlSpa, tvSpa, ivSpa, Constants.SPA)\r\n                setFragment(RestaurantFragment.newInstance(\"5\", \"\"))\r\n                if (::homeCategoriesAdapter.isInitialized) {\r\n                    homeCategoriesAdapter.setPosition(5)\r\n                }\r\n            }\r\n\r\n            llRetail -> {\r\n                updateUI(rlRetail, tvRetail, ivRetail, Constants.RETAIL)\r\n                setFragment(RestaurantFragment.newInstance(\"3\", \"\"))\r\n                if (::homeCategoriesAdapter.isInitialized) {\r\n                    homeCategoriesAdapter.setPosition(3)\r\n                }\r\n            }\r\n\r\n            llBakery -> {\r\n                updateUI(rlBakery, tvBakery, ivBakery, Constants.BAKERY)\r\n                setFragment(RestaurantFragment.newInstance(\"6\", \"\"))\r\n                if (::homeCategoriesAdapter.isInitialized) {\r\n                    homeCategoriesAdapter.setPosition(6)\r\n                }\r\n            }\r\n\r\n            llGym -> {\r\n                updateUI(rlGym, tvGym, ivGym, Constants.GYM)\r\n                setFragment(RestaurantFragment.newInstance(\"2\", \"\"))\r\n                if (::homeCategoriesAdapter.isInitialized) {\r\n                    homeCategoriesAdapter.setPosition(2)\r\n                }\r\n            }\r\n\r\n            ivMap -> {\r\n                if (!isMapView) {\r\n//                    setFragment(MapFragment())\r\n                    setMapFragment()\r\n//                    MapFragment.newInstance(selectedCategoryId, \"\")\r\n                    ivMap.setImageResource(R.drawable.ic_list)\r\n                } else {\r\n                    setFragment(RestaurantFragment.newInstance(\"\", \"\"))\r\n                    ivMap.setImageResource(R.drawable.ic_map)\r\n                }\r\n                isMapView = !isMapView\r\n            }\r\n\r\n            llSearch -> {\r\n                val activityOptionsCompat: ActivityOptionsCompat =\r\n                    ActivityOptionsCompat.makeSceneTransitionAnimation(\r\n                        requireActivity(),\r\n                        llSearch,\r\n                        getString(R.string.search)\r\n                    )\r\n                val intent: Intent = Intent(activity, SearchActivity::class.java)\r\n                startActivity(intent, activityOptionsCompat.toBundle())\r\n            }\r\n            llSearches -> {\r\n                val activityOptionsCompat: ActivityOptionsCompat =\r\n                    ActivityOptionsCompat.makeSceneTransitionAnimation(\r\n                        requireActivity(),\r\n                        llSearch,\r\n                        getString(R.string.search)\r\n                    )\r\n                val intent: Intent = Intent(activity, SearchActivity::class.java)\r\n                startActivity(intent, activityOptionsCompat.toBundle())\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    fun updateUI(rl: RelativeLayout, tv: TextView, iv: ImageView, category: String) {\r\n        /*ivMap.visibility = View.VISIBLE*/\r\n        relativeLayoutArray.map {\r\n            it.background = ContextCompat.getDrawable(requireActivity(), R.drawable.ic_menu_bg)\r\n        }\r\n\r\n        textviewArray.map {\r\n            it.setTextColor(ContextCompat.getColor(requireActivity(), R.color.white))\r\n        }\r\n\r\n        imageViewArray.map {\r\n            it.setColorFilter(\r\n                ContextCompat.getColor(requireActivity(), R.color.gull_gray),\r\n                android.graphics.PorterDuff.Mode.MULTIPLY\r\n            );\r\n        }\r\n        rl.background = ContextCompat.getDrawable(requireActivity(), R.drawable.ic_menu_selected_bg)\r\n        tv.setTextColor(ContextCompat.getColor(requireActivity(), R.color.robins_egg_blue))\r\n        iv.setColorFilter(Color.argb(255, 255, 255, 255))\r\n\r\n        /*if (category.isNotEmpty()) {\r\n            if (isMapView) {\r\n//                setMapFragment()\r\n                setMapFragment()\r\n                ivMap.setImageResource(R.drawable.ic_list)\r\n            } else {\r\n                setFragment(RestaurantFragment.newInstance(category, \"\"))\r\n                ivMap.setImageResource(R.drawable.ic_map)\r\n            }\r\n        }*/\r\n    }\r\n\r\n    private fun setFragment(fragment: Fragment) {\r\n        frameLayoutHome.visibility = View.VISIBLE\r\n        frameLayoutMap.visibility = View.GONE\r\n        requireActivity().supportFragmentManager\r\n            .beginTransaction()\r\n            .replace(R.id.frameLayoutHome, fragment)\r\n            .commit()\r\n    }\r\n\r\n    private fun setMapFragment() {\r\n        /*frameLayoutHome.visibility = View.GONE\r\n        frameLayoutMap.visibility = View.VISIBLE\r\n        requireActivity().supportFragmentManager\r\n                .beginTransaction()\r\n                .replace(R.id.frameLayoutMap, MapFragment.newInstance(selectedCategoryId, \"\"))\r\n                .commit()*/\r\n    }\r\n\r\n\r\n    fun setUI(category: String) {\r\n        when (category) {\r\n            Constants.RESTAURANT -> {\r\n                updateUI(rlRestaurant, tvRestaurant, ivRestaurant, Constants.RESTAURANT)\r\n            }\r\n\r\n            Constants.SALON -> {\r\n                updateUI(rlSalon, tvSalon, ivSalon, Constants.SALON)\r\n            }\r\n\r\n            Constants.GYM -> {\r\n                updateUI(rlGym, tvGym, ivGym, Constants.GYM)\r\n            }\r\n\r\n            Constants.SPA -> {\r\n                updateUI(rlSpa, tvSpa, ivSpa, Constants.SPA)\r\n            }\r\n\r\n            Constants.BAKERY -> {\r\n                updateUI(rlBakery, tvBakery, ivBakery, Constants.BAKERY)\r\n            }\r\n\r\n            Constants.RETAIL -> {\r\n                updateUI(rlRetail, tvRetail, ivRetail, Constants.RETAIL)\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onCategoryClick(category: String) {\r\n        if (::homeCategoriesAdapter.isInitialized) {\r\n            homeCategoriesAdapter.setPosition(category.toInt())\r\n        }\r\n        setFragment(RestaurantFragment.newInstance(category, \"\"))\r\n        selectedCategoryId = category\r\n    }\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    private fun showMsgDialogAndProceed(msg: String) {\r\n        try {\r\n            val myDialog = DialogToast(requireActivity())\r\n            myDialog.show()\r\n            myDialog.holder?.let {\r\n                it.tvTitle.text = \"Dashboard\"\r\n                it.tvMessage.text = msg\r\n                it.btnDialogCancel.visibility = View.GONE\r\n                it.btnDialogLogout.text = \"OK\"\r\n                it.btnDialogLogout.visibility = View.GONE\r\n                var i = Config.autoDialogDismissTimeInSec\r\n                it.btnDialogLogout.post(object : Runnable {\r\n                    override fun run() {\r\n                        if (i == 0) {\r\n                            myDialog.dismiss()\r\n                        } else {\r\n                            i--\r\n                            it.btnDialogLogout.postDelayed(this, 1000)\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/themarkettheory/user/ui/main/fragment/HomeFragment.kt b/app/src/main/java/com/themarkettheory/user/ui/main/fragment/HomeFragment.kt
--- a/app/src/main/java/com/themarkettheory/user/ui/main/fragment/HomeFragment.kt	(revision a76bab96113d2ac5aac0a03bf2a754ef748ea040)
+++ b/app/src/main/java/com/themarkettheory/user/ui/main/fragment/HomeFragment.kt	(date 1643289611626)
@@ -4,6 +4,7 @@
 import android.content.Intent
 import android.graphics.Color
 import android.os.Bundle
+import android.util.Log
 import android.view.LayoutInflater
 import android.view.View
 import android.view.ViewGroup
@@ -159,7 +160,13 @@
                         ) View.VISIBLE else View.GONE
                     tvCartCount.text = home.data!!.cartCount!!.toString().trim()
                     if (home.isFeedBack == 1) {
-                        startActivity(Intent(requireActivity(), FeedbackActivity::class.java))
+                        Log.e("isFEEd","Count")
+                        startActivity(
+                            Intent(
+                                requireActivity(),
+                                FeedbackActivity::class.java
+                            ).putExtra("serviceId", home.serviceId)
+                        )
                     }
 
                     home.data?.let {
Index: app/src/main/java/com/themarkettheory/user/newmodels/home/NewHomeRes.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.themarkettheory.user.newmodels.home\r\n\r\n\r\nimport com.google.gson.annotations.SerializedName\r\n\r\ndata class NewHomeRes(\r\n    @SerializedName(\"status\")\r\n    var status: Int? = 0,\r\n    @SerializedName(\"message\")\r\n    var message: String? = \"\",\r\n    @SerializedName(\"data\")\r\n    var `data`: Data? = Data(),\r\n    @SerializedName(\"is_feedback\")\r\n    var isFeedBack: Int? = 0,\r\n)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/themarkettheory/user/newmodels/home/NewHomeRes.kt b/app/src/main/java/com/themarkettheory/user/newmodels/home/NewHomeRes.kt
--- a/app/src/main/java/com/themarkettheory/user/newmodels/home/NewHomeRes.kt	(revision a76bab96113d2ac5aac0a03bf2a754ef748ea040)
+++ b/app/src/main/java/com/themarkettheory/user/newmodels/home/NewHomeRes.kt	(date 1643289527817)
@@ -12,4 +12,6 @@
     var `data`: Data? = Data(),
     @SerializedName("is_feedback")
     var isFeedBack: Int? = 0,
+    @SerializedName("feedback_remain_service_id")
+    var serviceId: Int? = 0,
 )
\ No newline at end of file
Index: app/src/main/java/com/themarkettheory/user/ui/main/activity/BaseActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.themarkettheory.user.ui.main.activity\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.content.BroadcastReceiver\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.IntentFilter\r\nimport android.content.res.Configuration\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.Window\r\nimport android.view.WindowManager\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.localbroadcastmanager.content.LocalBroadcastManager\r\nimport com.google.gson.Gson\r\nimport com.themarkettheory.user.database.MyRoomDatabase\r\nimport com.themarkettheory.user.helper.Prefs\r\nimport dagger.hilt.android.AndroidEntryPoint\r\nimport javax.inject.Inject\r\n\r\n\r\n@AndroidEntryPoint\r\nopen class BaseActivity : AppCompatActivity() {\r\n\r\n    @Inject\r\n    lateinit var gson: Gson\r\n\r\n    @Inject\r\n    lateinit var myRoomDatabase: MyRoomDatabase\r\n\r\n    lateinit var prefs: Prefs\r\n    private lateinit var mMessageReceiver: BroadcastReceiver\r\n\r\n    override fun attachBaseContext(newBase: Context?) {\r\n        super.attachBaseContext(newBase)\r\n        val newOverride = Configuration(newBase?.resources?.configuration)\r\n        newOverride.fontScale = 0.85f\r\n        // applyOverrideConfiguration(newOverride)\r\n    }\r\n\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        /*adjustFontScale(resources.configuration)*/\r\n        prefs = Prefs(this)\r\n\r\n        mMessageReceiver = object : BroadcastReceiver() {\r\n            @SuppressLint(\"LongLogTag\")\r\n            override fun onReceive(context: Context?, intent: Intent) {\r\n\r\n                val message = intent.getStringExtra(\"message\")\r\n                val notification_type = intent.getStringExtra(\"notification_type\")\r\n                Log.e(\"ON Activity notification_type:\", notification_type.toString())\r\n                Log.e(\"ON Activity message:\", message.toString())\r\n                if (message != null) {\r\n                    if (intent.getStringExtra(\"notification_type\")\r\n                            .equals(\"10\")\r\n                    ) { // feedback form\r\n                        prefs.setFeedback(true)\r\n                        startActivity(Intent(this@BaseActivity, FeedbackActivity::class.java))\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n        LocalBroadcastManager.getInstance(this)\r\n            .registerReceiver(mMessageReceiver, IntentFilter(\"requests_count\"))\r\n    }\r\n\r\n    fun setStatusBarColor(color: Int) {\r\n        val window: Window = window\r\n        window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS)\r\n        window.statusBarColor = color\r\n    }\r\n\r\n/*    open fun adjustFontScale(configuration: Configuration) {\r\n        if (configuration.fontScale > 1.30) {\r\n            configuration.fontScale = 1.30f\r\n            val metrics = resources.displayMetrics\r\n            *//*val wm = getSystemService(WINDOW_SERVICE) as WindowManager\r\n            wm.defaultDisplay.getMetrics(metrics)*//*\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {\r\n                this.display?.getRealMetrics(DisplayMetrics())\r\n            } else {\r\n                @Suppress(\"DEPRECATION\")\r\n                this.windowManager.defaultDisplay.getMetrics(DisplayMetrics())\r\n            }\r\n            metrics.scaledDensity = configuration.fontScale * metrics.density\r\n            baseContext.resources.updateConfiguration(configuration, metrics)\r\n        }\r\n    }*/\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/themarkettheory/user/ui/main/activity/BaseActivity.kt b/app/src/main/java/com/themarkettheory/user/ui/main/activity/BaseActivity.kt
--- a/app/src/main/java/com/themarkettheory/user/ui/main/activity/BaseActivity.kt	(revision a76bab96113d2ac5aac0a03bf2a754ef748ea040)
+++ b/app/src/main/java/com/themarkettheory/user/ui/main/activity/BaseActivity.kt	(date 1643289527954)
@@ -56,8 +56,13 @@
                     if (intent.getStringExtra("notification_type")
                             .equals("10")
                     ) { // feedback form
-                        prefs.setFeedback(true)
-                        startActivity(Intent(this@BaseActivity, FeedbackActivity::class.java))
+
+                        startActivity(
+                            Intent(
+                                this@BaseActivity,
+                                FeedbackActivity::class.java
+                            ).putExtra("serviceId", intent.getIntExtra("serviceId",0))
+                        )
                     }
 
                 }
Index: app/src/main/java/com/themarkettheory/user/ui/main/activity/FeedbackActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.themarkettheory.user.ui.main.activity\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.os.Bundle\r\nimport android.view.MotionEvent\r\nimport android.view.View\r\nimport android.view.WindowManager\r\nimport android.widget.Button\r\nimport androidx.appcompat.widget.AppCompatButton\r\nimport androidx.lifecycle.Observer\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.google.android.material.button.MaterialButton\r\nimport com.themarkettheory.user.R\r\nimport com.themarkettheory.user.helper.Config\r\nimport com.themarkettheory.user.helper.PubFun\r\nimport com.themarkettheory.user.ui.dialog.dialogToast.DialogToast\r\nimport com.themarkettheory.user.viewmodel.GeneralViewModel\r\nimport kotlinx.android.synthetic.main.activity_feedback_new.*\r\n\r\nclass FeedbackActivity : BaseActivity(), View.OnClickListener {\r\n\r\n    lateinit var generalViewModel: GeneralViewModel\r\n    var priviousRating = 0.0f\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        window.exitTransition = null\r\n        this.window\r\n            .setSoftInputMode(\r\n                WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE or\r\n                        WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN\r\n            )\r\n        setContentView(R.layout.activity_feedback_new)\r\n        generalViewModel = ViewModelProvider(this).get(GeneralViewModel::class.java)\r\n\r\n        val btnRating1 = findViewById<AppCompatButton>(R.id.btnRating1)\r\n        val btnRating2 = findViewById<AppCompatButton>(R.id.btnRating2)\r\n        val btnRating3 = findViewById<AppCompatButton>(R.id.btnRating3)\r\n        val btnRating4 = findViewById<AppCompatButton>(R.id.btnRating4)\r\n\r\n\r\n\r\n        btnRating1.setOnClickListener {\r\n\r\n            if (rbCustomerService.rating == 2.0f) {\r\n                rbCustomerService.rating = 1.0f\r\n            } else if (rbCustomerService.rating == 1.0f) {\r\n                rbCustomerService.rating = 0.0f\r\n            } else if (rbCustomerService.rating == 0.0f) {\r\n                rbCustomerService.rating = 1.0f\r\n            }\r\n        }\r\n        btnRating2.setOnClickListener {\r\n\r\n            if (rbRestaurantCleanliness.rating == 2.0f) {\r\n                rbRestaurantCleanliness.rating = 1.0f\r\n            } else if (rbRestaurantCleanliness.rating == 1.0f) {\r\n                rbRestaurantCleanliness.rating = 0.0f\r\n            } else if (rbRestaurantCleanliness.rating == 0.0f) {\r\n                rbRestaurantCleanliness.rating = 1.0f\r\n            }\r\n        }\r\n        btnRating3.setOnClickListener {\r\n\r\n            if (rbFoodQuality.rating == 2.0f) {\r\n                rbFoodQuality.rating = 1.0f\r\n            } else if (rbFoodQuality.rating == 1.0f) {\r\n                rbFoodQuality.rating = 0.0f\r\n            } else if (rbFoodQuality.rating == 0.0f) {\r\n                rbFoodQuality.rating = 1.0f\r\n            }\r\n        }\r\n\r\n        btnRating4.setOnClickListener {\r\n\r\n            if (rbRecommendFriend.rating == 2.0f) {\r\n                rbRecommendFriend.rating = 1.0f\r\n            } else if (rbRecommendFriend.rating == 1.0f) {\r\n                rbRecommendFriend.rating = 0.0f\r\n            } else if (rbRecommendFriend.rating == 0.0f) {\r\n                rbRecommendFriend.rating = 1.0f\r\n            }\r\n        }\r\n        btnSubmitReview.setOnClickListener(this)\r\n        getResponse()\r\n    }\r\n\r\n\r\n    override fun onClick(v: View?) {\r\n        when (v) {\r\n            btnSubmitReview -> {\r\n                //call api for add review\r\n                var comment: String = edAddFeedback.text.toString()\r\n                var rating0: Float = rbCustomerService.rating\r\n                var rating1: Float = rbRestaurantCleanliness.rating\r\n                var rating2: Float = rbFoodQuality.rating\r\n                var rating3: Float = rbRecommendFriend.rating\r\n\r\n                val rating = arrayOf(rating0, rating1, rating2, rating3)\r\n                //calling api as of now sending service id 3 hardcoded\r\n                if (PubFun.isInternetConnection(this@FeedbackActivity)) {\r\n                    generalViewModel.add_review(3, rating, comment)\r\n                } else {\r\n                    showMsgDialogAndProceed(Config.msgToastForInternet)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun getResponse() {\r\n        generalViewModel.responseAddReview.observe(this, Observer {\r\n            when (it.status) {\r\n                0 -> showMsgDialogAndProceed(it.message!!.trim())\r\n                1 -> {\r\n                    showMsgDialogAndProceed(it.message!!.trim())\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    private fun showMsgDialogAndProceed(msg: String) {\r\n        try {\r\n            val myDialog = DialogToast(this@FeedbackActivity)\r\n            myDialog.show()\r\n            myDialog.holder?.let {\r\n                it.tvTitle.text = \"Feedback\"\r\n                it.tvMessage.text = msg\r\n                it.btnDialogCancel.visibility = View.GONE\r\n                it.btnDialogLogout.text = \"OK\"\r\n                it.btnDialogLogout.visibility = View.GONE\r\n                var i = Config.autoDialogDismissTimeInSec\r\n                it.btnDialogLogout.post(object : Runnable {\r\n                    override fun run() {\r\n                        if (i == 0) {\r\n                            myDialog.dismiss()\r\n                            finish()\r\n                        } else {\r\n                            i--\r\n                            it.btnDialogLogout.postDelayed(this, 1000)\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    override fun onBackPressed() {\r\n\r\n        //super.onBackPressed()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/themarkettheory/user/ui/main/activity/FeedbackActivity.kt b/app/src/main/java/com/themarkettheory/user/ui/main/activity/FeedbackActivity.kt
--- a/app/src/main/java/com/themarkettheory/user/ui/main/activity/FeedbackActivity.kt	(revision a76bab96113d2ac5aac0a03bf2a754ef748ea040)
+++ b/app/src/main/java/com/themarkettheory/user/ui/main/activity/FeedbackActivity.kt	(date 1643290519178)
@@ -1,6 +1,7 @@
 package com.themarkettheory.user.ui.main.activity
 
 import android.annotation.SuppressLint
+import android.content.Intent
 import android.os.Bundle
 import android.view.MotionEvent
 import android.view.View
@@ -18,7 +19,7 @@
 import kotlinx.android.synthetic.main.activity_feedback_new.*
 
 class FeedbackActivity : BaseActivity(), View.OnClickListener {
-
+    var serviceId = 0
     lateinit var generalViewModel: GeneralViewModel
     var priviousRating = 0.0f
     override fun onCreate(savedInstanceState: Bundle?) {
@@ -37,7 +38,7 @@
         val btnRating3 = findViewById<AppCompatButton>(R.id.btnRating3)
         val btnRating4 = findViewById<AppCompatButton>(R.id.btnRating4)
 
-
+        serviceId = intent.getIntExtra("serviceId", 0)
 
         btnRating1.setOnClickListener {
 
@@ -98,9 +99,9 @@
                 val rating = arrayOf(rating0, rating1, rating2, rating3)
                 //calling api as of now sending service id 3 hardcoded
                 if (PubFun.isInternetConnection(this@FeedbackActivity)) {
-                    generalViewModel.add_review(3, rating, comment)
+                    generalViewModel.add_review(serviceId, rating, comment)
                 } else {
-                    showMsgDialogAndProceed(Config.msgToastForInternet)
+                    showMsgDialogAndProceed(Config.msgToastForInternet, true)
                 }
             }
         }
@@ -109,16 +110,16 @@
     private fun getResponse() {
         generalViewModel.responseAddReview.observe(this, Observer {
             when (it.status) {
-                0 -> showMsgDialogAndProceed(it.message!!.trim())
+                0 -> showMsgDialogAndProceed(it.message!!.trim(), true)
                 1 -> {
-                    showMsgDialogAndProceed(it.message!!.trim())
+                    showMsgDialogAndProceed(it.message!!.trim(), false)
                 }
             }
         })
     }
 
     @SuppressLint("SetTextI18n")
-    private fun showMsgDialogAndProceed(msg: String) {
+    private fun showMsgDialogAndProceed(msg: String, isError: Boolean) {
         try {
             val myDialog = DialogToast(this@FeedbackActivity)
             myDialog.show()
@@ -133,7 +134,12 @@
                     override fun run() {
                         if (i == 0) {
                             myDialog.dismiss()
-                            finish()
+                            if (!isError) {
+                                val intent = Intent(this@FeedbackActivity, MainActivity::class.java)
+                                intent.flags =
+                                    Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
+                                startActivity(intent)
+                            }
                         } else {
                             i--
                             it.btnDialogLogout.postDelayed(this, 1000)
Index: app/src/main/java/com/themarkettheory/user/ui/main/fragment/NotificationAlertFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.themarkettheory.user.ui.main.fragment\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.content.Context\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.Observer\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.google.gson.Gson\r\nimport com.themarkettheory.user.R\r\nimport com.themarkettheory.user.helper.Config.Companion.gson\r\nimport com.themarkettheory.user.helper.Utils\r\nimport com.themarkettheory.user.ui.main.adapter.NotificationAlertsAdapter\r\nimport com.themarkettheory.user.viewmodel.GeneralViewModel\r\nimport kotlinx.android.synthetic.main.fragment_notiification_alert.*\r\nimport javax.inject.Inject\r\n\r\n// TODO: Rename parameter arguments, choose names that match\r\n// the fragment initialization parameters, e.g. ARG_ITEM_NUMBER\r\nprivate const val ARG_PARAM1 = \"param1\"\r\nprivate const val ARG_PARAM2 = \"param2\"\r\n\r\n/**\r\n * A simple [Fragment] subclass.\r\n * Use the [AlertFragment.newInstance] factory method to\r\n * create an instance of this fragment.\r\n */\r\nclass NotificationAlertFragment : Fragment() {\r\n    // TODO: Rename and change types of parameters\r\n    private var param1: String? = null\r\n    private var param2: String? = null\r\n    lateinit var generalViewModel: GeneralViewModel\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        arguments?.let {\r\n            param1 = it.getString(ARG_PARAM1)\r\n            param2 = it.getString(ARG_PARAM2)\r\n        }\r\n        generalViewModel = ViewModelProvider(this).get(GeneralViewModel::class.java)\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        // Inflate the layout for this fragment\r\n        return inflater.inflate(R.layout.fragment_notiification_alert, container, false)\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        val gson = Gson()\r\n        generalViewModel.get_notifications()\r\n\r\n        getResponse()\r\n\r\n    }\r\n\r\n    @SuppressLint(\"LongLogTag\")\r\n    private fun getResponse() {\r\n        generalViewModel.isLoading.observe(viewLifecycleOwner, Observer {\r\n            if (it!!) {\r\n\r\n                Utils.showProgress(requireActivity())\r\n            } else {\r\n                Utils.hideProgress(requireActivity())\r\n            }\r\n        })\r\n\r\n        generalViewModel.responseNotifications.observe(viewLifecycleOwner, Observer {\r\n\r\n            if (it.status == 1) {\r\n                val notificationAlertsAdapter =\r\n                    it.data?.let { it1 -> NotificationAlertsAdapter(requireActivity(), it1) }\r\n                Log.e(\"NotificationsAlertData:\", gson.toJson(it.data))\r\n                rvAlert.adapter = notificationAlertsAdapter\r\n                rvAlert.layoutManager = LinearLayoutManager(activity)\r\n            } else {\r\n                Utils.showSnackbar(requireActivity(), it.message)\r\n            }\r\n        })\r\n    }\r\n\r\n//    override fun onAttach(context: Context) {\r\n//        super.onAttach(context)\r\n//        generalViewModel.get_notifications()\r\n//\r\n//    }\r\n\r\n    companion object {\r\n        /**\r\n         * Use this factory method to create a new instance of\r\n         * this fragment using the provided parameters.\r\n         *\r\n         * @param param1 Parameter 1.\r\n         * @param param2 Parameter 2.\r\n         * @return A new instance of fragment AlertFragment.\r\n         */\r\n        // TODO: Rename and change types and number of parameters\r\n        @JvmStatic\r\n        fun newInstance(param1: String, param2: String) =\r\n            NotificationAlertFragment().apply {\r\n                arguments = Bundle().apply {\r\n                    putString(ARG_PARAM1, param1)\r\n                    putString(ARG_PARAM2, param2)\r\n                }\r\n            }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/themarkettheory/user/ui/main/fragment/NotificationAlertFragment.kt b/app/src/main/java/com/themarkettheory/user/ui/main/fragment/NotificationAlertFragment.kt
--- a/app/src/main/java/com/themarkettheory/user/ui/main/fragment/NotificationAlertFragment.kt	(revision a76bab96113d2ac5aac0a03bf2a754ef748ea040)
+++ b/app/src/main/java/com/themarkettheory/user/ui/main/fragment/NotificationAlertFragment.kt	(date 1643287184511)
@@ -57,9 +57,7 @@
         super.onViewCreated(view, savedInstanceState)
         val gson = Gson()
         generalViewModel.get_notifications()
-
         getResponse()
-
     }
 
     @SuppressLint("LongLogTag")
